// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Invoice;
import com.bcs.p3s.model.InvoiceDataOnDemand;
import com.bcs.p3s.model.PaymentDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InvoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InvoiceDataOnDemand: @Component;
    
    private Random InvoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<Invoice> InvoiceDataOnDemand.data;
    
    @Autowired
    PaymentDataOnDemand InvoiceDataOnDemand.paymentDataOnDemand;
    
    public Invoice InvoiceDataOnDemand.getNewTransientInvoice(int index) {
        Invoice obj = new Invoice();
        setDocPath(obj, index);
        setFilename(obj, index);
        setInvoiceNumber(obj, index);
        setInvoiceStatus(obj, index);
        setInvoiceTemplateId(obj, index);
        setInvoiceType(obj, index);
        setIssueDate(obj, index);
        setLatePayPenalty_USD(obj, index);
        setPreceedingInvoiceId(obj, index);
        return obj;
    }
    
    public void InvoiceDataOnDemand.setDocPath(Invoice obj, int index) {
        String docPath = "docPath_" + index;
        obj.setDocPath(docPath);
    }
    
    public void InvoiceDataOnDemand.setFilename(Invoice obj, int index) {
        String filename = "filename_" + index;
        obj.setFilename(filename);
    }
    
    public void InvoiceDataOnDemand.setInvoiceNumber(Invoice obj, int index) {
        String invoiceNumber = "invoiceNumber_" + index;
        obj.setInvoiceNumber(invoiceNumber);
    }
    
    public void InvoiceDataOnDemand.setInvoiceStatus(Invoice obj, int index) {
        String invoiceStatus = "invoiceStatus_" + index;
        obj.setInvoiceStatus(invoiceStatus);
    }
    
    public void InvoiceDataOnDemand.setInvoiceTemplateId(Invoice obj, int index) {
        String invoiceTemplateId = "invoiceTemplateId_" + index;
        obj.setInvoiceTemplateId(invoiceTemplateId);
    }
    
    public void InvoiceDataOnDemand.setInvoiceType(Invoice obj, int index) {
        String invoiceType = "invoiceType_" + index;
        obj.setInvoiceType(invoiceType);
    }
    
    public void InvoiceDataOnDemand.setIssueDate(Invoice obj, int index) {
        Date issueDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setIssueDate(issueDate);
    }
    
    public void InvoiceDataOnDemand.setLatePayPenalty_USD(Invoice obj, int index) {
        BigDecimal latePayPenalty_USD = BigDecimal.valueOf(index);
        obj.setLatePayPenalty_USD(latePayPenalty_USD);
    }
    
    public void InvoiceDataOnDemand.setPreceedingInvoiceId(Invoice obj, int index) {
        Invoice preceedingInvoiceId = obj;
        obj.setPreceedingInvoiceId(preceedingInvoiceId);
    }
    
    public Invoice InvoiceDataOnDemand.getSpecificInvoice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Invoice obj = data.get(index);
        Long id = obj.getId();
        return Invoice.findInvoice(id);
    }
    
    public Invoice InvoiceDataOnDemand.getRandomInvoice() {
        init();
        Invoice obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Invoice.findInvoice(id);
    }
    
    public boolean InvoiceDataOnDemand.modifyInvoice(Invoice obj) {
        return false;
    }
    
    public void InvoiceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Invoice.findInvoiceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Invoice' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Invoice>();
        for (int i = 0; i < 10; i++) {
            Invoice obj = getNewTransientInvoice(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
