// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.controller.web;

import com.bcs.p3s.controller.web.P3SUserController;
import com.bcs.p3s.model.Business;
import com.bcs.p3s.model.LoginMessage;
import com.bcs.p3s.model.P3SUser;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect P3SUserController_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String P3SUserController.createForm(Model uiModel) {
        populateEditForm(uiModel, new P3SUser());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Business.countBusinesses() == 0) {
            dependencies.add(new String[] { "business", "businesses" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "p3susers/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String P3SUserController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("p3suser", P3SUser.findP3SUser(id));
        uiModel.addAttribute("itemId", id);
        return "p3susers/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String P3SUserController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("p3susers", P3SUser.findP3SUserEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) P3SUser.countP3SUsers() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("p3susers", P3SUser.findAllP3SUsers(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "p3susers/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String P3SUserController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, P3SUser.findP3SUser(id));
        return "p3susers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String P3SUserController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        P3SUser p3SUser = P3SUser.findP3SUser(id);
        p3SUser.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/p3susers";
    }
    
    void P3SUserController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("p3SUser_createddate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void P3SUserController.populateEditForm(Model uiModel, P3SUser p3SUser) {
        uiModel.addAttribute("p3SUser", p3SUser);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("businesses", Business.findAllBusinesses());
        uiModel.addAttribute("loginmessages", LoginMessage.findAllLoginMessages());
    }
    
    String P3SUserController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
