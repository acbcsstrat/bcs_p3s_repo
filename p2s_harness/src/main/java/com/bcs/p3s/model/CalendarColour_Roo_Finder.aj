// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.CalendarColour;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CalendarColour_Roo_Finder {
    
    public static Long CalendarColour.countFindCalendarColoursByRenewalDueDate(Date renewalDueDate) {
        if (renewalDueDate == null) throw new IllegalArgumentException("The renewalDueDate argument is required");
        EntityManager em = CalendarColour.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CalendarColour AS o WHERE o.renewalDueDate = :renewalDueDate", Long.class);
        q.setParameter("renewalDueDate", renewalDueDate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CalendarColour> CalendarColour.findCalendarColoursByRenewalDueDate(Date renewalDueDate) {
        if (renewalDueDate == null) throw new IllegalArgumentException("The renewalDueDate argument is required");
        EntityManager em = CalendarColour.entityManager();
        TypedQuery<CalendarColour> q = em.createQuery("SELECT o FROM CalendarColour AS o WHERE o.renewalDueDate = :renewalDueDate", CalendarColour.class);
        q.setParameter("renewalDueDate", renewalDueDate);
        return q;
    }
    
    public static TypedQuery<CalendarColour> CalendarColour.findCalendarColoursByRenewalDueDate(Date renewalDueDate, String sortFieldName, String sortOrder) {
        if (renewalDueDate == null) throw new IllegalArgumentException("The renewalDueDate argument is required");
        EntityManager em = CalendarColour.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CalendarColour AS o WHERE o.renewalDueDate = :renewalDueDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CalendarColour> q = em.createQuery(queryBuilder.toString(), CalendarColour.class);
        q.setParameter("renewalDueDate", renewalDueDate);
        return q;
    }
    
}
