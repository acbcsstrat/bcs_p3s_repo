// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Business;
import com.bcs.p3s.model.BusinessDataOnDemand;
import com.bcs.p3s.model.Patent;
import com.bcs.p3s.model.PatentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PatentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PatentDataOnDemand: @Component;
    
    private Random PatentDataOnDemand.rnd = new SecureRandom();
    
    private List<Patent> PatentDataOnDemand.data;
    
    @Autowired
    BusinessDataOnDemand PatentDataOnDemand.businessDataOnDemand;
    
    public Patent PatentDataOnDemand.getNewTransientPatent(int index) {
        Patent obj = new Patent();
        setBusiness(obj, index);
        setClientRef(obj, index);
        setEpoPatentStatus(obj, index);
        setFilingDate(obj, index);
        setIpcCodes(obj, index);
        setLastRenewedDateExEpo(obj, index);
        setLastRenewedYearEpo(obj, index);
        setPatentApplicationNumber(obj, index);
        setPatentPublicationNumber(obj, index);
        setPrimaryApplicantName(obj, index);
        setRenewalStatus(obj, index);
        setRenewalYear(obj, index);
        setRepresentative(obj, index);
        setShortTitle(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void PatentDataOnDemand.setBusiness(Patent obj, int index) {
        Business business = businessDataOnDemand.getRandomBusiness();
        obj.setBusiness(business);
    }
    
    public void PatentDataOnDemand.setClientRef(Patent obj, int index) {
        String clientRef = "clientRef_" + index;
        if (clientRef.length() > 30) {
            clientRef = clientRef.substring(0, 30);
        }
        obj.setClientRef(clientRef);
    }
    
    public void PatentDataOnDemand.setEpoPatentStatus(Patent obj, int index) {
        String epoPatentStatus = "epoPatentStatus_" + index;
        obj.setEpoPatentStatus(epoPatentStatus);
    }
    
    public void PatentDataOnDemand.setFilingDate(Patent obj, int index) {
        Date filingDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFilingDate(filingDate);
    }
    
    public void PatentDataOnDemand.setIpcCodes(Patent obj, int index) {
        String ipcCodes = "ipcCodes_" + index;
        obj.setIpcCodes(ipcCodes);
    }
    
    public void PatentDataOnDemand.setLastRenewedDateExEpo(Patent obj, int index) {
        Date lastRenewedDateExEpo = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastRenewedDateExEpo(lastRenewedDateExEpo);
    }
    
    public void PatentDataOnDemand.setLastRenewedYearEpo(Patent obj, int index) {
        Integer lastRenewedYearEpo = new Integer(index);
        obj.setLastRenewedYearEpo(lastRenewedYearEpo);
    }
    
    public void PatentDataOnDemand.setPatentApplicationNumber(Patent obj, int index) {
        String patentApplicationNumber = "patentApplicationNumber_" + index;
        obj.setPatentApplicationNumber(patentApplicationNumber);
    }
    
    public void PatentDataOnDemand.setPatentPublicationNumber(Patent obj, int index) {
        String patentPublicationNumber = "patentPublicationNumber_" + index;
        obj.setPatentPublicationNumber(patentPublicationNumber);
    }
    
    public void PatentDataOnDemand.setPrimaryApplicantName(Patent obj, int index) {
        String primaryApplicantName = "primaryApplicantName_" + index;
        obj.setPrimaryApplicantName(primaryApplicantName);
    }
    
    public void PatentDataOnDemand.setRenewalStatus(Patent obj, int index) {
        String renewalStatus = "renewalStatus_" + index;
        obj.setRenewalStatus(renewalStatus);
    }
    
    public void PatentDataOnDemand.setRenewalYear(Patent obj, int index) {
        Integer renewalYear = new Integer(index);
        obj.setRenewalYear(renewalYear);
    }
    
    public void PatentDataOnDemand.setRepresentative(Patent obj, int index) {
        String representative = "representative_" + index;
        obj.setRepresentative(representative);
    }
    
    public void PatentDataOnDemand.setShortTitle(Patent obj, int index) {
        String shortTitle = "shortTitle_" + index;
        if (shortTitle.length() > 25) {
            shortTitle = shortTitle.substring(0, 25);
        }
        obj.setShortTitle(shortTitle);
    }
    
    public void PatentDataOnDemand.setTitle(Patent obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Patent PatentDataOnDemand.getSpecificPatent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Patent obj = data.get(index);
        Long id = obj.getId();
        return Patent.findPatent(id);
    }
    
    public Patent PatentDataOnDemand.getRandomPatent() {
        init();
        Patent obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Patent.findPatent(id);
    }
    
    public boolean PatentDataOnDemand.modifyPatent(Patent obj) {
        return false;
    }
    
    public void PatentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Patent.findPatentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Patent' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Patent>();
        for (int i = 0; i < 10; i++) {
            Patent obj = getNewTransientPatent(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
