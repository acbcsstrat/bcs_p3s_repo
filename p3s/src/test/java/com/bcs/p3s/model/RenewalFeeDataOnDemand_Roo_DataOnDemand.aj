// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Renewal;
import com.bcs.p3s.model.RenewalFee;
import com.bcs.p3s.model.RenewalFeeDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect RenewalFeeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RenewalFeeDataOnDemand: @Component;
    
    private Random RenewalFeeDataOnDemand.rnd = new SecureRandom();
    
    private List<RenewalFee> RenewalFeeDataOnDemand.data;
    
    public RenewalFee RenewalFeeDataOnDemand.getNewTransientRenewalFee(int index) {
        RenewalFee obj = new RenewalFee();
        setExpressFee_USD(obj, index);
        setExtensionFee_EUR(obj, index);
        setFxRate(obj, index);
        setProcessingFee_USD(obj, index);
        setRenewal(obj, index);
        setRenewalFee_EUR(obj, index);
        setSubTotal_USD(obj, index);
        setUrgentFee_USD(obj, index);
        return obj;
    }
    
    public void RenewalFeeDataOnDemand.setExpressFee_USD(RenewalFee obj, int index) {
        BigDecimal expressFee_USD = BigDecimal.valueOf(index);
        obj.setExpressFee_USD(expressFee_USD);
    }
    
    public void RenewalFeeDataOnDemand.setExtensionFee_EUR(RenewalFee obj, int index) {
        BigDecimal extensionFee_EUR = BigDecimal.valueOf(index);
        obj.setExtensionFee_EUR(extensionFee_EUR);
    }
    
    public void RenewalFeeDataOnDemand.setFxRate(RenewalFee obj, int index) {
        BigDecimal fxRate = BigDecimal.valueOf(index);
        if (fxRate.compareTo(new BigDecimal("999999.999999")) == 1) {
            fxRate = new BigDecimal("999999.999999");
        }
        obj.setFxRate(fxRate);
    }
    
    public void RenewalFeeDataOnDemand.setProcessingFee_USD(RenewalFee obj, int index) {
        BigDecimal processingFee_USD = BigDecimal.valueOf(index);
        obj.setProcessingFee_USD(processingFee_USD);
    }
    
    public void RenewalFeeDataOnDemand.setRenewal(RenewalFee obj, int index) {
        Renewal renewal = null;
        obj.setRenewal(renewal);
    }
    
    public void RenewalFeeDataOnDemand.setRenewalFee_EUR(RenewalFee obj, int index) {
        BigDecimal renewalFee_EUR = BigDecimal.valueOf(index);
        obj.setRenewalFee_EUR(renewalFee_EUR);
    }
    
    public void RenewalFeeDataOnDemand.setSubTotal_USD(RenewalFee obj, int index) {
        BigDecimal subTotal_USD = BigDecimal.valueOf(index);
        obj.setSubTotal_USD(subTotal_USD);
    }
    
    public void RenewalFeeDataOnDemand.setUrgentFee_USD(RenewalFee obj, int index) {
        BigDecimal urgentFee_USD = BigDecimal.valueOf(index);
        obj.setUrgentFee_USD(urgentFee_USD);
    }
    
    public RenewalFee RenewalFeeDataOnDemand.getSpecificRenewalFee(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        RenewalFee obj = data.get(index);
        Long id = obj.getId();
        return RenewalFee.findRenewalFee(id);
    }
    
    public RenewalFee RenewalFeeDataOnDemand.getRandomRenewalFee() {
        init();
        RenewalFee obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return RenewalFee.findRenewalFee(id);
    }
    
    public boolean RenewalFeeDataOnDemand.modifyRenewalFee(RenewalFee obj) {
        return false;
    }
    
    public void RenewalFeeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = RenewalFee.findRenewalFeeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'RenewalFee' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<RenewalFee>();
        for (int i = 0; i < 10; i++) {
            RenewalFee obj = getNewTransientRenewalFee(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
