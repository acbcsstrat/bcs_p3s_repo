// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Notification;
import com.bcs.p3s.model.NotificationDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect NotificationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NotificationDataOnDemand: @Component;
    
    private Random NotificationDataOnDemand.rnd = new SecureRandom();
    
    private List<Notification> NotificationDataOnDemand.data;
    
    public Notification NotificationDataOnDemand.getNewTransientNotification(int index) {
        Notification obj = new Notification();
        setCostbandcolor(obj, index);
        setDefaultOn(obj, index);
        setDisplayOrder(obj, index);
        setEmailTemplateId(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void NotificationDataOnDemand.setCostbandcolor(Notification obj, int index) {
        String costbandcolor = "costbandcolor_" + index;
        obj.setCostbandcolor(costbandcolor);
    }
    
    public void NotificationDataOnDemand.setDefaultOn(Notification obj, int index) {
        Boolean defaultOn = Boolean.TRUE;
        obj.setDefaultOn(defaultOn);
    }
    
    public void NotificationDataOnDemand.setDisplayOrder(Notification obj, int index) {
        Integer displayOrder = new Integer(index);
        obj.setDisplayOrder(displayOrder);
    }
    
    public void NotificationDataOnDemand.setEmailTemplateId(Notification obj, int index) {
        String emailTemplateId = "foo" + index + "@bar.com";
        obj.setEmailTemplateId(emailTemplateId);
    }
    
    public void NotificationDataOnDemand.setTitle(Notification obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Notification NotificationDataOnDemand.getSpecificNotification(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Notification obj = data.get(index);
        Long id = obj.getId();
        return Notification.findNotification(id);
    }
    
    public Notification NotificationDataOnDemand.getRandomNotification() {
        init();
        Notification obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Notification.findNotification(id);
    }
    
    public boolean NotificationDataOnDemand.modifyNotification(Notification obj) {
        return false;
    }
    
    public void NotificationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Notification.findNotificationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Notification' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Notification>();
        for (int i = 0; i < 10; i++) {
            Notification obj = getNewTransientNotification(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
