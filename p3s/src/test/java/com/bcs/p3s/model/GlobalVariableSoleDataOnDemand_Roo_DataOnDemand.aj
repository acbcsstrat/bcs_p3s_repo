// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.GlobalVariableSole;
import com.bcs.p3s.model.GlobalVariableSoleDataOnDemand;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect GlobalVariableSoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GlobalVariableSoleDataOnDemand: @Component;
    
    private Random GlobalVariableSoleDataOnDemand.rnd = new SecureRandom();
    
    private List<GlobalVariableSole> GlobalVariableSoleDataOnDemand.data;
    
    public GlobalVariableSole GlobalVariableSoleDataOnDemand.getNewTransientGlobalVariableSole(int index) {
        GlobalVariableSole obj = new GlobalVariableSole();
        setCurrentMoneycorpRate(obj, index);
        setCurrentRateActiveDate(obj, index);
        setCurrent_P3S_rate(obj, index);
        setMoneycorpKey(obj, index);
        setRateUpliftPercent(obj, index);
        return obj;
    }
    
    public void GlobalVariableSoleDataOnDemand.setCurrentMoneycorpRate(GlobalVariableSole obj, int index) {
        BigDecimal currentMoneycorpRate = BigDecimal.valueOf(index);
        if (currentMoneycorpRate.compareTo(new BigDecimal("999999.999999")) == 1) {
            currentMoneycorpRate = new BigDecimal("999999.999999");
        }
        obj.setCurrentMoneycorpRate(currentMoneycorpRate);
    }
    
    public void GlobalVariableSoleDataOnDemand.setCurrentRateActiveDate(GlobalVariableSole obj, int index) {
        Date currentRateActiveDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCurrentRateActiveDate(currentRateActiveDate);
    }
    
    public void GlobalVariableSoleDataOnDemand.setCurrent_P3S_rate(GlobalVariableSole obj, int index) {
        BigDecimal current_P3S_rate = BigDecimal.valueOf(index);
        if (current_P3S_rate.compareTo(new BigDecimal("999999.999999")) == 1) {
            current_P3S_rate = new BigDecimal("999999.999999");
        }
        obj.setCurrent_P3S_rate(current_P3S_rate);
    }
    
    public void GlobalVariableSoleDataOnDemand.setMoneycorpKey(GlobalVariableSole obj, int index) {
        String moneycorpKey = "moneycorpKey_" + index;
        obj.setMoneycorpKey(moneycorpKey);
    }
    
    public void GlobalVariableSoleDataOnDemand.setRateUpliftPercent(GlobalVariableSole obj, int index) {
        BigDecimal rateUpliftPercent = BigDecimal.valueOf(index);
        obj.setRateUpliftPercent(rateUpliftPercent);
    }
    
    public GlobalVariableSole GlobalVariableSoleDataOnDemand.getSpecificGlobalVariableSole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GlobalVariableSole obj = data.get(index);
        Long id = obj.getId();
        return GlobalVariableSole.findGlobalVariableSole(id);
    }
    
    public GlobalVariableSole GlobalVariableSoleDataOnDemand.getRandomGlobalVariableSole() {
        init();
        GlobalVariableSole obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return GlobalVariableSole.findGlobalVariableSole(id);
    }
    
    public boolean GlobalVariableSoleDataOnDemand.modifyGlobalVariableSole(GlobalVariableSole obj) {
        return false;
    }
    
    public void GlobalVariableSoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = GlobalVariableSole.findGlobalVariableSoleEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GlobalVariableSole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GlobalVariableSole>();
        for (int i = 0; i < 10; i++) {
            GlobalVariableSole obj = getNewTransientGlobalVariableSole(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
