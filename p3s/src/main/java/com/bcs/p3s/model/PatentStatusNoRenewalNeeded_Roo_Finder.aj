// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.PatentStatusNoRenewalNeeded;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect PatentStatusNoRenewalNeeded_Roo_Finder {
    
    public static Long PatentStatusNoRenewalNeeded.countFindPatentStatusNoRenewalNeededsByStatusText_EPO(String statusText_EPO) {
        if (statusText_EPO == null || statusText_EPO.length() == 0) throw new IllegalArgumentException("The statusText_EPO argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_EPO = :statusText_EPO", Long.class);
        q.setParameter("statusText_EPO", statusText_EPO);
        return ((Long) q.getSingleResult());
    }
    
    public static Long PatentStatusNoRenewalNeeded.countFindPatentStatusNoRenewalNeededsByStatusText_OPS(String statusText_OPS) {
        if (statusText_OPS == null || statusText_OPS.length() == 0) throw new IllegalArgumentException("The statusText_OPS argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_OPS = :statusText_OPS", Long.class);
        q.setParameter("statusText_OPS", statusText_OPS);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PatentStatusNoRenewalNeeded> PatentStatusNoRenewalNeeded.findPatentStatusNoRenewalNeededsByStatusText_EPO(String statusText_EPO) {
        if (statusText_EPO == null || statusText_EPO.length() == 0) throw new IllegalArgumentException("The statusText_EPO argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        TypedQuery<PatentStatusNoRenewalNeeded> q = em.createQuery("SELECT o FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_EPO = :statusText_EPO", PatentStatusNoRenewalNeeded.class);
        q.setParameter("statusText_EPO", statusText_EPO);
        return q;
    }
    
    public static TypedQuery<PatentStatusNoRenewalNeeded> PatentStatusNoRenewalNeeded.findPatentStatusNoRenewalNeededsByStatusText_EPO(String statusText_EPO, String sortFieldName, String sortOrder) {
        if (statusText_EPO == null || statusText_EPO.length() == 0) throw new IllegalArgumentException("The statusText_EPO argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_EPO = :statusText_EPO");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PatentStatusNoRenewalNeeded> q = em.createQuery(queryBuilder.toString(), PatentStatusNoRenewalNeeded.class);
        q.setParameter("statusText_EPO", statusText_EPO);
        return q;
    }
    
    public static TypedQuery<PatentStatusNoRenewalNeeded> PatentStatusNoRenewalNeeded.findPatentStatusNoRenewalNeededsByStatusText_OPS(String statusText_OPS) {
        if (statusText_OPS == null || statusText_OPS.length() == 0) throw new IllegalArgumentException("The statusText_OPS argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        TypedQuery<PatentStatusNoRenewalNeeded> q = em.createQuery("SELECT o FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_OPS = :statusText_OPS", PatentStatusNoRenewalNeeded.class);
        q.setParameter("statusText_OPS", statusText_OPS);
        return q;
    }
    
    public static TypedQuery<PatentStatusNoRenewalNeeded> PatentStatusNoRenewalNeeded.findPatentStatusNoRenewalNeededsByStatusText_OPS(String statusText_OPS, String sortFieldName, String sortOrder) {
        if (statusText_OPS == null || statusText_OPS.length() == 0) throw new IllegalArgumentException("The statusText_OPS argument is required");
        EntityManager em = PatentStatusNoRenewalNeeded.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PatentStatusNoRenewalNeeded AS o WHERE o.statusText_OPS = :statusText_OPS");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PatentStatusNoRenewalNeeded> q = em.createQuery(queryBuilder.toString(), PatentStatusNoRenewalNeeded.class);
        q.setParameter("statusText_OPS", statusText_OPS);
        return q;
    }
    
}
