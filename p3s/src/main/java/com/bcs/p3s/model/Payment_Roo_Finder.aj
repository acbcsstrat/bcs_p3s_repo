// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Payment;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Payment_Roo_Finder {
    
    public static Long Payment.countFindPaymentsByP3S_TransRef(String P3S_TransRef) {
        if (P3S_TransRef == null || P3S_TransRef.length() == 0) throw new IllegalArgumentException("The P3S_TransRef argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Payment AS o WHERE o.P3S_TransRef = :P3S_TransRef", Long.class);
        q.setParameter("P3S_TransRef", P3S_TransRef);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByP3S_TransRef(String P3S_TransRef) {
        if (P3S_TransRef == null || P3S_TransRef.length() == 0) throw new IllegalArgumentException("The P3S_TransRef argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.P3S_TransRef = :P3S_TransRef", Payment.class);
        q.setParameter("P3S_TransRef", P3S_TransRef);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByP3S_TransRef(String P3S_TransRef, String sortFieldName, String sortOrder) {
        if (P3S_TransRef == null || P3S_TransRef.length() == 0) throw new IllegalArgumentException("The P3S_TransRef argument is required");
        EntityManager em = Payment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Payment AS o WHERE o.P3S_TransRef = :P3S_TransRef");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Payment> q = em.createQuery(queryBuilder.toString(), Payment.class);
        q.setParameter("P3S_TransRef", P3S_TransRef);
        return q;
    }
    
}
