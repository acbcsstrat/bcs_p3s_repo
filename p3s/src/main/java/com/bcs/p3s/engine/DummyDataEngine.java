package com.bcs.p3s.engine;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import com.bcs.p3s.util.random.RandomGenerator;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import com.bcs.p3s.display.NotificationUI;
import com.bcs.p3s.display.PatentUI;
import com.bcs.p3s.enump3s.RenewalStatusEnum;
import com.bcs.p3s.model.Business;
import com.bcs.p3s.model.Notification;
import com.bcs.p3s.model.Patent;
import com.bcs.p3s.security.SecurityUtil;
import com.bcs.p3s.session.PostLoginSessionBean;
import com.bcs.p3s.util.lang.Universal;

/**
 * ALL dummy / Hardcoded data is generated here
 * Why? - This way can ensure, in days/weeks to come, that we have eradicated all dummy Data from the code.
 * 
 * @author andyc
 *
 */
public class DummyDataEngine extends Universal {

//	@Autowired
//	HttpSession session;

	public final String WITHHELD = "NOT PROVIDED";
	
	
	public DummyDataEngine() {
		System.out.println("                     Reminder: Still using DummyDataEngine");
	}
	
	public void populateExtendedPatentFieldsWithDummyData(PatentUI patentUI, Patent patent) {
		//System.out.println("                     DummyDataEngine:populateExtendedPatentFieldsWithDummyData() invoked");
		
		// Those inherited fields NOT required - identify as such
		// by setting safe (where possible) but obviously Dummy, values

		// Now the additional fields
		patentUI.setCurrentRenewalCost(new BigDecimal("1.11"));
		patentUI.setCostBandEndDate(nowPlusNdays(2));
		patentUI.setRenewalCostNextStage(new BigDecimal("1111111.11"));
		patentUI.setRenewalDueDate(dummyFilingDateToThisyearRenewDueDate(patentUI.getFilingDate()));

	}
	

	/**
	 * 1/3 of time return No-Match
	 * Else generate a patent
	 */
	public PatentUI createDummyPatentUiForSearchAddPatent(String patentApplicationNumber) {
		
		log().debug("DummyDataEngine createDummyPatentUiForSearchAddPatent() invoked");
		
		int rnd = random0to99();
		System.out.println("Random is "+rnd);
//////		if (rnd < 34) return null;
		
// acTidy once session is working		
//        if (session==null) logInternalError().fatal("createDummyPatentUiForSearchAddPatent retrieved null session");
//        PostLoginSessionBean pLoginSession = (PostLoginSessionBean) session.getAttribute("postSession");
//        if (pLoginSession==null) logInternalError().fatal("createDummyPatentUiForSearchAddPatent retrieved null session bean");
       //acTidy - update once 'session' is working - see Business below
       
		
		Patent patent = new Patent();
		patent.setPatentApplicationNumber(patentApplicationNumber);
		patent.setTitle("A patent generated by createDummyPatentUiForSearchAddPatent()");
		patent.setFilingDate(nowPlusNdays(-3000));
		patent.setBusiness(SecurityUtil.getMyBusiness()); 
		patent.setPrimaryApplicantName("Tim Berners-Lee");
		patent.setPatentPublicationNumber("123P");
		patent.setRenewalStatus(RenewalStatusEnum.ABANDONED);

		// Create default notifications
		patent.setNotifications(new ArrayList<Notification>());
		List<Notification> allNotifications = Notification.findAllNotifications();
		for (Notification anotification : allNotifications) {
			if (anotification.getDefaultOn()) patent.getNotifications().add(anotification);
		}

		
		
		PatentUI patentUI = new PatentUI(patent);
		
		return patentUI;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// Support methods
	
    // Reminder: Dummy* as this method doesn't make sense for live use.	
	public Date dummyFilingDateToThisyearRenewDueDate(Date fd) {
		Calendar c = Calendar.getInstance();
		int thisyear = c.get(Calendar.YEAR);
		c.setTime(fd);
		c.set(Calendar.YEAR, thisyear);
		//System.out.println("                     MID MID DummyDataEngine:filingDateToFutureRenewDueDate("+fd.toString()+") returns "+c.getTime().toString());
		Date result = this.lastDayofGivenMonth(c);
		//System.out.println("                     DummyDataEngine:dummyFilingDateToThisyearRenewDueDate("+fd.toString()+") returns "+result.toString());
		return result;
	}

	public Date lastDayofGivenMonth(Calendar c) {
		c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));    
		return c.getTime();
	}

//	public Date OBS_lastDayofThisMonth() {
//		Calendar c = Calendar.getInstance();    
//		c.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));    
//		return c.getTime();
//	}

	public Date nowPlusNdays(int n) {
		Calendar c = Calendar.getInstance();    
		c.add(Calendar.DATE, n);

		DateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("                     DummyDataEngine:nowPlusNdays("+n+") returns "+dateFormat.format(c.getTime()));
		return c.getTime();
	}
	
//	protected int random0to99() {
//		int maximum = 99;
//		int minimum = 0;
//		Random rn = new Random();
//		int n = maximum - minimum + 1;
//		int i = rn.nextInt() % n;
//		int randomNum =  minimum + i;
//		return randomNum;
//	}
	protected int random0to99() {
		Random rn = new Random();
		int randomNum = rn.nextInt(99);
		System.out.println("                     DummyDataEngine:random0to99(ac) returns "+randomNum);
		return randomNum;
	}
	
	
public Business generatePinNumber(Business business){
		
		//business pin can be a 4 digit random generated number
		int ranNumber = 0;
		do{
			RandomGenerator rand = new RandomGenerator((int) System.currentTimeMillis());
			ranNumber = rand.nextInt(1000,9999);
		}while(ranNumber <= 1000 || ranNumber > 9999);
		
		business.setBusinessPin(ranNumber);
		
		
		//business Number can be a combination of first 2 letters of bus Name and random 2 digit number(eg, Box Clever Software --> BOX23)
		ranNumber = 0;
		String bName1 = business.getBusinessName().replace(" ", "");
		String bName2 = bName1.substring(0, 2);
		do{
			RandomGenerator rand = new RandomGenerator((int) System.currentTimeMillis());
			ranNumber = rand.nextInt(22,99);
		}while(ranNumber < 22 || ranNumber > 99);
		
		business.setBusinessNumber(bName2+ranNumber);
		
		return business;
		
	}

}
