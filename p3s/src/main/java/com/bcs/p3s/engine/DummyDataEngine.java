package com.bcs.p3s.engine;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;

import com.bcs.p3s.util.random.RandomGenerator;
import com.bcs.p3s.wrap.BankTransferPaymentDetails;

import com.bcs.p3s.display.FxRateUI;
import com.bcs.p3s.display.PatentUI;
import com.bcs.p3s.engine.dummyclasses.Api4dotXdataFromGETworkaround;
import com.bcs.p3s.enump3s.RenewalStatusEnum;
import com.bcs.p3s.model.Business;
import com.bcs.p3s.model.Notification;
import com.bcs.p3s.model.Patent;
import com.bcs.p3s.security.SecurityUtil;
import com.bcs.p3s.service.PatentService;
import com.bcs.p3s.service.PatentServiceImpl;
import com.bcs.p3s.session.PostLoginSessionBean;
import com.bcs.p3s.util.lang.P3SRuntimeException;
import com.bcs.p3s.util.lang.Universal;

/**
 * ALL dummy / Hardcoded data is generated here
 * Why? - This way can ensure, in days/weeks to come, that we have eradicated all dummy Data from the code.
 * 
 * @author andyc
 *
 */
public class DummyDataEngine extends Universal {

	

	public final String WITHHELD = "NOT PROVIDED";
	
	
	public DummyDataEngine() {
		System.out.println("                     Reminder: Still using DummyDataEngine");
	}
	
	public void populateExtendedPatentFieldsWithDummyData(PatentUI patentUI, Patent patent) {

		log().debug("DummyDataEngine populateExtendedPatentFieldsWithDummyData() invoked");

		//System.out.println("                     DummyDataEngine:populateExtendedPatentFieldsWithDummyData() invoked");
		
		// Those inherited fields NOT required - identify as such
		// by setting safe (where possible) but obviously Dummy, values

		// Now the additional fields
		patentUI.setCurrentRenewalCost(new BigDecimal("1.11"));
		patentUI.setCostBandEndDate(nowPlusNdays(2));
		patentUI.setRenewalCostNextStage(new BigDecimal("1111111.11"));
		patentUI.setRenewalDueDate(dummyFilingDateToThisyearRenewDueDate(patentUI.getFilingDate()));

	}
	

	/**
	 * One third of time return No-Match
	 * Else generate a patent
	 */
	//This mimics the epo engine
	public Patent createDummyPatentForSearchAddPatent(String patentApplicationNumber, PostLoginSessionBean pSession) {
		
		log().debug("DummyDataEngine createDummyPatentUiForSearchAddPatent() invoked");
		
		int rnd = random0to99();
		System.out.println("Random is "+rnd);
//////		if (rnd < 34) return null;
		
// acTidy once session is working		
//        if (session==null) logInternalError().fatal("createDummyPatentUiForSearchAddPatent retrieved null session");
//        PostLoginSessionBean pLoginSession = (PostLoginSessionBean) session.getAttribute("postSession");
//        if (pLoginSession==null) logInternalError().fatal("createDummyPatentUiForSearchAddPatent retrieved null session bean");
       //acTidy - update once 'session' is working - see Business below
       //epo dummy engine
		
		Patent patent = new Patent();
		patent.setPatentApplicationNumber(patentApplicationNumber);
		patent.setTitle("A patent generated by createDummyPatentUiForSearchAddPatent()");
		patent.setFilingDate(nowPlusNdays(-1695));
		patent.setBusiness(SecurityUtil.getMyBusiness()); 
		patent.setPrimaryApplicantName("Tim Berners-Lee");
		patent.setPatentPublicationNumber("123P");
		patent.setLastRenewedDateExEpo(nowPlusNdays(-660));
		patent.setRenewalYear(4);
		patent.setEpoPatentStatus("EXAMINATION REQUESTED");
		/**
		 * CALL TO PatentStatusEngine PROCESSING ENGINE
		 * CALCULATES THE RENEWAL YEAR AND RENEWAL STATUS FOR THE NEWLY ADDED PATENT
		 */
		//patent.setRenewalStatus(RenewalStatusEnum.RENEWAL_IN_PLACE);
		PatentStatus renewalInfo = new PatentStatus();
		renewalInfo = new PatentStatusEngine().getRenewalInfo(patent);

		patent.setRenewalStatus(renewalInfo.getCurrentRenewalStatus());
		patent.setRenewalYear(renewalInfo.getThisYearNumber());
		
		
		
		// Create default notifications
		patent.setNotifications(new ArrayList<Notification>());
		List<Notification> allNotifications = Notification.findAllNotifications();
		for (Notification anotification : allNotifications) {
			if (anotification.getDefaultOn()) patent.getNotifications().add(anotification);
		}

		//PatentUI patentUI = new PatentUI(patent);
		//System.out.println(postSession.getExtendedPatentUI());
				
		return patent;
	}
	
	
	public List<FxRateUI> makeDummyFxRateHistory(BigDecimal seedRate, Date endsBefore, int numdays) { 
		// Ends before is Todays timestamp. So generated list should stop 1 day before this
		
		final long DAY = 24 * 60 * 60 * 1000;
		
		log().debug("DummyDataEngine makeDummyFxRateHistory() invoked");

		List<FxRateUI> history = new ArrayList<FxRateUI>();

		// Generate dummy history
		BigDecimal inc = new BigDecimal(0.01); 
		BigDecimal gik = seedRate;
		BigDecimal formatted = null;
		long disTime = endsBefore.getTime();

		for (int ii = 1 ; ii <= numdays ; ii++) {

	    	gik = gik.add(inc);
	    	formatted = gik;
	    	formatted = formatted.setScale(4, BigDecimal.ROUND_CEILING);
	    	//System.out.println("formatted loop = "+formatted.toString());
	    	
	    	disTime -= DAY;
	    	Date dDay = new Date(disTime);
	    	FxRateUI dis = new FxRateUI(formatted, dDay);
	    	history.add(dis);
	    }

	    
	    // Now reverse the list order, to make it oldest-first
	    List<FxRateUI> shallowCopy = history.subList(0, history.size());
	    Collections.reverse(shallowCopy);
		
		return shallowCopy;
	}

	
	public BigDecimal inventTotalBasketCost(List<Long> patentIds) {
		BigDecimal inventedRubbish = new BigDecimal(1234.56);
		int numbeOfPatents = patentIds.size();
		BigDecimal multiplicity = new BigDecimal(numbeOfPatents);
		return inventedRubbish.multiply(multiplicity);
	}

//	public BigDecimal inventExpectedCost() {
//		BigDecimal inventedRubbish = new BigDecimal(808.08);
//		return inventedRubbish;
//	}

	public String generatep3sTransRef() {
		return "CQ 465 735 QC";
	}
		
	public BankTransferPaymentDetails generateBankTransferPaymentDetails() {
		BankTransferPaymentDetails ikk = new BankTransferPaymentDetails();
		ikk.setAccountNumber("12345678");
		ikk.setItem1("This is Item 1");
		ikk.setItem2("This IS item 2");
		ikk.setItem3("ThIS is item 3");
		return ikk;
	}

	public String gimmeAnyInvoiceUrl() {
		return "hardcodedpdffolder/invoices/dummyInvoiceNumber1.pdf";
	}
	
	public String gimmeEmptyPostPayWarningMessage() {
		return "Nut'n gone wrong yet ...";
	}
	
//	public String genericDummyBillingAddressLine() {
//		return "strDummy BillingAddress line ";
//	}
//	public Long genericDummyBillingAddressZip() { return 11111L; }
	
	// api 4.1
	public Api4dotXdataFromGETworkaround getApi41data(String raw) {
		Api4dotXdataFromGETworkaround result = new Api4dotXdataFromGETworkaround();
		
		ExtractSubmittedDataEngine extractor = new ExtractSubmittedDataEngine();
		List<Long> patentsInBasket = extractor.commaSeparatedListOfIntegerNumbersStrToListLongs(raw);
		result.patentIds = patentsInBasket;
		
		return result;
	}
	// api 4.2
	public Api4dotXdataFromGETworkaround getApi42data(String raw) {
		Api4dotXdataFromGETworkaround result = new Api4dotXdataFromGETworkaround();
		
		String[] elements = raw.split(":",-1); 
		String elly;
		
		System.out.println("   First Element is : elements[0] = "+elements[0]);
		ExtractSubmittedDataEngine extractor = new ExtractSubmittedDataEngine();
		List<Long> patentsInBasket = extractor.commaSeparatedListOfIntegerNumbersStrToListLongs(elements[0]);
		result.patentIds = patentsInBasket;

		elly = caratToDotConvertor(elements[1]);
		System.out.println("   Second Element is : elements[1] = "+elly);
		result.expectedCost = new BigDecimal(elly);
		
		return result;
	}
	// api 4.3
	public Api4dotXdataFromGETworkaround getApi43data(String raw) {
		Api4dotXdataFromGETworkaround result = new Api4dotXdataFromGETworkaround();
		
		String[] elements = raw.split(":",-1); 
		String elly;
		
		System.out.println("   First Element is : elements[0] = "+elements[0]);
		ExtractSubmittedDataEngine extractor = new ExtractSubmittedDataEngine();
		List<Long> patentsInBasket = extractor.commaSeparatedListOfIntegerNumbersStrToListLongs(elements[0]);
		result.patentIds = patentsInBasket;

		elly = caratToDotConvertor(elements[1]);
		System.out.println("   Second Element is : elements[1] = "+elly);
		result.expectedCost = new BigDecimal(elly);

		System.out.println("   Third Element is : elements[2] = "+elements[2]);
		result.billingAddressStreet = elements[2];
		result.billingAddressCity = elements[3];
		result.billingAddressState = elements[4];
		result.billingAddressZip = new Long(elements[5]);

		return result;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// Support methods
	
    // Reminder: Dummy* as this method doesn't make sense for live use.	
	public Date dummyFilingDateToThisyearRenewDueDate(Date fd) {
		Calendar c = Calendar.getInstance();
		int thisyear = c.get(Calendar.YEAR);
		c.setTime(fd);
		c.set(Calendar.YEAR, thisyear);
		//System.out.println("                     MID MID DummyDataEngine:filingDateToFutureRenewDueDate("+fd.toString()+") returns "+c.getTime().toString());
		Date result = this.lastDayofGivenMonth(c);
		//System.out.println("                     DummyDataEngine:dummyFilingDateToThisyearRenewDueDate("+fd.toString()+") returns "+result.toString());
		return result;
	}

	public Date lastDayofGivenMonth(Calendar c) {
		c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));    
		return c.getTime();
	}

//	public Date OBS_lastDayofThisMonth() {
//		Calendar c = Calendar.getInstance();    
//		c.set(Calendar.DAY_OF_MONTH, Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH));    
//		return c.getTime();
//	}

	public Date nowPlusNdays(int n) {
		Calendar c = Calendar.getInstance();    
		c.add(Calendar.DATE, n);

		DateFormat dateFormat= new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("                     DummyDataEngine:nowPlusNdays("+n+") returns "+dateFormat.format(c.getTime()));
		return c.getTime();
	}
	
//	protected int random0to99() {
//		int maximum = 99;
//		int minimum = 0;
//		Random rn = new Random();
//		int n = maximum - minimum + 1;
//		int i = rn.nextInt() % n;
//		int randomNum =  minimum + i;
//		return randomNum;
//	}
	protected int random0to99() {
		Random rn = new Random();
		int randomNum = rn.nextInt(99);
		System.out.println("                     DummyDataEngine:random0to99(ac) returns "+randomNum);
		return randomNum;
	}
	
	
public Business generatePinNumber(Business business){
		
		//business pin can be a 4 digit random generated number
		int ranNumber = 0;
		do{
			RandomGenerator rand = new RandomGenerator((int) System.currentTimeMillis());
			ranNumber = rand.nextInt(1000,9999);
		}while(ranNumber <= 1000 || ranNumber > 9999);
		business.setBusinessPin(ranNumber);
		
		
		//business Number can be a combination of first 2 letters of bus Name and random 2 digit number(eg, Box Clever Software --> BOX23)
		ranNumber = 0;
		String bName1 = business.getBusinessName().replace(" ", "");
		String bName2 = bName1.substring(0, 2);
		do{
			RandomGenerator rand = new RandomGenerator((int) System.currentTimeMillis());
			ranNumber = rand.nextInt(22,99);
		}while(ranNumber < 22 || ranNumber > 99);
		
		business.setBusinessNumber(bName2+ranNumber);
		
		return business;
		
	}

	/**
	 * Seems cannot have a DOT in a url?
	 * leasways, split, extracting on colon, turns 808.08 into 808.
	 * Workaround. replace dot with carat. This replaces any carats with dots 
	 */
	String caratToDotConvertor(String raw) {
		return raw.replace('^','.');
	}






//Start of TEMPORARY code - expect to be redundant after development complete 

	
	
public List<Long> gimmeTwoLongs() {
	List<Long> result = new ArrayList<Long>();
	result.add(new Long(1));
	result.add(new Long(2));
	return result;
}

public Date add48hours(Date start) {
	Calendar calendar = Calendar.getInstance();
	calendar.setTime(start);
	calendar.add(Calendar.HOUR, 48);
	return calendar.getTime();
}

	
//End of TEMPORARY code - expect to be redundant after development complete 


}
