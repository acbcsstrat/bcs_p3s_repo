(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./node_modules/empty-module sync js$":function(t,e,r){var n={"./index.js":"./node_modules/empty-module/index.js"};function a(t){var e=o(t);return r(e)}function o(t){if(!r.o(n,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return n[t]}a.keys=function(){return Object.keys(n)},a.resolve=o,t.exports=a,a.id="./node_modules/empty-module sync js$"},"./src/js/app.js":function(t,e,r){"use strict";r.r(e);r("./node_modules/babel-polyfill/lib/index.js");var n=r("./node_modules/jquery/dist/jquery.js"),a=r.n(n),o=(r("./node_modules/jquery/dist/jquery.min.js"),r("./node_modules/angular/angular.min.js"),r("./node_modules/angular-cookies/angular-cookies.min.js"),r("./node_modules/angular-animate/angular-animate.min.js"),r("./node_modules/angular-sanitize/angular-sanitize.js"),r("./node_modules/angular-aria/angular-aria.min.js"),r("./node_modules/angular-material/angular-material.min.js"),r("./node_modules/angular-touch/angular-touch.min.js"),r("./node_modules/angular-local-storage/dist/angular-local-storage.min.js"),r("./node_modules/tether/dist/js/tether.min.js"),r("./node_modules/bootstrap/dist/js/bootstrap.min.js"),r("./node_modules/angular-ui-bootstrap/dist/ui-bootstrap-tpls.js"),r("./node_modules/popper.js/dist/popper.min.js"),r("./node_modules/moment/min/moment.min.js"),r("./node_modules/moment-timezone/builds/moment-timezone.min.js"),r("./node_modules/moment-timezone/builds/moment-timezone-with-data-2012-2022.min.js"),r("./node_modules/d3/d3.min.js"),r("./node_modules/nvd3/build/nv.d3.min.js"),r("./node_modules/angular-nvd3/dist/angular-nvd3.min.js"),r("./node_modules/angular/index.js")),s=r.n(o),l=r("./node_modules/angular-ui-router/lib-esm/index.js"),i=(r("./node_modules/ng-idle/angular-idle.min.js"),r("./node_modules/angular-moment/angular-moment.js"),r("./node_modules/angular-nvd3/index.js"),r("./node_modules/angular-croppie/angular-croppie.js"),angular.module("ppApp.routes",[]).config(c).name);function c(t,e){e.when("","/dashboard").when("/","/dashboard").otherwise("/dashboard"),t.state("dashboard",{url:"/dashboard",resolve:{patentIds:["patentsRestService","$q","$timeout",function(t,e,r){return t.fetchAllPatents()}],fxRatesMonth:["fxService",function(t){return t.fetchFxMonth()}]},views:{"@":{templateUrl:"app/templates/dashboard/dashboard.tpl.htm",controller:"dashboardCtrl",controllerAs:"$ctrl"},"graphdonutwidget@dashboard":{controller:"graphDonutCtrl",controllerAs:"$ctrl",templateUrl:"app/templates/dashboard/dashboard.graph-donut-widget.tpl.htm"},"actionsavailable@dashboard":{templateUrl:"app/templates/dashboard/dashboard.actions-available.tpl.htm",controller:"renewalsCarouselCtrl",controllerAs:"$ctrl"},"actioncost@dashboard":{templateUrl:"app/templates/dashboard/dashboard.action-cost.tpl.htm",controller:"renewalCostCtrl",controllerAs:"$ctrl"},"actioncostmd@dashboard":{templateUrl:"app/templates/dashboard/dashboard.action-cost.tpl.htm",controller:"renewalCostCtrl",controllerAs:"$ctrl"},"fxchartwidget@dashboard":{templateUrl:"app/templates/dashboard/dashboard.fxchart-widget.tpl.htm",controller:"dbfxChartCtrl",controllerAs:"$ctrl"},"recentactivitywidget@dashboard":{templateUrl:"app/templates/dashboard/dashboard.recent-activity-widget.tpl.htm",controller:"recentActivityCtrl",controllerAs:"$ctrl"}}}).state("profile",{url:"/profile",templateUrl:"app/templates/user/user.user-profile.tpl.htm",controller:"userProfileCtrl",controllerAs:"$ctrl"}).state("portfolio",{url:"/portfolio",templateUrl:"app/templates/portfolio/portfolio.tpl.htm",controller:"portfolioCtrl",controllerAs:"$ctrl",resolve:{patents:["patentsRestService",function(t){return t.fetchAllPatents()}]},params:{navigation:"portfolio"}}).state("portfolio.patent",{url:"/:patentId",resolve:{patent:["patents","$stateParams","patentsRestService",function(t,e,r){var n=t.find((function(t){return t.patentID==e.patentId}));return r.fetchPatentItem(n.patentID)}],ca:["costAnalysisService","$stateParams","patent",function(t,e,r){return t.fetchCa(r.patentID,r.p3sServicesWithFees)}]},params:{patentId:null,prepareGrant:null,form1200generate:null},views:{"":{controller:"caseOverviewCtrl",controllerAs:"$ctrl",templateUrl:"app/templates/patent/case-overview.tpl.htm"},"details@portfolio.patent":{templateUrl:"app/templates/patent/patent-details.tpl.htm",controller:"patentDetailsCtrl",controllerAs:"$ctrl"},"notifications@portfolio.patent":{templateUrl:"app/templates/notifications/notifications.tpl.htm",controller:"notificationsCtrl",controllerAs:"$ctrl"},"form1200@portfolio.patent":{templateUrl:"app/templates/europct/europct.form1200.tpl.htm",controller:"form1200Ctrl",controllerAs:"$ctrl"},"renewalhistory@portfolio.patent":{templateUrl:"app/templates/renewal/renewal.history.tpl.htm",controller:"renewalHistoryCtrl",controllerAs:"$ctrl"},"grantandpublishing@portfolio.patent":{templateUrl:"app/templates/grant/grant.tpl.htm",controller:"grantCtrl",controllerAs:"$ctrl"},"fee-breakdown@portfolio.patent":{templateUrl:"app/templates/fee-breakdown/fee-breakdown.tpl.htm",controller:"feeBreakDownCtrl",controllerAs:"$ctrl"},"fxchart@portfolio.patent":{templateUrl:"app/templates/fxchart/fxchart.tpl.htm",controller:"fxChartCtrl",controllerAs:"$ctrl"},"costchart@portfolio.patent":{templateUrl:"app/templates/costchart/costchart.tpl.htm",controller:"costChartCtrl",controllerAs:"$ctrl"}}}).state("search-patent",{url:"/search-patent",templateUrl:"app/templates/add-patent/patents.search-patent.tpl.htm",controller:"searchPatentCtrl",controllerAs:"$ctrl",params:{navigation:"portfolio"}}).state("search-patent.add-patent",{url:"?params",templateUrl:"app/templates/add-patent/patents.add-patent.tpl.htm",controller:"addPatentCtrl",controllerAs:"$ctrl",params:{patent:null}}).state("current-transactions",{url:"/current-transactions",templateUrl:"app/templates/transactions/transactions.current-transactions.tpl.htm",controller:"currentTransactionsCtrl",controllerAs:"$ctrl",resolve:{currentTransactions:["currentTransactionsService",function(t){return t.fetchCurrentTransactions()}]},params:{navigation:"transactionnav"}}).state("current-transactions.current-transaction-item",{url:"/{transId}/:transHref",templateUrl:"app/templates/transactions/transactions.current-transaction-item.tpl.htm",controller:"currentTransactionItemCtrl",controllerAs:"$ctrl",resolve:{currentTransactionItem:["currentTransactions","$stateParams",function(t,e){return t.find((function(t){return t.id==e.transId}))}]},params:{transHref:null}}).state("transaction-history",{url:"/transaction-history",templateUrl:"app/templates/transactions/transactions.transaction-history.tpl.htm",controller:"transactionHistoryCtrl",controllerAs:"$ctrl",resolve:{transactionHistory:["transactionHistoryService",function(t){return t.fetchTransactionHistory()}]},params:{navigation:"transactionnav"}}).state("transaction-history.transaction-history-item",{url:"/{transHistoryId}",templateUrl:"app/templates/transactions/transactions.transaction-history-item.tpl.htm",controller:"transactionHistoryItemCtrl",controllerAs:"$ctrl",resolve:{transactionHistoryItem:["transactionHistory","$stateParams",function(t,e){return t.find((function(t){return t.id==e.transHistoryId}))}]}}).state("basket",{url:"/basket",templateUrl:"app/templates/checkout/checkout.basket.tpl.htm",controller:"basketCtrl",controllerAs:"$ctrl"}).state("bank-transfer-preparation",{url:"/bank-transfer-preparation",templateUrl:"app/templates/checkout/checkout.bank-transfer-preparation.tpl.htm",controller:"bankTransferPrepCtrl",controllerAs:"$ctrl",params:{orderObj:null}}).state("bank-transfer-success",{url:"/bank-transfer-success",templateUrl:"app/templates/checkout/checkout.bank-transfer-success.tpl.htm",controller:"bankTransferSuccessCtrl",controllerAs:"$ctrl",params:{orderObj:null}})}function p(t,e,r,n,a,o,s){t.defaults.headers.get||(t.defaults.headers.get={}),window.ppdomain="http://localhost:8081/p3sweb/",t.defaults.headers.get["If-Modified-Since"]="Mon, 26 Jul 1997 05:00:00 GMT",o.idle(500),o.timeout(30),a.http(ppdomain+"keep-session-alive/"),a.interval(20),n.errorOnUnhandledRejections(!1),s.setStorageType("sessionStorage").setDefaultToCookie(!1).setNotify(!0,!0)}c.$inject=["$stateProvider","$urlRouterProvider"],p.$inject=["$httpProvider","$uibModalProvider","$compileProvider","$qProvider","KeepaliveProvider","IdleProvider","localStorageServiceProvider"];var u=s.a.module("services.user-service",[]).factory("userService",d).name;function d(t,e){var r,n=ppdomain+"rest-user/";return{fetchUser:function(){var r=e.defer();return t.get(n).then((function(t){r.resolve(t.data)}),(function(t){console.error("Error while fetching user"),r.reject(t)})),r.promise},updateUser:function(a){var o=e.defer();return t.put(n,a,r).then((function(t){o.resolve(t.data)}),(function(t){o.reject(t)})),o.promise},listUsers:function(){var r=e.defer();return t.get(ppdomain+"rest-users/").then((function(t){r.resolve(t.data)}),(function(t){r.reject(t)})),r.promise}}}d.$inject=["$http","$q"];var m=angular.module("services.fx-service",[]).factory("fxService",f).name;function f(t,e){return{fetchFxWeek:function(){var r=t.defer();return e.get(ppdomain+"rest-fxrates/week").then((function(t){r.resolve(t.data)}),(function(t){r.reject(t.data)})),r.promise},fetchFxMonth:function(){var r=t.defer();return e.get(ppdomain+"rest-fxrates/month").then((function(t){r.resolve(t.data)}),(function(t){r.reject(t.data)})),r.promise},fetchFx:function(){var r=t.defer();return e.get(ppdomain+"rest-fxrate/").then((function(t){r.resolve(t.data)}),(function(t){r.reject(t.data)})),r.promise}}}f.$inject=["$q","$http"];var h=angular.module("services.core-service",[m]).factory("coreService",g).name;function g(t,e,r,n){var a=ppdomain+"partner-details/",o={getMessages:function(){var e=t.defer();return n.get(ppdomain+"login-messages/").then((function(t){e.resolve(t.data)}),(function(t){console.error("Error while fetching messages"),e.reject(t)})),e.promise},supressMessages:function(e){var r=t.defer();return n.post(ppdomain+"suppress-login-messages/",e).then((function(t){r.resolve(t)}),(function(t){r.reject(t)})),r.promise},ppContact:function(){var e=t.defer();return n.get(a).then((function(t){e.resolve(t.data)}),(function(t){e.resolve(t)})),e.promise},openAppGuide:function(){return o.appGuideOpen=!o.appGuideOpen},appGuideOpen:!1};return o}g.$inject=["$q","$timeout","fxService","$http"];var v=angular.module("services.organise-colour-service",[]).factory("organiseColourService",b).name;function b(t,e){return{getNextColour:function(t,e){var r;if("bg"===e)switch(t){case"Green":r="bg-phase-amber";break;case"Amber":r="bg-phase-red";break;case"Red":r="bg-phase-blue";break;case"Blue":r="bg-phase-black";break;case"Black":r="bg-white"}return r},getCurrColour:function(t,e){var r;if("text"===e)switch(t){case"Green":r="txt-phase-green";break;case"Amber":r="txt-phase-amber";break;case"Red":r="txt-phase-red";break;case"Blue":r="txt-phase-blue";break;case"Black":r="txt-phase-black"}if("bg"===e)switch(t){case"Green":r="bg-phase-green";break;case"Amber":r="bg-phase-amber";break;case"Red":r="bg-phase-red";break;case"Blue":r="bg-phase-blue";break;case"Black":r="bg-phase-black"}return r}}}b.$inject=["$http","$q"];var $=angular.module("services.patents-rest-service",[v]).factory("patentsRestService",C).name;function C(t,e,r){var n=ppdomain+"rest-patents/";return{fetchAllPatents:function(){var n=e.defer();return t.get(ppdomain+"rest-patents-portfolio/").then((function(t){t.data.map((function(t){return t.p3sServices.map((function(t){return t.currentStageColour&&(t.cssCurrent=r.getCurrColour(t.currentStageColour,"text")),t.nextStageColour&&(t.cssNext=r.getCurrColour(t.nextStageColour,"text")),t}))})),n.resolve(t.data)}),(function(t){console.error("Error while fetching patentssss"),n.reject(t)})),n.promise},updatePatent:function(r,a){var o=e.defer();return t.put(n+a,r).then((function(t){o.resolve(t.data)}),(function(t){o.reject(t)})),o.promise},savePatent:function(r){var n=e.defer();return t.post(ppdomain+"rest-patents/",r).then((function(t){n.resolve(t.data)}),(function(t){n.reject(t)})),n.promise},deletePatent:function(r){var a=e.defer();return t.delete(n+r).then((function(t){a.resolve(t.data)}),(function(t){a.reject(t)})),a.promise},fetchPatentItem:function(n){var a=e.defer();return t.get(ppdomain+"rest-patent/"+n).then((function(t){t.data.p3sServicesWithFees.map((function(t){return t.currentStageColour&&(t.cssCurrent=r.getCurrColour(t.currentStageColour,"text")),t.nextStageColour&&(t.cssNext=r.getCurrColour(t.nextStageColour,"text")),t})),a.resolve(t.data)}),(function(t){console.error("Error while fetching patents"),a.reject(t)})),a.promise}}}C.$inject=["$http","$q","organiseColourService"];var j=angular.module("ppApp.core",[h,$]).controller("coreCtrl",w).name;function w(t,e,r,n,a,o,s,l,i,c,p,u){function d(){e.warning&&(e.warning.close(),e.warning=null),e.timedout&&(e.timedout.close(),e.timedout=null)}e.$on("IdleStart",(function(){d(),e.warning=t.open({templateUrl:"app/templates/modals/modal.idle.tpl.htm",windowClass:"modal-danger",appendTo:void 0})})),e.$on("IdleEnd",(function(){d()})),e.$on("IdleTimeout",(function(){d(),c.empty(),i.post("http://localhost:8080/p3sweb/resources/j_spring_security_logout").then((function(t){window.location.reload("http://localhost:8080/p3sweb/login")}),(function(t){console.log(t)}))})),e.$on("appGuideOpen",(function(){t.open({templateUrl:"app/templates/app/app.in-app-guide.tpl.htm",windowClass:"app-guide-panel",controllerAs:"$ctrl",controller:["$uibModalInstance",function(t){this.slides=[{index:0,title:"Color Phase"},{index:1,title:"Portfolio"},{index:2,title:"Case overview"},{index:3,title:"Add Patent"},{index:4,title:"Form 1200"}],this.slides2=[{index:4,title:"Form 1200"},{index:5,title:"Fees"},{index:6,title:"Checkout"},{index:7,title:"Transactions"},{index:8,title:"Nav"}],this.dismissWelcomeModal=function(){t.close()}}]})}))}function k(t,e,r,n){t.watch()}w.$inject=["$uibModal","$scope","coreService","localStorageService","$timeout","patentsRestService","Idle","Keepalive","$http","ngCart","organiseColourService","$cookies"],window.jQuery=a.a,window.$=a.a,s.a.module("ppApp",["ui.router","ngIdle","ngAnimate","ui.bootstrap","ngCart","ngMaterial","ngTouch","angularMoment","LocalStorageModule","nvd3","ngCookies","angularCroppie","ngSanitize",l.a,u,i,j]).config(p),s.a.module("ppApp").run(k),k.$inject=["Idle","userService","$rootScope","$timeout"]}},[["./src/js/app.js",0,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,