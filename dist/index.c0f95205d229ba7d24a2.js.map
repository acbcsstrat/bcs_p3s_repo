{"version":3,"sources":["webpack:///./app/features/case/services/case.form1200.serv.js","webpack:///./app/features/case/services/case.grant.serv.js","webpack:///./app/features/case/services/case.reminders.serv.js","webpack:///./app/features/case/services/case.renewal.serv.js","webpack:///./app/features/case/services/case.validation.serv.js","webpack:///./app/global/services/app.activeTab.serv.js","webpack:///./app/global/services/app.chunkData.serv.js","webpack:///./app/features/case/controllers/case.overview.controller.js","webpack:///./app/features/case/controllers/case.costchart.controller.js","webpack:///./app/features/case/controllers/case.details.controller.js","webpack:///./app/features/case/controllers/case.form1200-generated.controller.js","webpack:///./app/features/case/controllers/case.form1200-ready.controller.js","webpack:///./app/features/case/controllers/case.fxchart.controller.js","webpack:///./app/features/case/controllers/case.grant.controller.js","webpack:///./app/features/case/controllers/case.reminders.controller.js","webpack:///./app/features/case/controllers/case.renewal-history.controller.js","webpack:///./app/features/case/controllers/case.validation.controller.js","webpack:///./app/features/case/controllers/case.fee-breakdown.controller.js","webpack:///./app/features/case/index.js","webpack:///./app/features/checkout/services/checkout.bank-transfer-commit.serv.js","webpack:///./app/features/checkout/services/checkout.basket.serv.js","webpack:///./app/features/checkout/controllers/checkout.basket.controller.js","webpack:///./app/features/checkout/controllers/checkout.bank-transfer-prep.controller.js","webpack:///./app/features/checkout/controllers/checkout.bank-transfer-success.controller.js","webpack:///./app/features/checkout/index.js","webpack:///./app/features/forgot-password/controllers/forgot-password.controller.js","webpack:///./app/features/forgot-password/controllers/reset-password.controller.js","webpack:///./app/features/forgot-password/index.js","webpack:///./app/features/login/controllers/login.controller.js","webpack:///./app/features/portfolio/controllers/portfolio.controller.js","webpack:///./app/features/portfolio/services/portfolio.search-patent.serv.js","webpack:///./app/features/portfolio/index.js","webpack:///./app/features/profile/services/profile.upload-avatar.serv.js","webpack:///./app/features/profile/controllers/profile.controller.js","webpack:///./app/features/profile/index.js","webpack:///./app/features/transactions/controllers/transactions.controller.js","webpack:///./app/features/transactions/controllers/transaction-item.controller.js","webpack:///./app/features/transactions/controllers/transaction-item.details.controller.js","webpack:///./app/features/transactions/index.js","webpack:///./assets/imgs/app-images/008-payable.jpg","webpack:///./assets/imgs/app-images/016-total-payable.jpg"],"names":["case_form1200_serv","angular","module","service","Form1200Service","$http","$q","Upload","factory","fetchQuestions","id","deferred","defer","get","ppdomain","then","response","resolve","data","errResponse","console","error","reject","promise","submitForm1200","config","post","setQuestions","questions","getQuestions","inhibitForm1200","reason","params","patent_id","failure_reason","generateForm1200","deleteApplication","delete","editApplication","put","updateNotifications","list","$inject","case_grant_serv","GrantService","$timeout","submitGrant","inhibitGrant","unhibitGrant","deleteGrant","representativeCheck","case_reminders_serv","RemindersService","url","case_renewal_serv","RenewalHistoryService","fetchHistory","case_validation_serv","ValidationService","fetchDesignatedStates","deleteQuote","requestQuote","formData","fetchPreparedQuote","submitPoas","upload","patentID","stateCode","signedPoaDoc","arrayKey","poaUploadSuccessNotify","poaUploadFailNotify","app_activeTab_serv","ActiveTabService","setTab","index","getTab","app_chunkData_serv","chunkData","arr","size","newArr","i","length","push","slice","CaseOverviewController","caseSelected","$scope","$state","$stateParams","CasesRestService","$uibModal","$mdDialog","ngCart","chartTimeout","vm","this","deletePatent","patent","actionIds","p3sServicesWithFees","map","r","actionID","cartItems","getItems","parseInt","_id","found","find","indexOf","removeItemById","go","reload","status","open","template","__webpack_require__","appendTo","undefined","controllerAs","controller","$uibModalInstance","dismissModal","close","deletePatentError","confirmDeletePatent","cancelDeletion","dismiss","refreshChart","evt","document","createEvent","initUIEvent","window","dispatchEvent","portfolioLoaded","tab","caseoverview_tab","checkAvailableAction","services","actionsAvailable","some","item","saleType","serviceStatus","processView","chart","validationNotification","notInProgress","activeLeft","openMenu","$mdMenu","ev","showOptions","closeCaseoverview","renewalHistory","form1200generate","prepareGrant","validationQuote","phoneNumber","ppDetails","partnerPhone","displayRenewalHistoryTab","serviceType","noReminders","every","availableServices","filter","o","k","action","type","urgent","isUrgentAttention","forEach","obj","displayForm1200Tab","displayGrantTab","displayValidationTab","$on","cancel","CostChartController","ca","costTimeout","setData","barChartData","info","barOptions","barColor","barChartArr","label","barData","tip","hasOwnProperty","includes","y","x","reverse","key","values","$parent","availableAction","selectedAction","tooltip","hideDelay","contentGenerator","d","height","showControls","showValues","showLegend","stacked","duration","margin","left","right","multibar","groupSpacing","xAxis","axisLabel","tickFormat","d3","time","format","Date","axisLabelDistance","showMaxMin","rotateYLabel","orient","css","transform","yAxis","CaseDetailsController","updatePatent","updatePatentSuccess","Form1200GeneratedController","confirmDeleteApplication","confirm","deleteApplicationReq","timeout","deleteApplicationSuccess","deleteApplicationError","Form1200ReadyController","$compile","initiateForm1200","extensionStatesUI","validationStatesUI","clientRef","showOptionalQuestion","additionalDocuments","isYear3RenewalDue","form1200Template","templates","name","questionsParam","cancel1200","ok","chkValidStates","chkExtStates","checkError","question","value","message","title","innerHTML","submitForm1200Data","formDataSubmitted","uploadRequired","property","transformRequest","identity","excessobject","excessdocs","yes","append","JSON","stringify","totalClaims","validate","amendments","numAdditionalCopies","amended","amendedDoc","isYear3RenewalPaying","excessclaims","no","proceedMsgAmend","caseId","excessClaimsCheck","excessClaimsDue","notPayingExcess","amendmentsMade","amendedOptions","uploadAmended","displayAmendedUpload","test","epctStage","FxChartController","fxTimeout","lineChart","lineDataArr","fxChartData","dayData","currentOfficialFeeUSD","str","split","shift","date","getTime","lineData","lineOptions","top","bottom","clipEdge","useInteractiveGuideline","staggerLabels","rotateLabels","ticks","width","tickValues","tickSubdivide","tickSize","tickPadding","domain","range","keyFormatter","useVoronoi","showXAxis","showYAxis","GrantController","$cookies","initiateGrantOrder","representativeRequired","grantTemplate","highestPoint","uninhibitGrantConfirm","uninhibitGrant","inhibitGrantConfirm","headers","Content-Type","translations","frenchTranslation","germanTranslation","isExcessClaims","feePayable_016","totalClaimsAmountPayable","isExcessPages","totalPagesAmountPayable","numPagesPaid","cookieExp","setDate","getDate","attempts","Number","excessClaims","excessPages","excessPagesDue","grantStage","RemindersController","$rootScope","ChunkDataService","CoreService","ui","updatingNotifications","updateNotificationsError","displayNotifications","notificationUi","notificationUrl","toBlueOrNotToBlue","colors","notifications","fetchNotificationUi","phaseNotifications","$broadcast","phase","costbandcolor","toLowerCase","activeTab","idx","RenewalHistoryController","ValidationController","checkStates","allState","selected","isChecked","validateType","designatedStates","filtered","extensionStates","lastName","names","pop","firstName","toString","replace","latestDateToPurchaseQuote","validationInfo","emailaddress","corresdpondenceEmailaddress","parse","toJson","validationStates","stateSelection","selectionBoolean","selection","requestNewQuote","confirmDeletion","submitPoaDocuments","designatedMap","removeCost","extensionMap","validationMap","allStatesMapped","newObj","promiseArray","all","validationCost_EUR","validationCost_USD","serviceStatusL","array","concat","validationFeeUI","validationTemplate","noPoasNeeded","poaNeeded","postAddress","validationQuoteUI","poaPostalAddress","statesCompleted","preparedQuote","init","FeeBreakDownController","loadFeeTimeout","setFees","availableFees","Object","keys","feeUIAvailable","displayForm1200","displayRenewal","displayGrant","displayValidation","official","fee","feeUI","form1200FeeUI","savings","Math","round","nextStageCostUSD","currentStageCostUSD","fxRate","renewalFeeUI","ppFeesUSD","processingFeeUSD","expressFeeUSD","urgentFeeUSD","ppFeesEUR","processingFeeEUR","expressFeeEUR","urgentFeeEUR","./app/features/checkout/index.js","__webpack_exports__","checkout_bank_transfer_commit_serv","BankTransferCommitService","order","checkout_basket_serv","BasketService","fetchBasketPatents","ids","REST_SERVICE_URI","BasketController","BankTransferPrepController","pageTitle","details","patentNos","orderObj","basketItems","billingDetails","openCancelTransModal","cancelTrans","empty","commitTransfer","angular_default","a","./app/features/forgot-password/index.js","n","submitEmail","emailAddress","current","Idle","unwatch","ForgotPasswordController","main","ResestPasswordController","AuthorisationService","password","dataLoading","ResetPassword","recap","publicKey","passwordUpdate","resetPasswordForm","$setValidity","passwordStrength","main_default","authorisation_serv","./app/features/login/index.js","LoginController","dataLoadingTimeout","login","watch","j_username","credentials","username","Login","SetCredentials","incorrectCredentials","app_core_serv","./app/features/portfolio/controllers/portfolio.controller.js","$","PortfolioController","$mdPanel","SearchPatentService","panelRef","select","noSubFilter","checkArray","prop","fetchAllCases","portfolioData","filterByPropertiesMatchingAND","matchesAND","p3sServices","$$destroyed","firstTime","displayCaseHelp","displayPortfolioHelp","rowSelect","event","stateParams","target","hasClass","notify","currentTarget","chipOptions","showFilter","mdMenu","$event","w","updateFiltered","cat","splice","closeDialog","hide","showAddPatent","panelPosition","newPanelPosition","absolute","center","attachTo","element","body","recently","added","findPatent","patentNo","loadingPatent","foundPatent","queriedPatent","searchError","$location","$anchorScroll","addPatent","addingPatent","match","ep_ApplicationNumber","searchPatent","toPatentTimeout","propertyName","selectedChip","displayFirstHelp","help","call","./app/features/portfolio/index.js","node_modules_angular","portfolio_cases_serv","portfolio_search_patent_serv","REST_SEARCH_PATENT_SERVICE_URI","portfolio_controller","profile_details_serv","profile_upload_avatar_serv","UploadAvatarService","app_timezone_serv","newPassword","updateUser","user","p","ProfileService","openAvatarModal","uploadImg","avatarImgUploaded","source","imgSelected","uploadAvatar","blob","binary","atob","dataURI","dataURItoBlob","cropped","image","$emit","$onInit","TimezoneService","fetchUsaTimeZones","ustimezones","fetchUser","listUsers","userCol","chunkedData","chunk","companyUsers","ProfileController","validations_directive","transactions_serv","transactions","TransactionService","fetchAllTransactions","displayTransactionHelp","sortBy","transaction","categories","selectedSortType","TransactionItemController","closeOverview","transStatus","active","complete","position","transactionItem","p3s_TransRef","transId","serviceUIs","serviceFeeUI","grantFeeUI","allStates","latestTransStatus","statusIndex","transactionLoaded","TransactionDetailsController","transStatusArray","transStatusValidationArray","isValidation","failed","val","TransactionsController"],"mappings":"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","file":"index.c0f95205d229ba7d24a2.js","sourcesContent":["export default angular.module('services.form1200-service', []).service('Form1200Service', Form1200Service).name;\n\nForm1200Service.$inject = ['$http', '$q', 'Upload'];\n\nfunction Form1200Service($http, $q, Upload) {\n\n    var factory = {\n        fetchQuestions: fetchQuestions,\n        submitForm1200: submitForm1200,\n        setQuestions: setQuestions,\n        questions: '',\n        getQuestions: getQuestions,\n        inhibitForm1200: inhibitForm1200,\n        generateForm1200: generateForm1200,\n        deleteApplication: deleteApplication,\n        editApplication: editApplication,\n        updateNotifications: updateNotifications        \n    }\n\n    function inhibitForm1200(id, reason) {\n\n        var deferred = $q.defer();\n\n        var config = {\n            params: {patent_id: id, failure_reason: reason}\n        }\n\n        $http.get(ppdomain+'rest-reject-form1200/', config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to inhibit form1200. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function fetchQuestions(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-start-form1200/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to fetch questions. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function submitForm1200(data, config) {\n\n        var deferred = $q.defer();\n\n        $http.post(ppdomain+'rest-form1200/', data, config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to submit form1200. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function setQuestions(data){\n\n        factory.questions = data;\n\n    }\n\n    function getQuestions() {\n        return factory.questions;\n    }\n\n    function generateForm1200(data) {\n\n        var deferred = $q.defer();\n\n        $http.post(ppdomain+'rest-form1200/'+data)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function updateNotifications(id, list) {\n\n        var deferred = $q.defer()\n\n        $http.put(ppdomain+'rest-epct-notifications/'+id, list)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }        \n\n    function deleteApplication(id) {\n            \n        var deferred = $q.defer()\n\n        $http.delete(ppdomain+'rest-form1200/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function editApplication(id) {\n            \n        var deferred = $q.defer()\n\n        $http.put(ppdomain+'rest-form1200/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }       \n\n    return factory;\n\n}","export default angular.module('services.grant-service', []).factory('GrantService', GrantService).name;\n\nGrantService.$inject = ['$http', '$q', '$timeout'];\n\nfunction GrantService($http, $q, $timeout){\n\n    var factory = {\n        submitGrant: submitGrant,\n        inhibitGrant: inhibitGrant,\n        unhibitGrant: unhibitGrant,\n        setQuestions: setQuestions,\n        getQuestions: getQuestions,\n        deleteGrant: deleteGrant,\n        representativeCheck: representativeCheck\n    }\n\n\n    function unhibitGrant(id) {\n\n        var deferred = $q.defer();\n\n        $http.delete(ppdomain+'rest-inhibit-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to reset grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function inhibitGrant(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-inhibit-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable create grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function deleteGrant(id) {\n\n        var deferred = $q.defer();\n\n        $http.delete(ppdomain+'rest-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to reset grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function submitGrant(data, config) {\n\n        var deferred = $q.defer();\n\n       $http.post(ppdomain+'rest-grant/', data, config)\n       .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to submit grant data. Error response:', errResponse);\n                deferred.reject(errResponse)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function setQuestions(data){\n\n        factory.questions = data;\n\n    }\n\n    function getQuestions() {\n        return factory.questions;\n    }    \n\n    function representativeCheck(id) {\n        \n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-start-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to fetch conditional boolean value to display first question')\n                deferred.reject(response.data)\n            }\n        )\n\n        return deferred.promise\n\n    }\n\n    return factory;\n\n}","export default angular.module('services.reminders-service', []).factory('RemindersService', RemindersService).name;\n\nRemindersService.$inject = ['$q', '$http'];\n\nfunction RemindersService($q, $http) {\n\n    var factory = {\n        updateNotifications: updateNotifications\n    }\n\n    function updateNotifications(id, list, url) {\n\n        var deferred = $q.defer()\n\n        $http.put(ppdomain+url+id, list)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }        \n\n    return factory;\n\n}","export default angular.module('services.renewal-service', []).service('RenewalHistoryService', RenewalHistoryService).name;\n\nRenewalHistoryService.$inject = ['$http', '$q'];\n\nfunction RenewalHistoryService($http, $q) {\n\n    var factory = {\n        fetchHistory: fetchHistory\n    }\n\n    function fetchHistory(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-renewal-history/'+id)\n        .then(\n            function(response) {\n                deferred.resolve(response.data);\n            },\n            function(errResponse){\n                console.error('Error while fetching renewal history');\n                deferred.reject(errResponse.data);\n            }\n        );\n\n        return deferred.promise;\n\n    };\n\n    return factory;\n\n}","export default angular.module('services.validation-service', []).factory('ValidationService', ValidationService).name;\n\nValidationService.$inject = ['$http', '$q', 'Upload'];\n\nfunction ValidationService($http, $q, Upload) {\n\n\tvar factory = {\n\t\tfetchDesignatedStates: fetchDesignatedStates,\n\t\tdeleteQuote: deleteQuote,\n\t\trequestQuote: requestQuote,\n\t\tfetchPreparedQuote: fetchPreparedQuote,\n\t\tsubmitPoas: submitPoas,\n\t\tpoaUploadSuccessNotify: poaUploadSuccessNotify,\n\t\tpoaUploadFailNotify: poaUploadFailNotify\n\t}\n\n\tfunction poaUploadSuccessNotify(id) {\n\t\t$http.post(ppdomain+'rest-validation-uploadPOACompleted/'+id)\n\t}\n\n\tfunction poaUploadFailNotify(id) {\n\t\t$http.post(ppdomain+'rest-validation-uploadPOAFailed/'+id)\n\t}\t\n\n\n\tfunction submitPoas(id, data) {\n\n\t\tvar deferred = $q.defer();\n\n        Upload.upload({\n            url: ppdomain+'rest-validation-uploadPOA/',\n            data:{ \n                patentID: id,\n                stateCode: data.stateCode,\n                signedPoaDoc: data.signedPoaDoc\n            },\n            arrayKey: ''\n        }).then(function (response) {\n            deferred.resolve(response)\n\n        }, function (errResponse) {\n        \tconsole.error('Error submiting poas. Error: ', errResponse)\n            deferred.reject(errResponse)\n        });\n\n\t\treturn deferred.promise;\n\n\t}\t\n\n\n\tfunction fetchDesignatedStates(id) {\n\n\t\tvar deferred = $q.defer()\n\n\t\t$http.get(ppdomain+'rest-validation-quote-request/'+id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\n\n\tfunction requestQuote(formData) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.post(ppdomain+'rest-validation-quote-request/', formData) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\n\n\tfunction fetchPreparedQuote(id) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.get(ppdomain+'rest-validation-quote/'+ id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service fetchPreparedQuote : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\t\t\n\n\tfunction deleteQuote(id) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.delete(ppdomain+'rest-validation-quote/'+ id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service deleteQuote : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\t\n\n\treturn factory;\n\n}","export default angular.module('services.activetab-service', []).service('ActiveTabService', ActiveTabService).name;\n\nActiveTabService.$inject = ['$q', '$http'];\n\nfunction ActiveTabService($q, $http) {\n\n    var factory = {\n        setTab: setTab,\n        getTab: 0\n    }\n\n    function setTab(index) {\n        factory.getTab = index;\n    }\n\n    return factory;\n\n}","export default angular.module('services.chunkdata-service', []).factory('ChunkDataService', ChunkDataService).name;\n\nfunction ChunkDataService() {\n\n\treturn {\n\n\t\tchunkData: function(arr, size) {\n\n\t    \tvar newArr = [];\n\n    \t\tfor (var i=0; i < arr.length; i+=size) {\n        \t\tnewArr.push(arr.slice(i, i+size));\n        \t}\n\n        \treturn newArr;\n\t    \t\n\t\t}\n\n\t}\n\n}","CaseOverviewController.$inject = ['caseSelected', '$scope', '$state', '$stateParams', '$timeout', 'CasesRestService', '$uibModal', 'RenewalHistoryService', 'ActiveTabService', '$mdDialog', 'ngCart']\n\nexport default function CaseOverviewController(caseSelected, $scope, $state, $stateParams, $timeout, CasesRestService, $uibModal, RenewalHistoryService, ActiveTabService, $mdDialog, ngCart) {\n\n    var vm = this;\n\n    vm.confirmDeletePatent = confirmDeletePatent;\n    vm.deletePatent = deletePatent;\n    vm.refreshChart = refreshChart;\n\n    vm.portfolioLoaded = false;\n    vm.setTab = setTab;\n    vm.checkAvailableAction = checkAvailableAction;\n    vm.processView = processView\n    vm.openMenu = openMenu;\n    $scope.notInProgress = true;\n    $scope.caseoverview_tab = 'details';\n    $scope.showOptions = false;\n    $scope.activeLeft = 0;\n    $scope.closeCaseoverview = closeCaseoverview;\n    $scope.renewalHistory = null;\n\n    var chartTimeout;\n    var originatorEv;\n\n    function processView(tab, index, chart) {\n        if((tab == 'reminders' && $scope.validationNotification) || (tab == 'costchart' && $scope.validationNotification) || (tab == 'fxchart' && $scope.validationNotification)) { return; }\n        if(!$scope.notInProgress || tab == 'reminders' || tab == 'details') {\n            vm.setTab(tab)\n            $scope.activeLeft = index;\n            if(chart !== undefined) {\n                vm.refreshChart()\n            }\n        }\n    }\n\n    function openMenu($mdMenu, ev) {\n        originatorEv = ev;\n        $mdMenu.open(ev);\n    };\n\n    function init() {\n\n        if($stateParams.form1200generate === 1) {\n            $scope.activeLeft = 2;\n            $scope.caseoverview_tab = 'form1200';\n            ActiveTabService.setTab(0);\n        }\n\n        if($stateParams.prepareGrant === 1) {\n            $scope.activeLeft = 4;\n            $scope.caseoverview_tab = 'grantandpublishing';\n            ActiveTabService.setTab(0);\n        }\n\n        if($stateParams.validationQuote === 1) {\n            $scope.activeLeft = 8;\n            $scope.caseoverview_tab = 'validation';\n            ActiveTabService.setTab(0);\n        }        \n\n        $scope.promise.then(\n            function(){\n                $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n                vm.patent = caseSelected;\n                vm.portfolioLoaded = true;\n                RenewalHistoryService.fetchHistory(caseSelected.patentID) //needs to be invoked outside of availableServices. A service wont be available even if there is renewal history\n                .then(\n                    function(response){\n                        $scope.renewalHistory = response;\n                        if(response.length > 0) {\n                           vm.displayRenewalHistoryTab = true;\n                           return;\n                        }\n                        vm.displayRenewalHistoryTab = false;\n                    }\n                )\n\n                $scope.validationNotification = caseSelected.p3sServicesWithFees.some(function(item){\n                    return item.serviceType == 'validation';\n                })\n\n                $scope.noReminders = caseSelected.p3sServicesWithFees.some(function(item){\n                    return item.saleType == 'Not In Progress' && item.serviceStatus == 'NotUsed';\n                })\n                 \n                $scope.notInProgress = caseSelected.p3sServicesWithFees.every(function(item){\n                    return (item.saleType == 'Not In Progress' && item.serviceType !== 'validation' && item.serviceStatus !== 'Completed')|| (item.serviceType == 'validation' && (item.serviceStatus == 'Validation available' || item.serviceStatus == 'Preparing quote')) || (item.saleType == 'Offline' && item.serviceType == 'validation');\n                })\n\n                $scope.availableServices = caseSelected.p3sServicesWithFees.filter(function(o){\n                    return o.saleType !== 'Not In Progress' || (o.saleType == 'Not In Progress' && o.serviceType == 'validation' && o.serviceStatus == 'Completed');\n                }).map(function(k, index){\n                    if(k.serviceType == 'epct') { k.serviceType = 'Euro-PCT' }\n                    return {id: index, action: k.serviceType, status: k.serviceStatus, type: k.saleType, urgent: k.isUrgentAttention}\n                })\n\n                $scope.availableServices.forEach(function(obj){\n  \n                    if(obj.type == 'Not In Progress' && obj.action !== 'validation' && obj.status !== 'Completed') { return; }\n\n                    if(obj.action == 'Euro-PCT') {\n                        vm.displayForm1200Tab = true;\n                    }\n\n                    if(obj.action == 'grant') {\n                        // if(obj.status == 'Grant available' || obj.status == 'Grant saved' || obj.status == 'Manual processing' || obj.status == 'Payment in progress' || obj.status == 'EPO instructed' ) {\n                            vm.displayGrantTab = true;\n                        // }\n                    }\n\n                    if(obj.action == 'validation') {\n                        vm.displayValidationTab = true;\n                    }\n                })\n\n\n            }\n        )\n\n    }\n\n    init()\n\n    function refreshChart (){\n        chartTimeout = $timeout(function(){  \n            var evt = document.createEvent('UIEvents');\n            evt.initUIEvent('resize', true, false, window, 0);\n            window.dispatchEvent(evt);\n        }, 300)\n    }\n\n    function setTab(tab) {\n        $scope.caseoverview_tab = tab;\n    }\n\n    function closeCaseoverview() {\n        $state.go('portfolio', {}, {reload: false})\n    }\n\n    function confirmDeletePatent(id) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.confirm-delete-patent.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n                \n                this.deletePatent = function() {\n                    deletePatent(id);\n                    $timeout(function() {\n                        $uibModalInstance.close();\n                    }, 300);\n                };\n\n                this.cancelDeletion = function() {\n                    $uibModalInstance.dismiss('cancel');\n                };\n\n            }]\n        });\n    };\n\n    function deletePatent(patent){\n\n        var actionIds = patent.p3sServicesWithFees.map(function(r){\n            return r.actionID;\n        })\n\n        var cartItems = ngCart.getItems().map(function(r){\n            return parseInt(r._id);\n        })\n\n        var found = actionIds.find(function(r) {\n            return cartItems.indexOf(r) >= 0;\n        })      \n\n        if(found) {\n            ngCart.removeItemById(found, true)\n        }\n\n        \n\n        CasesRestService.deletePatent(patent.patentID)\n        .then(\n            function(response){\n                $state.go('portfolio', {}, {reload: true})\n            },\n            function(errResponse){\n                deletePatentError(errResponse);\n            }\n        );\n    };\n\n    function deletePatentError(errResponse) {\n\n        if(errResponse.status === 304) {\n            var modalInstance = $uibModal.open({\n                template: require('html-loader!../html/modals/modal.delete-patent-error-trans.tpl.htm'),\n                appendTo: undefined,\n                controllerAs: '$ctrl',\n                controller: ['$uibModalInstance', function($uibModalInstance) {\n\n                    // vm.updatePatent(id); DONT THINK IS NEEDED\n\n                    this.dismissModal = function () {\n                        $uibModalInstance.close();\n                    };\n                }]\n            });\n        } else {\n            var modalInstance = $uibModal.open({\n                template: require('html-loader!../html/modals/modal.delete-patent-error.tpl.htm'),\n                appendTo: undefined,\n                controllerAs: '$ctrl',\n                controller: ['$uibModalInstance', function($uibModalInstance) {\n\n                    // vm.updatePatent(id); DONT THINK IS NEEDED\n\n                    this.dismissModal = function () {\n                        $uibModalInstance.close();\n                    };\n                }]\n            });\n        }\n\n    }\n\n    function checkAvailableAction(services) {\n        vm.actionsAvailable = services.some(function(item){\n            return item.saleType === 'Online' || item.saleType === 'Offline' || (item.saleType === 'In Progress' && item.serviceStatus !== 'Preparing quote');\n        })\n    }\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(chartTimeout);\n    })\n\n\n    \n}","CostChartController.$inject = ['caseSelected', 'ca','$scope', '$timeout']\n\nexport default function CostChartController(caseSelected, ca, $scope, $timeout) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n    vm.setData = setData;\n    vm.barData = null;\n    var costTimeout;\n\n    $scope.$parent.promise\n    .then(\n        function(response){\n\n            if(response.length > 0 && $scope.$parent.availableServices.length) {\n                costTimeout = $timeout(function(){\n\n                    vm.data = {};\n                    vm.data.availableAction = $scope.$parent.availableServices;\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action };\n\n                    if(ca !== undefined || typeof ca !== 'undefined') {\n             \n                        vm.barOptions = {\n                            chart: {\n                                type: 'multiBarHorizontalChart',\n                                barColor: [],\n                                tooltip: {\n                                    hideDelay: 0,\n                                    contentGenerator: function(d) {\n                                        var str = '<div style=\"font-weight:bold; margin:auto; text-align:center;\">' +d.data.tip +'</div>';\n                                        return str;\n                                    }\n                                },                \n                                height: 350,\n                                showControls: false,\n                                showValues: true,\n                                showLegend: false,\n                                stacked: true,\n                                duration: 500,\n                                margin: {\n                                    left: 90,\n                                    right: 10\n                                },\n                                x: function(d){\n                                    return d.x;\n                                },\n                                y: function(d){\n                                    return d.y;\n                                },\n                                multibar: {\n                                    groupSpacing: 0.4\n                                },\n                                xAxis: {\n                                    axisLabel: 'Date',\n                                    tickFormat: function(d) {\n                                        return d3.time.format('%x')(new Date(d))\n                                    },\n                                    axisLabelDistance: 25,                         \n                                    showMaxMin: false,\n                                    rotateYLabel: true, orient: 'left', css:{ 'transform':'rotate(45deg)' }\n                                },\n                                yAxis: {\n                                    axisLabel: 'Cost',\n                                    tickFormat: function(d){\n                                        return d3.format('.02f')(d);\n                                    },       \n                                    showMaxMin: false\n                                }\n                            }\n                        } //barOptions end\n\n                    }   \n\n                    setData(vm.data.selectedAction.action)\n                })\n               \n            } //outer if condition\n        }\n    )\n\n\n    function setData(type) {\n\n        if(type === undefined || typeof type === 'undefined') {\n            return;\n        }\n\n        var barChartData = ca.filter(function(item){\n            if(item.info == 'epct') { item.info = 'Euro-PCT' }\n            return item.info === type;\n        }).map(function(data){\n            return data.data;\n        })\n\n        if(type == 'renewal') {\n            vm.barOptions.chart.barColor = [\"#3c3c3b\", \"#0097ce\", \"#e30613\", \"#f9b233\", \"#53ab58\"];\n        }\n\n        if(type == 'Euro-PCT' || type == 'grant') {\n\n            vm.barOptions.chart.barColor = [\"#e30613\", \"#f9b233\", \"#53ab58\"];\n        }     \n\n        var barChartArr = [], label = [], barData = [], tip = [];;\n\n        var objIndex = 0;\n\n        for(var item in barChartData[0]) {\n            if(barChartData[0].hasOwnProperty(item)) {\n                if((item.includes('StartDate')) && (!item.includes('UI'))) {\n                    label.push(barChartData[0][item]);\n                }\n\n                if((item.includes('StartDateUI'))) {\n                    tip.push(barChartData[0][item]);\n                }\n\n                if(item.includes('Cost') && barChartData[0][item] !== null) {\n                    barData.push(barChartData[0][item]);\n                }\n            }\n        }\n      \n        for (var i = 0; label.length && i < barData.length; i++) {\n            barChartArr[i] = {'y': barData[i], 'x':label[i], 'tip':tip[i]}; //pairs the items from two arrays into a single array in the new array\n        }\n\n        barChartArr.reverse();\n\n        vm.barData = [\n            {\n                'key': 'Cost',\n                'values': barChartArr\n            }\n        ]\n    }\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(costTimeout)\n    })\n\n}","CaseDetailsController.$inject = ['caseSelected', '$scope', '$state', 'CasesRestService', '$uibModal']\n\nexport default function CaseDetailsController(caseSelected, $scope, $state, CasesRestService, $uibModal) {\n\n\tvar vm = this;\n\n\tvm.patent = caseSelected;\n    vm.updatePatent = updatePatent;    \n\n    function updatePatentSuccess() {\n\n        $state.reload();\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-patent-success.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n        \n    }\n\n    function updatePatentError() {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-patent-error.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n    function updatePatent(patent) {\n\n        CasesRestService.updatePatent(patent, patent.patentID)\n        .then(\n            function(response){\n                updatePatentSuccess();\n            },\n            function(errResponse){\n                updatePatentError();\n            }\n        )\n\n    };\n\n\n}","Form1200GeneratedController.$inject = ['$scope', '$state', 'Form1200Service', '$timeout', '$uibModal'];\n\nexport default function Form1200GeneratedController($scope, $state, Form1200Service, $timeout, $uibModal) {\n\n    var vm = this;\n\n\n    function init() {\n\n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n        $scope.patent = $scope.$parent.patent\n        $scope.confirmDeleteApplication = confirmDeleteApplication;\n        $scope.deleteApplicationReq = false;\n\n    }\n\n    init()\n\n    function confirmDeleteApplication(id) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.confirm-delete-epct-application-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.confirm = function() {\n                    deleteApplication($scope.patent.patentID)\n                    $uibModalInstance.close();\n                }\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                    \n                };\n               \n            }]\n\n        });      \n\n    }\n\n    function deleteApplication(id) {\n        $scope.deleteApplicationReq = true;\n        Form1200Service.deleteApplication(id)\n        .then(\n            function(response){\n                deleteApplicationSuccess();\n            },\n            function(errResponse){\n                deleteApplicationError(errResponse);\n            }\n        )\n\n    }\n\n    function deleteApplicationSuccess() {\n\n        $scope.deleteApplicationReq = true;\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.delete-epct-application-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                    \n                };\n                var timeout = $timeout(function() {\n                    $state.reload(); //go to patent info on successful deletion                    \n                }, 200);\n\n                $scope.$on('$destroy', function(){\n                    $timeout.cancel(timeout)\n                })\n               \n            }]\n\n        });\n    }\n\n    function deleteApplicationError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.delete-epct-application-error.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n    function editApplicationError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.edit-epct-application-error.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n\n}","Form1200ReadyController.$inject = ['caseSelected', '$scope', '$state', '$timeout', '$compile', '$uibModal', 'Form1200Service', 'ActiveTabService'];\r\n\r\nexport default function Form1200ReadyController(caseSelected, $scope, $state, $timeout, $compile, $uibModal, Form1200Service, ActiveTabService) {\r\n\r\n    var vm = this;\r\n\r\n\r\n    vm.patent = caseSelected;\r\n    $scope.patent = caseSelected; //needed for generated controller\r\n    vm.initiateForm1200 = initiateForm1200;\r\n    \r\n    vm.templates = [ //compiled with help of dynamic directive\r\n        { name: 'form1200intro.html', url: require('html-loader!../html/europct/europct.form1200.intro.tpl.htm')},\r\n        { name: 'form1200questions.html', url: require('html-loader!../html/europct/europct.form1200.questionnaire.tpl.htm')},\r\n        { name: 'form1200generated.html', url: require('html-loader!../html/europct/europct.form1200.generated.tpl.htm')},\r\n        { name: 'form1200manual.html', url: require('html-loader!../html/europct/europct.form1200.manual.tpl.htm')}\r\n    ];\r\n\r\n    vm.questionsParam = '';\r\n    vm.cancel1200 = cancel1200;\r\n    vm.chkValidStates = chkValidStates;\r\n    vm.chkExtStates = chkExtStates;\r\n    vm.checkError = checkError;\r\n    vm.submitForm1200Data = submitForm1200Data;\r\n    vm.excessClaimsCheck = excessClaimsCheck;\r\n    vm.notPayingExcess = notPayingExcess;\r\n    vm.amendmentsMade = amendmentsMade;\r\n    vm.uploadAmended = uploadAmended;\r\n    $scope.formData = {};\r\n    $scope.validate = {};\r\n    $scope.excessobject = {};\r\n    $scope.phoneNumber = '';\r\n    $scope.test = {};\r\n    $scope.$parent.promise\r\n    .then(\r\n        function(response){\r\n\r\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n            var service = $scope.$parent.availableServices;\r\n\r\n            if(service[0].status == 'Epct available') {\r\n                vm.form1200Template = vm.templates[0].url;\r\n                vm.epctStage = 1;\r\n            }\r\n\r\n            if(service[0].status == 'Epct being generated' || service[0].status == 'Epct saved' || service[0].status == 'Epct rejected' || service[0].status == 'Payment in progress') {\r\n                vm.form1200Template = vm.templates[2].url;\r\n                vm.epctStage = 2;\r\n            }\r\n\r\n            if(service[0].type === 'Offline') {\r\n                vm.form1200Template = vm.templates[3].url;\r\n                vm.urgent = service[0].urgent;\r\n                vm.epctStage = 2;\r\n            }\r\n\r\n        }\r\n    )\r\n\r\n    function initiateForm1200() {\r\n\r\n        Form1200Service.fetchQuestions(caseSelected.patentID)\r\n        .then(\r\n            function(response){\r\n\r\n                if(response !== null) {\r\n                    $scope.formData.extensionStatesUI = response.extensionStatesUI;\r\n                    $scope.formData.validationStatesUI = response.validationStatesUI;\r\n                    if(response.clientRef !== '') {\r\n                        $scope.formData.clientRef = response.clientRef;\r\n                    }\r\n                    if(response.showOptionalQuestion === true) {\r\n                        vm.additionalDocuments = true;\r\n                    }\r\n                    if(response.isYear3RenewalDue === true) {\r\n                        vm.isYear3RenewalDue = true;\r\n                    }\r\n\r\n                    vm.form1200Template = vm.templates[1].url;\r\n                    \r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function amendmentsMade(value) {\r\n        vm.amendedOptions = value === true ? true : false;\r\n\r\n    }\r\n\r\n    function uploadAmended(value) {\r\n        vm.displayAmendedUpload = value === true ? true : false;\r\n        if(value) {\r\n            var modalInstance = $uibModal.open({\r\n                template: require('html-loader!../html/modals/modal.not-checking-claims.tpl.htm'),\r\n                appendTo: undefined,\r\n                controllerAs: '$ctrl',\r\n                controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                    this.dismissModal = function () {\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n                    this.ok = function () {\r\n                        $state.go('portfolio', {reload: true});\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n\r\n                }]\r\n            });\r\n        }        \r\n    }\r\n\r\n    function notPayingExcess(value) {\r\n\r\n        if(value === true) {\r\n            var modalInstance = $uibModal.open({\r\n                template: require('html-loader!../html/modals/modal.not-paying-excess.tpl.htm'),\r\n                appendTo: undefined,\r\n                controllerAs: '$ctrl',\r\n                controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                    this.dismissModal = function () {\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n                    this.ok = function () {\r\n                        $state.go('portfolio', {reload: true});\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n\r\n                }]\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function checkError(question, value) {\r\n\r\n        if(value === false || typeof value === 'undefined' || value === undefined) { return;}\r\n        var obj = {};\r\n        var message = '';\r\n        if(question == 'entity' && value === true) {\r\n            message = 'NaturalPerson';\r\n            obj.title = 'Entity or a natural person, Rule 6(4)';\r\n            var template = '<p>If you do not wish to delcare that you are an entity or a natural person, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope); \r\n        }\r\n        if(question == 'amendments' && value === true) {\r\n            message = 'Amended';\r\n            obj.title = 'Amendments made';\r\n            var template = '<p>If you confirm that amendments have been made to the application, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }\r\n        if(question == 'documents' && value === true) {\r\n            message = 'DocsRequired'\r\n            obj.title = 'Additional copies required';\r\n            var template = '<p>If you confirm that you require additional copies of the document cited in the supplementary European search report,\\\r\n                The Patent Place can offer help with your application offline via a Patent Administrator, and the order will become unavailable to process online.\\\r\n                For further help please contact The Patent Place via email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }              \r\n        manualProcess(obj, message);  \r\n    }\r\n\r\n    function excessClaimsCheck(value) {\r\n        vm.excessClaimsDue = value > 15 ? true : false;\r\n    }\r\n\r\n    function chkValidStates(item, index) {\r\n        if(item === '') {\r\n            $scope.formData.validationStatesUI[index].selected = true;\r\n        } else {\r\n            $scope.formData.validationStatesUI[index].selected = false;\r\n        }\r\n    }\r\n\r\n    function chkExtStates(item, index) {     \r\n        if(item === '') {\r\n            $scope.formData.extensionStatesUI[index].selected = true;\r\n        } else {\r\n            $scope.formData.extensionStatesUI[index].selected = false;\r\n        }\r\n    }\r\n\r\n\r\n    function cancel1200() {\r\n        var modalInstance = $uibModal.open({\r\n            template: require('html-loader!../html/modals/modal.confirm-cancel-1200.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                this.dismissModal = function () {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n                this.ok = function () {\r\n                    $state.go('portfolio', {reload: true});\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function sortPageDetails(data) {\r\n\r\n        var arr = [];\r\n\r\n        for(var property in data) {\r\n            if(data.hasOwnProperty(property)) {\r\n                switch(property) {\r\n                    case 'claims':\r\n                        data[property].type = 'Claims';\r\n                        arr.push(data[property])\r\n                    break;\r\n                    case 'description':\r\n                        data[property].type = 'Description';\r\n                        arr.push(data[property])\r\n                    break;\r\n                    case 'drawings':\r\n                        data[property].type = 'Drawings';\r\n                        arr.push(data[property])\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr;\r\n\r\n    }\r\n\r\n    function invalidPageNos(error) {\r\n\r\n        $scope.formDataSubmitted = false;\r\n        var modalInstance = $uibModal.open({\r\n            template: require('html-loader!../html/modals/modal.invalid-page-nos.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });\r\n    }\r\n\r\n\r\n    function submitForm1200Data(data){\r\n\r\n        $scope.formDataSubmitted = true;\r\n\r\n        var arr = sortPageDetails(data.pageDetailsData);\r\n     \r\n        var config = { \r\n            headers: { 'Content-Type': undefined},\r\n            transformRequest: angular.identity,\r\n            // params: { amendedDoc: paramsData }       \r\n        }; \r\n\r\n        var formData = new FormData();\r\n\r\n        var uploadRequired;\r\n\r\n\r\n        if($scope.excessobject.excessdocs){\r\n\r\n            if($scope.excessobject.excessdocs.yes) {\r\n                uploadRequired = true;\r\n            }\r\n            if($scope.excessobject.excessdocs.no) {\r\n                uploadRequired = false;\r\n            }\r\n            formData.append('isUploadRequired', uploadRequired)\r\n            \r\n        }\r\n\r\n        formData.append('pageDescriptionsUI', JSON.stringify(arr))\r\n        formData.append('patentID', caseSelected.patentID)\r\n        formData.append('clientRef', data.clientRef)\r\n        formData.append('totalClaims', parseInt(data.totalClaims))\r\n        formData.append('validationStatesUI', JSON.stringify(data.validationStatesUI))\r\n        formData.append('extensionStatesUI', JSON.stringify(data.extensionStatesUI))\r\n        formData.append('isAmendmentsMade', $scope.validate.amendments.yes)\r\n\r\n        if(data.numAdditionalCopies) {\r\n            formData.append('numAdditionalCopies', data.numAdditionalCopies)\r\n        }\r\n\r\n        if(data.amended) {\r\n            if(data.amended.amendedDoc) {\r\n                formData.append('amendedDoc', data.amended.amendedDoc)\r\n            }\r\n        }\r\n\r\n        formData.append('isYear3RenewalPaying', data.isYear3RenewalPaying ? data.isYear3RenewalPaying.yes : false);\r\n        formData.append('isExcessClaimsPaying', $scope.excessobject.excessclaims ?  $scope.excessobject.excessclaims.yes : false)\r\n        \r\n\r\n        if($scope.validate.amendments) {\r\n            if($scope.validate.amendments.no) {\r\n                if(formData.get('isUploadRequired')) {\r\n                    delete formData.delete('isUploadRequired');\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        Form1200Service.submitForm1200(formData, config)\r\n        .then(\r\n            function(response){\r\n\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.form1200-generating.tpl.htm'), //create html for notifications update success\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', function($uibModalInstance){\r\n                        this.dismissModal = function () {\r\n                            $uibModalInstance.close();\r\n                        };\r\n                    }]\r\n\r\n                })\r\n                ActiveTabService.setTab(2);\r\n                $state.go('portfolio.modal.case', {form1200generate: 1, prepareGrant: 0}, {reload: true});\r\n            },\r\n            function(errResponse){\r\n                console.log('Error : ', errResponse)\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.generate-form1200-error.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                        vm.proceedMsgAmend  = true;\r\n                        this.dismissModal = function () {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                });\r\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true});\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function manualProcess(message, reason) {// NOT NEEDED FOR RELEASE 1\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: '<div class=\"modal-header d-flex flex-column align-items-center justify-content-center\">\\\r\n                            <span class=\"modal-cross cursor-pointer\" data-ng-click=\"$ctrl.dismissModal()\"><i class=\"txt-grey fa fa-times fa-2x\"></i></span>\\\r\n                            <div class=\"m-b-sm\">\\\r\n                                <i class=\"fas fa-exclamation-circle fa-4x txt-phase-red\"></i>\\\r\n                            </div>\\\r\n                            <p class=\"font-h3 font-weight-medium\">'+message.title+'</p>\\\r\n                            <p class=\"font-body w-100 text-center m-b-sm m-t-xs\">'+ message.message[0].innerHTML+'</p>\\\r\n                            <div class=\"d-flex\">\\\r\n                                <button class=\"btn btn--lg btn--red pill-radius m-r-md\" data-ng-click=\"$ctrl.dismissModal()\">Cancel</button>\\\r\n                                <button class=\"btn btn--lg btn--green pill-radius\" data-ng-click=\"$ctrl.confirm()\">Confirm</button>\\\r\n                            </div>\\\r\n                        </div>',\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', '$state', function($uibModalInstance, $timeout, $state){\r\n\r\n               \r\n\r\n                this.confirm = function() {\r\n                    Form1200Service.inhibitForm1200(caseSelected.patentID, reason)\r\n                    .then(\r\n                        function(response) {\r\n                            $state.reload();\r\n                            $uibModalInstance.close();\r\n                        }\r\n                    )\r\n                }\r\n                \r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });    \r\n\r\n    } \r\n}","FxChartController.$inject = ['caseSelected', 'ca', '$scope', '$timeout', '$state']\n\nexport default function FxChartController(caseSelected, ca, $scope, $timeout, $state) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n    vm.setData = setData;\n    vm.lineData = null;\n    var fxTimeout;\n\n    $scope.$parent.promise\n    .then(\n        function(response){\n            if(response.length > 0 && $scope.$parent.availableServices.length) {\n                fxTimeout = $timeout(function(){\n\n                    vm.data = {};\n                    vm.data.availableAction = $scope.$parent.availableServices;\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action }\n                    \n                    if(ca !== undefined || typeof ca !== 'undefined') {\n                       \n                        vm.lineOptions = {\n                            chart: {\n                                type: 'lineChart',\n                                height: 350,\n                                margin : {\n                                    top: 30,\n                                    right: 50,\n                                    bottom: 30,\n                                    left: 50\n                                },\n                                clipEdge: false,\n                                duration: 500,\n                                tooltip: {\n                                  hideDelay: 0\n                                },                      \n                                showLegend: false,\n                                x: function(d, i){ \n                                    return d[0];\n                                },\n                                y: function(d){\n                                    return d[1];\n                                },\n                                useInteractiveGuideline: true,\n                                xAxis: {\n                                    tickFormat: function (d, i) {\n                                        return d3.time.format('%x')(new Date(d));\n                                    },\n                                    axisLabelDistance: 20,\n                                    staggerLabels: false,\n                                    rotateLabels: 0,\n                                    rotateYLabel: true,\n                                    showMaxMin: true,\n                                    height: 60,\n                                    ticks: null,\n                                    width: 75,\n                                    margin: {\n                                        top: 0,\n                                        right: 0,\n                                        bottom: 0,\n                                        left: 0\n                                    },\n                                    duration: 250,\n                                    orient: 'bottom',\n                                    tickValues: null,\n                                    tickSubdivide: 0,\n                                    tickSize: 6,\n                                    tickPadding: 10,\n                                    domain: [\n                                        0,\n                                        1\n                                    ],\n                                    range: [\n                                        0,\n                                        1\n                                    ]           \n                                },\n                                yAxis: {\n                                    tickFormat: function(d){\n                                        return '$ ' + d3.format('.00f')(d);\n                                    },\n                                    axisLabelDistance: 20,\n                                    rotateLabels: 0,\n                                    rotateYLabel: true,\n                                    showMaxMin: true,\n                                    height: 60,\n                                    width: 75,\n                                    margin: {\n                                        top: 0,\n                                        right: 0,\n                                        bottom: 0,\n                                        left: -30\n                                    },\n                                    duration: 250,\n                                    orient: 'left',\n                                    tickValues: null,\n                                    tickSubdivide: 0,\n                                    tickSize: 6,\n                                    tickPadding: 10,\n                                    domain: [\n                                        0,\n                                        1\n                                    ],\n                                    range: [\n                                        0,\n                                        1\n                                    ]\n                                },\n                                tooltip: {\n                                    keyFormatter: function(d) {\n                                        return d3.time.format('%x')(new Date(d));\n                                    }\n                                },\n                                useVoronoi: false,\n                                lines: {\n                                    interactive: true\n                                },\n                                showXAxis: true,\n                                showYAxis: true\n                            }\n                        }\n\n                        setData(vm.data.selectedAction.action)\n\n                    }\n                }) //timeout end\n            }\n\n        })\n\n        function setData(type) {\n\n\n            if(type === undefined || typeof type === 'undefined') {\n                return;\n            }\n\n            var fxChartData = ca.filter(function(item){\n                if(item.info == 'epct') { item.info = 'Euro-PCT' }\n                return item.info === type;\n            }).map(function(data){\n                return data.data.lineChart;\n            })\n\n            var lineDataArr = [];\n\n            for (var property in fxChartData[0]) { //change lineData\n                if (fxChartData[0].hasOwnProperty(property)) {\n                    var dayData = fxChartData[0][property].currentOfficialFeeUSD !== undefined ? fxChartData[0][property].currentOfficialFeeUSD : fxChartData[0][property];\n                    var str = property.split(\"T\").shift();\n                    var date = new Date(str).getTime();\n                    lineDataArr.push([date, dayData]);\n                }\n            }                \n            \n\n            vm.lineData = [\n                {\n                    values: lineDataArr,\n                    color: '#2ca02c'\n                }\n            ]\n\n        }  //setData send\n\n        $scope.$on('$destroy', function(){\n            $timeout.cancel(fxTimeout)\n        })\n\n}","GrantController.$inject = ['caseSelected', '$scope', '$uibModal', '$state', '$timeout', 'GrantService', '$compile', '$cookies'];\r\n\r\nexport default function GrantController(caseSelected, $scope, $uibModal, $state, $timeout, GrantService, $compile, $cookies) {\r\n\r\n\tvar vm = this;\r\n\r\n\tvm.patent = caseSelected;\r\n\tvm.initiateGrantOrder = initiateGrantOrder;\r\n    vm.templates = [\r\n        { name: 'grantintro.html', url:  require('html-loader!../html/grant/grant.intro.tpl.htm')},\r\n        { name: 'grantquestions.html', url: require('html-loader!../html/grant/grant.questionnaire.tpl.htm')},\r\n        { name: 'grantgenerated.html', url: require('html-loader!../html/grant/grant.ready.tpl.htm')}\r\n    ];\r\n    vm.highestPoint = 0;\r\n    vm.uninhibitGrantConfirm = uninhibitGrantConfirm;\r\n    vm.deleteGrantConfirm = deleteGrantConfirm;\r\n    vm.checkError = checkError;\r\n    vm.submitGrantData = submitGrantData;\r\n    vm.excessClaims = excessClaims;\r\n    vm.excessPages = excessPages;\r\n    $scope.formData = {};\r\n    $scope.validate = {};\r\n    $scope.phoneNumber = '';\r\n\r\n    function init() {\r\n\r\n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n    \tvm.activeTab = 0;\r\n\r\n        if(caseSelected.clientRef !== '') {\r\n            $scope.formData.clientRef = caseSelected.clientRef;\r\n        }\r\n\r\n\t\tif(caseSelected.p3sServicesWithFees[0].serviceStatus == 'Grant available') {\r\n\r\n\t\t\tvm.grantStage = 1;\r\n    \t\tvm.grantTemplate = vm.templates[0].url;        \r\n    \t}\r\n\r\n\t\tif(caseSelected.p3sServicesWithFees[0].serviceStatus == 'Grant saved' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Too Late Online' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Manual processing' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Payment in progress' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'EPO Instrcted') {\r\n\t\t\tvm.grantStage = 2;\r\n    \t\tvm.grantTemplate = vm.templates[2].url;\r\n    \t}\r\n    }\r\n\r\n    init();\r\n\r\n    function submitGrantData(data){\r\n\r\n        vm.formDataSubmitted = true; \r\n        var formData = new FormData();\r\n        var config = { headers: {'Content-Type': undefined} };\r\n        var notifyWhenValidationAvailable = true; //REMOVE EVENTALLY. QUICK FIX. PROPERTY NOT REQUIRED\r\n        formData.append('patentID', caseSelected.patentID);\r\n        formData.append('clientRef', data.clientRef);\r\n        formData.append('frenchTranslation', data.translations.frenchTranslation);\r\n        formData.append('germanTranslation', data.translations.germanTranslation);\r\n        \r\n        if(data.isExcessClaims) {\r\n            formData.append('isExcessClaims', data.isExcessClaims.yes);\r\n            if(data.isExcessClaims.yes) {\r\n                formData.append('feePayable_016', data.feePayable_016);\r\n                formData.append('feePayable_016e', data.feePayable_016e);\r\n                formData.append('totalClaimsAmountPayable', data.totalClaimsAmountPayable);\r\n                formData.append('numClaimsPaid', data.numClaimsPaid);\r\n            }\r\n        }\r\n\r\n        if(data.isExcessPages) {\r\n            formData.append('isExcessPages', data.isExcessPages.yes);\r\n            if(data.isExcessPages.yes) {\r\n                formData.append('feePayable_008', data.feePayable_008);\r\n                formData.append('totalPagesAmountPayable', data.totalPagesAmountPayable);\r\n                formData.append('numPagesPaid', data.numPagesPaid);\r\n            }\r\n        }\r\n        \r\n        var cookieExp = new Date();\r\n        cookieExp.setDate(cookieExp.getDate() + 1);\r\n\r\n        var attempts = $cookies.get('grantAttempts');\r\n\r\n        if(!attempts) {\r\n            $cookies.put('grantAttempts', 1);\r\n            formData.append('isFirstTime', true);\r\n        } else {\r\n            if(attempts < 2) {\r\n                $cookies.put('grantAttempts', Number(attempts) + Number(1));\r\n                \r\n            }\r\n            formData.append('isFirstTime', false);\r\n            \r\n        }\r\n\r\n        GrantService.submitGrant(formData, config)\r\n        .then(\r\n            function(response){\r\n\r\n                var modalInstance = $uibModal.open({\r\n                    template:  require('html-loader!../html/modals/modal.grant-order-prepared.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                        this.dismissModal = function() {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                });\r\n\r\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 1, form1200generate: 0}, {reload: true})\r\n\r\n            },\r\n            function(errResponse){\r\n\r\n                if(errResponse.status !== 406) {\r\n\r\n                    vm.formDataSubmitted = false; \r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-order-not-prepared.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });     \r\n                }\r\n\r\n                if(errResponse.status == 406 && attempts == undefined ) {\r\n\r\n                    vm.formDataSubmitted = false; \r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-first-mismatch.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });   \r\n                }\r\n\r\n                if(errResponse.status == 406 && attempts >= 1) {\r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-second-mismatch.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });   \r\n\r\n                    $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true})\r\n                }\r\n\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function excessClaims(value) {\r\n        if(value) {\r\n            vm.excessClaimsDue = true;\r\n        } else {\r\n            vm.excessClaimsDue = false;\r\n        }\r\n    }\r\n\r\n    function excessPages(value) {\r\n        if(value) {\r\n            vm.excessPagesDue = true;\r\n        } else {\r\n            vm.excessPagesDue = false;\r\n        }\r\n    }\r\n\r\n    function checkError(question, value) {\r\n        if(value === false || typeof value === 'undefined' || value === undefined) { return;}\r\n        var obj = {};\r\n        if(question == 'representative' && value === true) {\r\n            obj.title = 'Representative';\r\n            var template = '<p>If you confirm that you do not wish IP Place to act as representative, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber + '</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }\r\n        if(question == 'approveText' && value === true) {\r\n            obj.title = 'Patent Specification';\r\n            var template = '<p>If you confirm that you do not approve the text of the Patent Specification, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber + '</p>';     \r\n            obj.message = $compile(template)($scope);      \r\n        }\r\n\r\n        inhibitGrantConfirm(obj);  \r\n    }\r\n\r\n\tfunction initiateGrantOrder() {\r\n\r\n        GrantService.representativeCheck(caseSelected.patentID)\r\n        .then(\r\n            function(response){\r\n                if(response === true) {\r\n                    vm.representativeRequired = true;\r\n                }\r\n                vm.grantTemplate = vm.templates[1].url;\r\n            }\r\n        )\r\n\t\t\r\n\r\n\t}\r\n\r\n    function uninhibitGrantConfirm() {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template:  require('html-loader!../html/modals/modal.confirm-uninhibit-grant-order.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.uninhibitGrant = function() {\r\n                    $uibModalInstance.close();\r\n                    GrantService.unhibitGrant(caseSelected.patentID)\r\n                    .then(\r\n                        function(response){\r\n                            $state.reload();\r\n                            var modalInstance = $uibModal.open({\r\n                                template:  require('html-loader!../html/modals/modal.grant-order-uninhibited.tpl.htm'),\r\n                                appendTo: undefined,\r\n                                controllerAs: '$ctrl',\r\n                                controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                                    this.dismissModal = function() {\r\n                                        $uibModalInstance.close();\r\n                                    };\r\n\r\n                                }]\r\n                            });\r\n\r\n                        }\r\n                    )\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                    $state.reload()\r\n                };\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n\r\n    function inhibitGrantConfirm(message) {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: '<div class=\"modal-header d-flex flex-column align-items-center justify-content-center\">\\\r\n                            <span class=\"modal-cross cursor-pointer\" data-ng-click=\"$ctrl.dismissModal()\"><i class=\"txt-grey fa fa-times fa-2x\"></i></span>\\\r\n                            <div class=\"m-b-sm\">\\\r\n                                <i class=\"fas fa-exclamation-circle fa-4x txt-phase-red\"></i>\\\r\n                            </div>\\\r\n                            <p class=\"font-h3 font-weight-medium\">'+message.title+'</p>\\\r\n                            <p class=\"font-body w-100 text-center m-b-sm m-t-xs\">'+ message.message[0].innerHTML+'</p>\\\r\n                            <div class=\"d-flex\">\\\r\n                                <button class=\"btn btn--lg btn--red pill-radius m-r-md\" data-ng-click=\"$ctrl.dismissModal()\">Cancel</button>\\\r\n                                <button class=\"btn btn--lg btn--green pill-radius\" data-ng-click=\"$ctrl.confirm()\">Confirm</button>\\\r\n                            </div>\\\r\n                        </div>',\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', '$state', function($uibModalInstance, $timeout, $state){\r\n\r\n                if(caseSelected.p3sServicesWithFees[0].serviceStatus === 'Grant available') {\r\n\r\n                    this.confirm = function() {\r\n                        GrantService.inhibitGrant(caseSelected.patentID)\r\n                        .then(\r\n                            function(response) {\r\n                                $state.reload();\r\n                                $uibModalInstance.close();\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n    function deleteGrantConfirm() {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template:  require('html-loader!../html/modals/modal.confirm-delete-grant-order.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.deleteGrant = function() {\r\n                    $uibModalInstance.close();\r\n                    GrantService.deleteGrant(caseSelected.patentID)\r\n                    .then(\r\n                        function(response){\r\n                            $state.reload()\r\n                            var modalInstance = $uibModal.open({\r\n                                template:  require('html-loader!../html/modals/modal.grant-order-deleted.tpl.htm'),\r\n                                appendTo: undefined,\r\n                                controllerAs: '$ctrl',\r\n                                controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                                    this.dismissModal = function() {\r\n                                        $uibModalInstance.close();\r\n                                    };\r\n\r\n                                }]\r\n                            });\r\n\r\n                        }\r\n                    )\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                    $state.reload()\r\n                };\r\n\r\n            }]\r\n        });\r\n    }\r\n}","RemindersController.$inject = ['caseSelected', '$scope', '$rootScope', '$uibModal', 'ChunkDataService', 'RemindersService', 'CoreService'];\n\nexport default function RemindersController(caseSelected, $scope, $rootScope, $uibModal, ChunkDataService, RemindersService,  CoreService) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n    vm.updateNotifications = updateNotifications;\n    vm.displayNotifications = displayNotifications;\n    vm.notificationNavItems = [];\n    vm.notificationUrl = 'rest-renewal-notifications/';\n    vm.openGuide = openGuide;\n    vm.notificationUi; //required for uopdating notifications\n    vm.notificationUrl;\n    var colors = ['green', 'amber', 'red', 'blue', 'black'];\n    vm.toBlueOrNotToBlue = false;\n    vm.data = {    \n        availableAction: [],\n        selectedAction: {}\n    }\n\n    vm.activeTab = 0;\n\n    function checkServices() {\n\n        vm.data.availableAction = caseSelected.p3sServicesWithFees.filter(function(item){\n            return item.serviceType !== 'postgrant';\n        }).map(function(action, idx){\n            if(action.serviceType == 'epct') { action.serviceType = 'Euro-PCT'}\n            return {id: idx, action: action.serviceType}\n        })\n\n        vm.data.selectedAction = vm.data.availableAction[0];\n\n    }\n\n    checkServices();\n\n    vm.notifications = {};\n\n    function displayNotifications(action) {  //displays the specifed actions notifications\n\n        if(typeof action == undefined) { return; }\n\n        if(action == 'Euro-PCT') { \n            vm.notificationUi = 'allEpctNotificationUIs';\n            vm.notificationUrl = 'rest-epct-notifications/';\n            vm.toBlueOrNotToBlue = false; //USED TO DETERMINE WHETHER TO DISPLAY BLUE\n        }\n\n        if(action == 'renewal') {\n            vm.notificationUi = 'allRenewalNotificationUIs';\n            vm.notificationUrl = 'rest-renewal-notifications/';\n            vm.toBlueOrNotToBlue = true;\n        }\n\n        if(action == 'grant') {\n            vm.notificationUi = 'allGrantNotificationUIs';\n            vm.notificationUrl = 'rest-grant-notifications/';\n            vm.toBlueOrNotToBlue = false;\n        }\n\n        if(action !== 'validation' && action !== 'N/A') { \n            phaseNotifications();\n        }\n\n\n    };\n\n    function phaseNotifications() {  //all info assigned to scope is requried for submitting data\n\n        for(var i = 0; colors.length > i; i++) {\n            if(vm.toBlueOrNotToBlue) {\n                vm.notifications[colors[i]] = ChunkDataService.chunkData(fetchNotificationUi(colors[i], caseSelected[vm.notificationUi]), 6)//chunk data makes sure the coluns go no more than 6\n            }\n            if(!vm.toBlueOrNotToBlue) {\n                if(i == 3) { break }; //if only green, amber and red available\n                vm.notifications[colors[i]] = ChunkDataService.chunkData(fetchNotificationUi(colors[i], caseSelected[vm.notificationUi]), 6)\n            }\n        }        \n\n    }    \n\n    function fetchNotificationUi(phase, ui) { //returns the phases notifciations for chunkdata service\n        return ui.filter(function(data){\n            return data.costbandcolor.toLowerCase() == phase.toLowerCase();\n        });\n    }\n\n    function openGuide() {\n        CoreService.openAppGuide();\n        $rootScope.$broadcast('appGuideOpen');\n    }    \n\n    function updateNotifications(id, ui, url) {\n        vm.updatingNotifications = true;\n        RemindersService.updateNotifications(id, caseSelected[ui], url)\n        .then(\n            function(response){\n                updateNotificationsSuccess();\n                vm.updatingNotifications = false;\n            },\n            function(errResponse){\n                updateNotificationsError(errResponse);\n                vm.updatingNotifications = false;\n            }\n        )\n    };\n\n    function updateNotificationsSuccess() {\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-epct-notifications-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n            }]\n\n        });\n    }\n\n    function updateNotificationsError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-epct-notifications-error.tpl.htm'), //create html for notifications update fail\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n            }]\n\n        });\n\n    }        \n\n\n\n}\n","RenewalHistoryController.$inject = ['$scope', '$timeout', 'caseSelected', 'RenewalHistoryService']\n\nexport default function RenewalHistoryController($scope, $timeout, caseSelected, RenewalHistoryService) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n\n    $scope.promise.then(\n    \tfunction(){\n    \t\t$timeout(function(){\n    \t\t\tvm.renewal = $scope.$parent.renewalHistory;\t\n    \t\t}, 500)\n     \n    \t}\n\n    )\n\n}","ValidationController.$inject = ['caseSelected', '$scope', '$uibModal', '$state', '$timeout', '$q', 'ValidationService'];\n\nexport default function ValidationController(caseSelected, $scope, $uibModal, $state, $timeout, $q, ValidationService) {\n\n\tvar vm = this;\n\n    vm.checkStates = checkStates;\n    vm.submitValidationData = submitValidationData;\n    vm.stateSelection = stateSelection;\n    vm.requestNewQuote = requestNewQuote;\n    vm.submitPoaDocuments = submitPoaDocuments;\n    vm.patent = '';\n    vm.templates = [\n        { name: 'validationAvailable', url: require('html-loader!../html/validation/validation-available.tpl.htm')},\n        { name: 'quotePending', url: require('html-loader!../html/validation/validation-quote-pending.tpl.htm')},\n        { name: 'quoteProvided', url: require('html-loader!../html/validation/validation-quote-provided.tpl.htm')},\n        { name: 'paymentInProgress', url: require('html-loader!../html/validation/validation-payment-in-progress.tpl.htm')},\n        { name: 'poasProvided', url: require('html-loader!../html/validation/validation-poa-available.tpl.htm')},\n        { name: 'noPoasProvided', url: require('html-loader!../html/validation/validation-nopoas-required.tpl.htm')},\n        { name: 'workInProgress', url: require('html-loader!../html/validation/validation-wip.tpl.htm')},\n        { name: 'manual', url: require('html-loader!../html/validation/validation-manual.tpl.htm')},\n        { name: 'completed', url: require('html-loader!../html/validation/validation-completed.tpl.htm')}\n    ];\n\n    $scope.formData = {};\n    var validationAction;\n    var allState = [];\n    vm.validationInfo = {};\n    vm.domain = ppdomain;\n\n    function stateSelection(selection) {\n        $scope.selectionBoolean =  selection == 'De-select all' ? false : true;\n        for(var i = 0; 0 < allState.length; i++ ) {\n            if(allState[i] === undefined) { return; }\n            allState[i].selected = $scope.selectionBoolean;\n        }\n    }\n\n    function init() {\n\n        $scope.isChecked = true;\n        vm.patent = caseSelected; \n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n\n        var serviceStatusL = caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase();\n        if(caseSelected.p3sServicesWithFees[0].validationFeeUI !== null) {\n            var array = [];\n            allState = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates)\n        }\n        vm.activeTab = 0;\n\n        if(serviceStatusL == 'validation available') { //VALIDATION TEST DATA - REMOVE NotUsed\n            vm.validationTemplate = vm.templates[0].url;        \n        }\n        \n        if(serviceStatusL == 'preparing quote' || serviceStatusL == 'quote pending') {\n            vm.validationTemplate = vm.templates[1].url;        \n        }        \n\n        if(serviceStatusL == 'quote provided') {\n            vm.validationTemplate = vm.templates[2].url;        \n        }\n\n        if(serviceStatusL == 'payment in progress' || serviceStatusL == 'pa instructed') {\n            vm.validationTemplate = vm.templates[3].url;        \n        }\n\n        if(serviceStatusL == 'blank poas provided' || serviceStatusL == 'blank poas downloaded') { //VALIDATION TEST DATA - REMOVE NotUsed\n            var noPoasNeeded = allState.every(function(item){\n                return item.poaNeeded === false;\n            })            \n            caseSelected.postAddress = caseSelected.validationQuoteUI.poaPostalAddress.split(',');\n            vm.validationTemplate = vm.templates[4].url;        \n            \n        }                    \n\n        if(serviceStatusL == 'scanned poas received' || serviceStatusL == 'poas provided to pa' || serviceStatusL == 'paper documents received') { //VALIDATION TEST DATA - REMOVE NotUsed\n            \n            var noPoasNeeded = allState.every(function(item){\n                return item.poaNeeded === false;\n            })                   \n            if(noPoasNeeded) {\n                vm.validationTemplate = vm.templates[5].url;  \n            } else {\n                vm.validationTemplate = vm.templates[6].url;\n            }\n        }\n\n        if(serviceStatusL == 'completed') {\n            vm.validationTemplate = vm.templates[8].url;\n            var array = [];\n            vm.statesCompleted = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates);\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].saleType.toLowerCase() == 'offline') { //VALIDATION TEST DATA - REMOVE NotUsed\n            vm.validationTemplate = vm.templates[7].url;  \n        }\n\n        if(caseSelected.p3sServicesWithFees[0].validationFeeUI !== null) {\n            var array = [];\n            allState = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates)\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'validation available') {\n            ValidationService.fetchDesignatedStates(caseSelected.patentID)\n            .then(\n                function(response){\n                    vm.validationInfo = response;\n                    $scope.formData.corresdpondenceName = response.firstName +' ' + response.lastName;\n                    $scope.formData.corresdpondenceEmailaddress = response.emailaddress;\n                    $scope.formData.designatedStates = response.designatedStates;\n                    $scope.formData.extensionStates = response.extensionStates;\n                    $scope.formData.validationStates = response.validationStates;\n                    var array = [];\n                    allState = array.concat($scope.formData.designatedStates, $scope.formData.extensionStates, $scope.formData.validationStates);\n                }\n            )\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'preparing quote') { \n            ValidationService.fetchPreparedQuote(caseSelected.patentID)\n            .then(\n                function(response){\n                    vm.preparedQuote = response;\n                }\n            )\n\n        }\n\n        function addSignedPoaDoc(item) {\n            item.signedPoaDoc = '';\n            return item;\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'blank poas provided' || caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'blank poas downloaded') {\n            $scope.formData.designatedStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.designatedStates;\n            $scope.formData.extensionStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.extensionStates;\n            $scope.formData.validationStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.validationStates;   \n\n        }\n\n    }\n\n    init()\n\n    function requestNewQuote() {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.validation-confirm-deletion.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                this.confirmDeletion = function() {\n                    $uibModalInstance.close();\n                    ValidationService.deleteQuote(caseSelected.patentID)\n                    .then(\n                        function(response){\n                            $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n                        }\n                    )\n                }\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n        });\n\n    }\n\n    function removeCost(item) {\n        delete item.validationCost_EUR;\n        delete item.validationCost_USD;\n        if(!item.signedPoaDoc) { item.signedPoaDoc = null; };\n        return item;\n    }\n\n    function submitPoaDocuments(data) {\n\n        var formData = {};\n\n        var designatedMap = data.designatedStates.map(removeCost);\n        var extensionMap = data.extensionStates.map(removeCost);\n        var validationMap = data.validationStates.map(removeCost);\n        var allStatesMapped = designatedMap.concat(extensionMap, validationMap)\n\n        allStatesMapped = allStatesMapped.filter(function(item){\n            if(item.signedPoaDoc == null) { return false; }\n            return true;\n        })\n        .map(function(item){\n            var newObj = {};\n            newObj.stateCode = item.stateCode;\n            newObj.signedPoaDoc = item.signedPoaDoc;\n            return newObj;\n        })\n\n        var promiseArray = [];\n\n        for(var i = 0; i < allStatesMapped.length; i++) {\n            promiseArray.push(ValidationService.submitPoas(caseSelected.patentID, allStatesMapped[i]))\n        }\n\n        $q.all(promiseArray)\n        .then(\n            function(response){\n                ValidationService.poaUploadSuccessNotify(caseSelected.patentID)\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-poas-submitted.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            },\n            function(errResponse){\n\n                ValidationService.poaUploadFailNotify(caseSelected.patentID)\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-poas-submitted-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            }\n        )\n\n    }\n\n    function submitValidationData(data){\n\n        var formData = {};\n\n        var names = data.corresdpondenceName.split(' ');\n\n        data.designatedStates = data.designatedStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n        data.extensionStates = data.extensionStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n        data.validationStates = data.validationStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n\n        formData.patentID = caseSelected.patentID;\n        \n        formData.lastName = names.pop();\n        formData.firstName = names.toString().replace(/,/g, ' ');\n\n        formData.latestDateToRequestQuote = vm.validationInfo.latestDateToRequestQuote;\n        formData.latestDateToPurchaseQuote = vm.validationInfo.latestDateToPurchaseQuote;\n        formData.emailaddress = data.corresdpondenceEmailaddress;\n        formData.designatedStates = JSON.parse(angular.toJson(data.designatedStates));\n        formData.extensionStates = JSON.parse(angular.toJson(data.extensionStates));\n        formData.validationStates = JSON.parse(angular.toJson(data.validationStates));\n\n        ValidationService.requestQuote(formData)\n        .then(\n            function(response){\n\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-quote-requested.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            },\n            function(errResponse) {\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-quote-failed.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true})\n\n            }\n        )\n\n    }\n\n    function checkStates(item, index, type) {\n\n        for(var i = 0; 0 < allState.length; i++ ) {\n            if(allState[i] === undefined) { break; }\n            if(allState[i].selected === true) {\n                $scope.isChecked = true;\n                break;\n            }\n            $scope.isChecked = false;\n        }\n\n        if(type === undefined) { return };\n\n        var validateType = type+ 'States';\n\n        if(item === true) {\n            $scope.formData[validateType][index].selected = true;\n        } else {\n            $scope.formData[validateType][index].selected = false;\n        } \n\n\n    }\n\n}","FeeBreakDownController.$inject = ['caseSelected', '$scope', '$timeout'];\r\n\r\nexport default function FeeBreakDownController(caseSelected, $scope, $timeout) {\r\n\r\n    var vm = this;\r\n\r\n    vm.patent = caseSelected;\r\n    vm.setFees = setFees;\r\n    var loadFeeTimeout;\r\n    \r\n    $scope.$parent.promise\r\n    .then(\r\n        function(response){\r\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n            if($scope.$parent.availableServices.length) {            \r\n                loadFeeTimeout = $timeout(function() {\r\n                    setFees($scope.$parent.availableServices[0].action)\r\n                    vm.data = {};\r\n                    vm.data.availableAction = $scope.$parent.availableServices;\r\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action };\r\n                }, 10);\r\n            }\r\n\r\n        }\r\n    )\r\n\r\n    function feeUIAvailable(array) {\r\n\r\n        return array.some(function(o) {\r\n            return Object.keys(o).some(function(k){\r\n                return k.toLowerCase().indexOf('feeui') !== -1 && o[k] !== null;\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    function setFees(action) {\r\n\r\n        vm.availableFees = {};\r\n\r\n        if(feeUIAvailable(caseSelected.p3sServicesWithFees))\r\n\r\n        if(action == 'Euro-PCT') {\r\n            vm.displayForm1200 = true;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'Euro-PCT';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.form1200FeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.form1200FeeUI.fxRate;             \r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'renewal') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = true;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'renewal';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.renewalFeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.renewalFeeUI.fxRate;\r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'grant') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = true;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'grant';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.grantFeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.grantFeeUI.fxRate;\r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'validation') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = true;\r\n            var official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'validation';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.validationFeeUI;\r\n                if(fee.feeUI !== null) {\r\n                    fee.fxRate = fee.validationFeeUI.fxRate;\r\n                    fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                }\r\n                \r\n                return fee;\r\n            })           \r\n\r\n            vm.availableFees.official = official[0];\r\n\r\n            if(vm.availableFees.official.feeUI !== null) {\r\n                vm.availableFees.ppFeesUSD = Number(vm.availableFees.official.feeUI.processingFeeUSD + vm.availableFees.official.feeUI.expressFeeUSD + vm.availableFees.official.feeUI.urgentFeeUSD);\r\n                vm.availableFees.ppFeesEUR = Number(vm.availableFees.official.feeUI.processingFeeEUR + vm.availableFees.official.feeUI.expressFeeEUR + vm.availableFees.official.feeUI.urgentFeeEUR);\r\n            }\r\n\r\n            return;           \r\n\r\n        }\r\n\r\n        if(action !== 'validation') {        \r\n            vm.availableFees.ppFeesUSD = Number(vm.availableFees.official[0].feeUI.processingFeeUSD + vm.availableFees.official[0].feeUI.expressFeeUSD + vm.availableFees.official[0].feeUI.urgentFeeUSD);\r\n            vm.availableFees.ppFeesEUR = Number(vm.availableFees.official[0].feeUI.processingFeeEUR + vm.availableFees.official[0].feeUI.expressFeeEUR + vm.availableFees.official[0].feeUI.urgentFeeEUR);\r\n            vm.availableFees.savings = Number(Math.round((vm.availableFees.official[0].nextStageCostUSD - vm.availableFees.official[0].currentStageCostUSD) + 'e2') +'e-2');\r\n        }\r\n        \r\n    }\r\n\r\n    $scope.$on('$destroy', function(){\r\n        $timeout.cancel(loadFeeTimeout)\r\n    })\r\n\r\n}","import angular from 'angular';\n\nimport CasesRestService from '../portfolio/services/portfolio.cases.serv.js';\nimport Form1200Service from './services/case.form1200.serv.js';\nimport GrantService from './services/case.grant.serv.js';\nimport RemindersService from './services/case.reminders.serv.js';\nimport RenewalHistoryService from './services/case.renewal.serv.js';\nimport ValidationService from './services/case.validation.serv.js';\n\nimport ActiveTabService from '../../global/services/app.activeTab.serv.js';\nimport CoreService from '../../global/services/app.core.serv.js';\nimport ChunkDataService from '../../global/services/app.chunkData.serv.js';\n\nimport dynamic from '../../global/directives/dynamic.directive.js';\nimport validationDirectives from '../../global/directives/validations.directive.js';\n\nimport CaseOverviewController from './controllers/case.overview.controller';\nimport CostChartController from './controllers/case.costchart.controller';\nimport CaseDetailsController from './controllers/case.details.controller';\nimport Form1200GeneratedController from './controllers/case.form1200-generated.controller';\nimport Form1200ReadyController from './controllers/case.form1200-ready.controller';\nimport FxChartController from './controllers/case.fxchart.controller';\nimport GrantController from './controllers/case.grant.controller';\nimport RemindersController from './controllers/case.reminders.controller';\nimport RenewalHistoryController from './controllers/case.renewal-history.controller';\nimport ValidationController from './controllers/case.validation.controller';\nimport FeeBreakDownController from './controllers/case.fee-breakdown.controller';\n\n// import routing  from './case.routes';\n\nexport default angular.module('ppApp.caseoverview', [CasesRestService, Form1200Service, GrantService, RemindersService, RenewalHistoryService, ValidationService, ActiveTabService, CoreService, ChunkDataService, dynamic])\n  \t.controller('CaseOverviewController', CaseOverviewController)\n  \t.controller('CostChartController', CostChartController)\n  \t.controller('CaseDetailsController', CaseDetailsController)\n  \t.controller('Form1200GeneratedController', Form1200GeneratedController)\n  \t.controller('Form1200ReadyController', Form1200ReadyController)\n  \t.controller('FxChartController', FxChartController)\n  \t.controller('GrantController', GrantController)\n  \t.controller('RemindersController', RemindersController)\n  \t.controller('RenewalHistoryController', RenewalHistoryController)\n    .controller('ValidationController', ValidationController)\n    .controller('FeeBreakDownController', FeeBreakDownController)\n  \t.name;","export default angular.module('services.banktransfercommit-service', []).factory('BankTransferCommitService', BankTransferCommitService).name;\n\nBankTransferCommitService.$inject = ['$http', '$q', '$state'];\n\nfunction BankTransferCommitService($http, $q, $state){\n\n\tvar factory = {\n\t\tcommitTransfer: commitTransfer\n\t};\n\n\treturn factory;\n\n\tfunction commitTransfer(order) {\n\n\t\tvar deferred = $q.defer();\n\t\t$http.post(ppdomain+'rest-committed-banktransfer/', order)\n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error commmitting transacton. Error: ', errResponse)\n\t\t\t\tdeferred.reject(response.data)\n\t\t\t});\n\t\t\t\n\t\t\treturn deferred.promise;\n\n\t};\n}","export default angular.module('services.basket-service', []).factory('BasketService', BasketService).name;\n\nBasketService.$inject = ['$http', '$q'];\n\nfunction BasketService($http, $q){\n\n\tvar factory = {};\n\n\t\tvar REST_SERVICE_URI = ppdomain+'rest-basket/';\n\t\t\n\t\tfactory.fetchBasketPatents = function(ids) {\n\t\t\t\n\t\t\tvar deferred = $q.defer();\n\n\t\t\t$http.post(REST_SERVICE_URI, ids)\n\t\t\t.then(\n\t\t\t\tfunction(response){\n\t\t\t\t\tdeferred.resolve(response.data);\n\t\t\t\t},\n\t\t\t\tfunction(errResponse){\n\t\t\t\t\tdeferred.reject(errResponse);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn deferred.promise;\n\t\t\t\n\t\t};\n\n\treturn factory;\n\n}","BasketController.$inject = ['$rootScope'];\n\nexport default function BasketController($rootScope) {\n\n\tvar vm = this;\n\n}\n\n","BankTransferPrepController.$inject = ['BankTransferCommitService', '$state', '$scope', '$stateParams', '$uibModal', 'ngCart']\n\nexport default function BankTransferPrepController(BankTransferCommitService, $state, $scope, $stateParams, $uibModal, ngCart) {\n\n\tvar vm = this;\n\n\tvm.pageTitle = 'Confirm Order';\n\tvm.orderObj = $stateParams.orderObj;\n\tvm.details = $stateParams.details\n\tif(vm.orderObj == '') { //if page is refreshed when on bank prepration page\n\t\t$state.go('portfolio', {reload: true}); //direct user to patents\n\t} else {\n\n\t\tvm.details.patentNos = $stateParams.orderObj.basketItems;\n\t\tvm.orderObj.billingDetails = $stateParams.details.billingDetails;\n\n\t\tvm.openCancelTransModal = openCancelTransModal;\n\t\tvm.commitTransfer = commitTransfer;\t\n\n\t\tfunction openCancelTransModal() {\n\n\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\ttemplate: require('html-loader!../html/modals/modal.cancel-transaction.tpl.htm'),\n\t\t\t\tappendTo: undefined,\n\t\t\t\tcontrollerAs: '$ctrl',\n\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t  \t};\n\n\t\t\t\t  \tthis.cancelTrans = function () {\n\t\t\t\t  \t\tngCart.empty();\n\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t    \t$state.go('portfolio');\n\t\t\t\t  \t};\n\n\t\t\t\t}]\n\t\t\t});\n\n\t\t};\n\n\t\tfunction commitTransfer() {\n\n\t\t\tvm.orderObj.billingDetails = $stateParams.details.billingDetails;\n\t\t\tBankTransferCommitService.commitTransfer(vm.orderObj) //SERVICE HANDLES STATE.GO\n\t\t\t.then(\n\t            function(response){\n\t            \t$state.go('bank-transfer-success', {orderObj: response});\n\t            },\n\t            function(errResponse){\n\t            \tif(errResponse.status === 500) {\n\t\t\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\t\t\ttemplate: require('html-loader!../html/modals/modal.commit-error.tpl.htm'),\n\t\t\t\t\t\t\tappendTo: undefined,\n           \t\t\t\t\tcontrollerAs: '$ctrl',\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t\t\t\t    \t$state.go('portfolio', {reload: true})\n\t\t\t\t\t\t\t  \t};\n\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t            \tif(errResponse.status === 409) {\n\t\t\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\t\t\ttemplate: require('html-loader!../html/modals/modal.commit-error-price.tpl.htm'),\n\t\t\t\t\t\t\tappendTo: undefined,\n           \t\t\t\t\tcontrollerAs: '$ctrl',\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t\t\t\t    \t$state.go('portfolio', {reload: true})\t\t\t\t\t\t\t    \t\n\t\t\t\t\t\t\t  \t};\n\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t            }\n\t        );\n\t\t};\n\t}\n}","BankTransferSuccessController.$inject = ['$scope', '$stateParams']\n\nexport default function BankTransferSuccessController($scope, $stateParams) {\n\n\tvar vm = this;\n\n\tvm.pageTitle = 'Bank Transfer Details';\n\n\t$scope.orderObj = $stateParams.orderObj;\t\n\n}\n","import angular from 'angular';\n\nimport BankTransferCommit from './services/checkout.bank-transfer-commit.serv.js';\nimport BasketService from './services/checkout.basket.serv.js';\n\nimport BasketController from './controllers/checkout.basket.controller';\nimport BankTransferPrepController from './controllers/checkout.bank-transfer-prep.controller';\nimport BankTransferSuccessController from './controllers/checkout.bank-transfer-success.controller';\n\nexport default angular.module('ppApp.checkout', [BankTransferCommit, BasketService])\n\t.controller('BasketController', BasketController)\t\n\t.controller('BankTransferPrepController', BankTransferPrepController)\n\t.controller('BankTransferSuccessController', BankTransferSuccessController)\n\t.name","ForgotPasswordController.$inject = ['$state', '$rootScope','$http', '$scope', '$cookies', 'AuthorisationService', '$uibModal', 'Idle']\n\nexport default function ForgotPasswordController($state, $rootScope, $http, $scope, $cookies, AuthorisationService, $uibModal, Idle) {\n\n\tvar vm = this;\n\n\tvm.submitEmail = submitEmail;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();    \n\n\tfunction submitEmail(emailAddress) {\n\n\t\tvar params = {\n\t\t\temailAddress: emailAddress\n\t\t}\n\n\t\tAuthorisationService.SubmitForgottenEmail(params)\n\t\t.then(\n\t\t\tfunction(response){\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.forgot-password-success.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })\n                $state.go('login'); \n\t\t\t},\n\t\t\tfunction(errResponse){\n                vm.dataLoading = false;\n                $state.go($state.current, {}, {reload: true});\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.forgot-password-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })   \n\t\t\t}\n\t\t)\n\n\n\t}\n\n\n}","import zxcvbn from 'zxcvbn';\n\nResestPasswordController.$inject = ['$state', '$rootScope','$http', '$scope', '$cookies', '$uibModal', 'AuthorisationService', 'Idle']\n\nexport default function ResestPasswordController($state, $rootScope, $http, $scope, $cookies, $uibModal, AuthorisationService, Idle) {\n\n\tvar vm = this;\n\n\tvm.submitEmail = submitEmail;\n\n\tvm.formData = {};\n    vm.recap = {};\n    vm.recap.publicKey = '6LezdHEUAAAAABvniybP4wWGWWztRMQXT5r0_WMs';\n    vm.passwordUpdate = passwordUpdate;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();    \n  \n    function passwordUpdate(password) {\n\n        if(password !== undefined) {\n            if(vm.formData.password.length < 8){ //https://stackoverflow.com/questions/56314220/angularjs-minlength-validation-stop-characters-counter\n                $scope.resetPasswordForm.password.$setValidity('minlength', false);\n            } else{\n                $scope.resetPasswordForm.password.$setValidity('minlength', true);\n            }\n\n            if(vm.formData.password.length > 20){\n                $scope.resetPasswordForm.password.$setValidity('maxlength', false);\n            } else{\n                $scope.resetPasswordForm.password.$setValidity('maxlength', true);\n            }\n\n            vm.passwordStrength = zxcvbn(password);\n        }\n        \n    }\t\n\n\tfunction submitEmail(password) {\n        vm.dataLoading = true;\n\t\tvar params = {\n\t\t\tpassword: password\n\t\t}\n\n\t\tAuthorisationService.ResetPassword(params)\n\t\t.then(\n\t\t\tfunction(response){\n                vm.dataLoading = false;\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.reset-password-success.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })\n                $state.go('login'); \n\t\t\t},\n\t\t\tfunction(errResponse){\n                vm.dataLoading = false;\n                $state.go($state.current, {}, {reload: true});\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.reset-password-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })                \n\t\t\t}\n\t\t)\n\n\n\t}\n\n\n}","import angular from 'angular';\n\nimport AuthorisationService from '../login/services/authorisation.serv.js';\n\nimport ForgotPasswordController from './controllers/forgot-password.controller';\nimport ResetPasswordController from './controllers/reset-password.controller';\n\nexport default angular.module('ppApp.login', [AuthorisationService]) //import dashboard view controllers\n  \t.controller('ForgotPasswordController', ForgotPasswordController)\n  \t.controller('ResetPasswordController', ResetPasswordController)\n  \t.name;","LoginController.$inject = ['$state', '$rootScope','$http', '$scope', '$timeout', '$cookies', 'AuthorisationService', 'CoreService', 'Idle']\n\nexport default function LoginController($state, $rootScope, $http, $scope, $timeout, $cookies, AuthorisationService, CoreService, Idle) {\n\n    var vm = this;\n\n    vm.login = login;\n    vm.credentials = {};\n    vm.incorrectCredentials = false;\n    var dataLoadingTimeout;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();\n\n    function login(data) {\n\n        vm.dataLoading = true;\n\n        if(!Idle.running()) {\n            Idle.watch()\n        }\n\n        var params = {\n            j_username: vm.credentials.username,\n            j_password: vm.credentials.password\n        }\n\n        AuthorisationService.Login(params)\n        .then(\n            function(response){\n\n                dataLoadingTimeout = $timeout(function(){\n                    vm.dataLoading = false;\n                })\n\n                if(response.data.response === 'success') {\n                    AuthorisationService.SetCredentials(vm.credentials.username, vm.credentials.password)\n                    vm.incorrectCredentials = false;\n                    $state.go('dashboard', {})\n                } else {\n                    vm.incorrectCredentials = true;\n                }\n\n            }\n        )\n        // .then(\n        //     function(){\n        //         AuthorisationService.SetCredentials(vm.credentials.username, vm.credentials.password)\n        //         vm.incorrectCredentials = false;\n        //         $state.go('dashboard', {})\n\n        //     }\n        // )\n    };\n\n    var Base64 = {\n\n        keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\n        encode: function (input) {\n            var output = \"\";\n            var chr1, chr2, chr3 = \"\";\n            var enc1, enc2, enc3, enc4 = \"\";\n            var i = 0;\n\n            do {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    this.keyStr.charAt(enc1) +\n                    this.keyStr.charAt(enc2) +\n                    this.keyStr.charAt(enc3) +\n                    this.keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = \"\";\n                enc1 = enc2 = enc3 = enc4 = \"\";\n            } while (i < input.length);\n\n            return output;\n        },\n\n        decode: function (input) {\n            var output = \"\";\n            var chr1, chr2, chr3 = \"\";\n            var enc1, enc2, enc3, enc4 = \"\";\n            var i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n            if (base64test.exec(input)) {\n                window.alert(\"There were invalid base64 characters in the input text.\\n\" +\n                    \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\n                    \"Expect errors in decoding.\");\n            }\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n            do {\n                enc1 = this.keyStr.indexOf(input.charAt(i++));\n                enc2 = this.keyStr.indexOf(input.charAt(i++));\n                enc3 = this.keyStr.indexOf(input.charAt(i++));\n                enc4 = this.keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 != 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 != 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = \"\";\n                enc1 = enc2 = enc3 = enc4 = \"\";\n\n            } while (i < input.length);\n\n            return output;\n        }\n    };\n\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(dataLoadingTimeout)\n    })\n\n}","PortfolioController.$inject = ['$scope', '$state', '$stateParams','$rootScope', '$timeout', '$uibModal', '$mdPanel', '$mdDialog', '$mdMenu', 'SearchPatentService',  'CasesRestService', '$cookies'];\n\nexport default function PortfolioController($scope, $state, $stateParams, $rootScope, $timeout, $uibModal, $mdPanel, $mdDialog, $mdMenu, SearchPatentService, CasesRestService, $cookies) {\n\n    var vm = this;\n    $scope.promise = CasesRestService.fetchAllCases();\n    $scope.filter = {};\n    $scope.tooltip1 = true;\n    var displayHelpTimeout;\n    var panelRef;\n\n    function select(i) {\n        vm.selected = i;\n    }\n\n    select($stateParams.caseId)\n\n    function uniqueArray(array) {\n        return array.filter(function(item, pos, self) {\n            return self.indexOf(item) == pos;\n        })\n    }\n\n\n\n    function noSubFilter(obj) {\n        for (var key in obj) {\n            if (obj[key]) { //if one of the $scope.filter ($scope.filter) properties evaluates to true (is selected) return false \n                return false;\n            }\n        }\n        return true; //if no subfilters return true. This will result in all filtered data items being returned a true value\n    }\n\n    function checkArray(obj, service, prop) {\n        return service.some(function(item) { //if filter[curretStageColour][red]\n            return obj[prop][item[prop]] === true;\n        })\n    }\n\n    $scope.filterByPropertiesMatchingAND = function (data) { //all data sent from filter \n        var matchesAND = true; //set macthes to true (default)\n\n        for (var obj in $scope.filter) { //$scope.filter is populated by $scope.filter within the panel controller below. Scope filter properties are initiated from front-end. currentStageColour/serviceType\n\n            if( $scope.filter.hasOwnProperty(obj) ) {\n                if (noSubFilter($scope.filter[obj])) continue; //Check if there are any sub filter options with the value of true, if so, break from loop to return value of true\n                if (!checkArray($scope.filter, data.p3sServices, obj)) { //If the property from the data matches the property from $scope.filter ($scope.filter) return false. It will not turn up in the table\n                    matchesAND = false;\n                    break; //break from the loop and return matchesAND which would now return false\n                }\n                \n            }\n        }\n        return matchesAND;\n    }; \n\n    function updatePortfolioData() {\n        CasesRestService.fetchAllCases()\n        .then(function(response) {\n            $scope.portfolioData = response;            \n            vm.recentlyAdded.push(response.slice(-1).pop())\n        })        \n\n    }\n\n    $scope.promise //assigned promise to scope so child state can also resolve this promise to invoke functions\n    .then(function(response) {\n        if ($scope.$$destroyed) throw \"Scope destroyed\";\n        return response;\n    })\n    .then(\n        function(response){\n            vm.portfolioLoaded = true;\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n            var portfolioLoaded = $cookies.get('portfolioLoaded');\n\n\n\n            if($scope.firstTime && portfolioLoaded == undefined) {\n                displayHelpTimeout = $timeout(function(){\n                    $scope.displayCaseHelp = true;\n                    $scope.displayPortfolioHelp = true\n                    $cookies.put('portfolioLoaded', 'hasloaded'); \n                }, 5000)\n            } else {\n                $scope.displayCaseHelp = false;\n                $scope.displayPortfolioHelp = false\n            }\n\n            if(!response.length) {\n                vm.noPatents = true;\n            }\n\n            response.forEach(function(data){\n                if(data.clientRef == '') {\n                    data.clientRef = '[No Client Reference Provided]'\n                }\n            })\n\n            vm.select = select;\n            vm.selected = 0;\n            vm.stateParams = $stateParams.patentId; \n            vm.rowSelect = rowSelect;\n            vm.chipOptions = [];\n            vm.showFilter = showFilter;\n            vm.showAddPatent = showAddPatent;\n            \n            vm.sortBy = sortBy;\n            $scope.selectedChip = selectedChip;\n            $scope.portfolioData = response;\n            $scope.displayFirstHelp = displayFirstHelp;\n\n            vm.propertyName = 'ep_ApplicationNumber';\n            vm.reverse = false;\n\n            function displayFirstHelp(help, value) {\n                if(help === 'portfolio') {\n                    $scope.displayPortfolioHelp = value;\n                } else {\n                    $scope.displayCaseHelp = value;\n                }\n            }\n\n            function rowSelect(event, patent){\n\n                vm.stateParams = $stateParams;\n                if($(event.target).hasClass('generateForm1200')) {\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, form1200generate: 1, prepareGrant: 0}, {notify: false})\n                }\n\n                if($(event.target).hasClass('prepareGrant')) {\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, prepareGrant: 1, form1200generate: 0}, {notify: false})\n                }        \n\n                if(!$(event.target).hasClass('cartbtn') && !$(event.target).hasClass('generateForm1200') && !$(event.target).hasClass('prepareGrant')) {\n                    var id = ($($(event.currentTarget).find('a'))); //find the anchor tag within row (patentApplicationNumber)\n                    var patentId = id[0].id; //gets data from data-id\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, form1200generate: null})\n                }\n\n            };\n\n            function sortBy(propertyName) {\n                vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;\n                vm.propertyName = propertyName;\n            };\n\n            function selectedChip(prop, value, cat) {\n                if(cat == 'Euro-PCT') {cat = 'epct'}\n                $scope.filter[cat][prop] = false;\n            }\n\n            function showFilter(mdMenu, $event) {\n         \n                mdMenu.open($event)\n                $scope.categories = ['serviceType', 'currentStageColour'];     \n\n                //return items to filter panel\n                $scope.getItems = function (obj, array) { //obj is cat currentStageColour or serviceType\n                    return (array || []).map(function (w) {\n                        return w.p3sServices[0][obj]; //select property in p3sservices \n                    }).filter(function (w, idx, arr) {\n                        if (typeof w === 'undefined') {\n                            return false;\n                        }\n                        return arr.indexOf(w) === idx;\n                    });\n                };\n\n                $scope.updateFiltered = function(prop, value, cat) {\n                    if(value === true) {\n                        if(cat === 'epct') {cat = 'Euro-PCT'};\n                        vm.chipOptions.push({cat: cat, value: value, prop: prop})\n                    } \n                    if(value === false) {\n                        var index = vm.chipOptions.indexOf(cat);\n                        vm.chipOptions.splice(index, 1);\n                    }\n                }\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();                            \n                }\n\n            } //showFilter function end\n\n            function showAddPatent($event) {\n\n                var panelPosition = $mdPanel.newPanelPosition()\n                    .absolute()\n                    .center();\n\n                var config = {\n                    attachTo: angular.element(document.body),\n                    controller: ['mdPanelRef', '$scope', function(mdPanelRef, $scope) {\n\n                        $scope.recently = {\n                            added: []\n                        }\n                        $scope.foundPatent = false;\n\n                        $scope.findPatent = function(patentNo) {\n                            $scope.loadingPatent = true;\n                            SearchPatentService.findPatent(patentNo)\n                            .then(\n                                function(response) {\n                                    $scope.foundPatent = response.data;\n                                    $scope.loadingPatent = false;\n                                    $scope.error = false;\n                                    var patentJson = angular.toJson(response)\n                                },\n                                function(errResponse) {\n                                    console.error('Error finding patent. Error message : ', errResponse)\n                                    $scope.queriedPatent = false;\n                                    $scope.loadingPatent = false;\n                                    $scope.error = true;\n                                    // $state.go('search-patent', {}, {reload: false});\n                                    if(errResponse.status == 412) { //already added patent\n                                        $scope.searchError = 'It looks like we\\'ve already added Patent Application '+patentNo+' in to the system.  You should be able to find it in the List Patents page using the search boxes.';\n                                    } \n                                    if(errResponse.status == 409){ //incorrect check digit\n                                        $scope.searchError = 'It looks like the provided check digit differs from the check digit found at the European Patent Register. Please make sure the check digit is correct and try again.';\n                                    }\n                                    if(errResponse.status == 400 || errResponse.status == 404) { //incorrect syntax\n                                        $scope.searchError = 'We\\'ve not been able to find that patent in the European Patent Register. Please enter an application number such as EP18123456.2';\n                                    }\n\n\n                                }\n                            )\n\n                        }  \n\n                        $scope.openConfirmModal = function(patent) {\n                            var modalInstance = $uibModal.open({\n                                template: require('html-loader!../html/modals/modal.confirm-found-patent.tpl.htm'),\n                                appendTo: undefined,\n                                controllerAs: '$ctrl',\n                                controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                                    this.addPatent = function () {\n                                        vm.addingPatent = true;\n                                        $uibModalInstance.close();\n                                        CasesRestService.savePatent(patent)\n                                        .then(\n                                            function(response){\n                                                \n                                                updatePortfolioData();\n\n                                                var match = response.find(function(item){\n                                                    return item.ep_ApplicationNumber == patent.ep_ApplicationNumber;\n                                                });\n\n                                                $scope.recently.added.push(match);\n                                                $scope.foundPatent = false;\n                                                $scope.searchPatent = '';\n\n\n                                            },\n                                            function(errResponse){\n                                                console.error('Error while saving Patent. Error: ', errResponse);\n                                            }\n                                        )\n\n                                    };\n\n                                 \n\n                                    this.dismissModal = function () {\n                                        $uibModalInstance.close();\n                                    };\n\n                                    this.cancelAdd = function() {\n                                        $uibModalInstance.close();                  \n                                    }\n\n                                }]\n                            })\n                        }\n\n                        $scope.$on('$destroy', function(){\n                            $timeout.cancel(toPatentTimeout)\n                        })                        \n\n                    }],\n                    controllerAs: '$ctrl',\n                    position: panelPosition,\n                    // animation: panelAnimation,\n                    hasBackdrop: true,\n                    targetEvent: $event,\n                    template: require('html-loader!../html/add-patent.tpl.htm'),\n                    clickOutsideToClose: true,\n                    escapeToClose: true,\n                    focusOnOpen: true\n                };\n                $mdPanel.open(config)\n                .then(\n                    function(result) {\n                        panelRef = result;\n                    },\n                    function(error){\n                        console.error('Error occured when opening panel: ',error)\n                    }\n                );\n\n            } //showAddPatentPanel end]\n\n        }\n    )\n    \n    $scope.$on('$destroy', function(){\n        if(panelRef) {\n            panelRef.close()\n        }\n    })\n\n    //SEARCH ADD PATENT\n\n}","export default angular.module('services.search-patent-service', []).factory('SearchPatentService', SearchPatentService).name;\n\nSearchPatentService.$inject = ['$http', '$q']; \n\nfunction SearchPatentService($http, $q) {\n\n    var REST_SEARCH_PATENT_SERVICE_URI = ppdomain+'rest-search-patents/';\n\n    var factory = {\n        findPatent: findPatent\n    };\n\n    return factory;\n\n    function findPatent(patentNo) {\n\n        var deferred= $q.defer();\n        \n        var patentItem = REST_SEARCH_PATENT_SERVICE_URI + patentNo;\n        \n        $http.get(patentItem)\n            .then(\n                function(response){\n                deferred.resolve(response);\n            }, function(errResponse) {\n                switch(errResponse.status) {\n                    case 400:\n                        errResponse.data = 'We\\'ve not been able to find that patent in the European Patent Register. Please enter an application number such as EP18123456.2';\n                    break;\n                    case 404:\n                        errResponse.data = 'We’ve not been able to find Patent Application '+patentNo+' in the European Patent Register. Please check the number you’re entering and try again.';\n                    break;\n                    case 204:\n                        errResponse.data = 'It looks like we\\'ve already added Patent Application '+patentNo+' in to the system. You should be able to find it in the List Patents page using the search boxes.';\n                    break;\n                    default:\n                        errResponse.data = null;\n                }\n                deferred.reject(errResponse);\n\n                // console.error('$Http Error 'errResponse.status': Unable to fetch  information from EPO')\n            }\n        )\n\n\n        return deferred.promise;\n\n    };\n}","import angular from 'angular';\n\nimport CasesRestService from './services/portfolio.cases.serv.js';\nimport SearchPatentService from './services/portfolio.search-patent.serv.js';\n\nimport PortfolioController from './controllers/portfolio.controller';\n\nexport default angular.module('ppApp.portfolio', [CasesRestService, SearchPatentService]) //import dashboard view controllers\n  \t.controller('PortfolioController', PortfolioController)\n  \t.name;","export default angular.module('services.uploadavatar-service', []).factory('UploadAvatarService', UploadAvatarService).name;\n\nUploadAvatarService.$inject = ['$http', '$q'];\n\nfunction UploadAvatarService($http, $q) {\n\n    var factory = {\n        uploadAvatar: uploadAvatar\n    }\n\n    return factory\n\n\n    function uploadAvatar(data) { \n\n        var deferred = $q.defer()\n\n        var config = { headers: {'Content-Type': undefined} };\n\n        $http.post('../upload-avatar/', data, config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                 deferred.reject(response.data)\n            }\n        )\n\n        return deferred.promise;\n\n    };\n};\n","ProfileController.$inject = ['$state', '$rootScope', '$scope', '$timeout', '$uibModal', '$http', 'UploadAvatarService', 'ProfileService', 'TimezoneService',]\n\nexport default function ProfileController($state, $rootScope, $scope, $timeout, $uibModal, $http, UploadAvatarService, ProfileService, TimezoneService) {\n\n    var vm = this;\n\n    $scope.newPassword = '';\n    vm.updateTimezone = updateTimezone;\n    vm.updateUser = updateUser;\n    vm.openAvatarModal = openAvatarModal;\n\n    vm.$onInit = function() {\n\n        TimezoneService.fetchUsaTimeZones()\n        .then(\n            function(response){\n                vm.ustimezones = response;\n            }\n        )\n            \n        ProfileService.fetchUser()\n        .then(\n            function(response){\n                vm.user = response;\n            }\n        )\n\n        ProfileService.listUsers()\n        .then(\n            function(response){\n\n                for (var i=0; i < response.length; i++) {\n                    response[i].index = i + 1;\n                }\n\n                vm.companyUsers = response;\n\n                var userCol = (response.length / 2) + 1;\n                var newArr = [];\n\n                function chunk(arr, size) {\n                    for (var i=0; i < arr.length; i+=size) {\n                        newArr.push(arr.slice(i, i+size));\n                    }\n                    return newArr;\n                }\n\n                vm.chunkedData = {\n                    chunk: chunk(vm.companyUsers, userCol)\n                }\n\n            },\n            function(errResponse){\n                console.error('Error listing users. Error: ', errResponse);\n            }\n        );\n       \n    }; //init end\n\n    function openAvatarModal() {\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.upload-avatar-pic.tpl.htm'),\n            appendTo: undefined,\n            controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope){\n\n                $scope.uploadImg = true;\n                $scope.avatarImgUploaded = false;\n\n                $scope.dismissModal = function() {\n                    $uibModalInstance.close()\n                }\n\n                $scope.cropped = {\n                    source: ''\n                }\n\n                $scope.imgSelected = false;\n\n                function dataURItoBlob(dataURI) { //In computer science Base64 is a group of binary-to-text encoding schemes that represent binary data in an ASCII string format \n                    var binary = atob(dataURI.split(',')[1]);\n                    var array = [];\n                    for(var i = 0; i < binary.length; i++) {\n                        array.push(binary.charCodeAt(i));\n                    }\n                    return new Blob([new Uint8Array(array)], {type: 'image/jpeg '});\n                }\n\n                $scope.uploadAvatar = function() {\n\n                    var blob = dataURItoBlob($scope.cropped.image);\n                    var formData = new FormData();\n                    formData.append('image', blob);\n                    UploadAvatarService.uploadAvatar(formData) \n                    .then(\n                        function(response){\n                            $scope.avatarImgUploaded = true;\n                            $rootScope.$emit('refreshAvatar',function(){\n                            })\n                            $state.reload();\n                        },\n                        function(errResponse){\n                            console.error('Error : unable to upload new image')\n                        }\n                    )\n                         \n                }\n\n            }]\n        })\n    } //open avatar end\n\n    function updateTimezone(item) {\n       vm.user.business.timezone = item;\n    }   \n\n    function updateUser(user, p) {\n\n        user = vm.user;\n\n        if (p !== '' || p !== undefined) {\n            user.newPassword = p;\n        }\n\n        ProfileService.updateUser(user)\n        .then(\n            function(response){  \n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.update-profile-success.tpl.htm'),\n                    appendTo: undefined,\n                    controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {\n\n                        $scope.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                })\n            },\n            function(errResponse){\n                console.error('Error updating user. Error : ', errResponse)\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.update-profile-error.tpl.htm'),\n                    appendTo: undefined,\n                    controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {\n\n                        $scope.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                })                \n            }\n        \n        )\n\n    }; //update user end\n}","import angular from 'angular';\n\nimport ProfileService from './services/profile.details.serv.js';\nimport UploadAvatarService from './services/profile.upload-avatar.serv.js';\n\nimport validationDirectives from '../../global/directives/validations.directive.js';\n\nimport TimezoneService from '../../global/services/app.timezone.serv.js';\n\nimport ProfileController from './controllers/profile.controller';\n\nexport default angular.module('ppApp.profile', [ProfileService, UploadAvatarService, TimezoneService, validationDirectives]) //import dashboard view controllers\n  \t.controller('ProfileController', ProfileController)\n  \t.name;","TransactionsController.$inject = ['TransactionService', '$scope', '$cookies', '$q', '$state', '$timeout'];\n\nexport default function TransactionsController(TransactionService, $scope, $cookies,  $q, $state, $timeout) {\n\n    var vm = this;\n\n    vm.transactions = null;\n    var displayHelpTimeout;\n    $scope.filter = {};    \n\n    function noSubFilter(obj) {\n        for (var key in obj) {\n            if (obj[key]) { //if one of the $scope.filter ($scope.filter) properties evaluates to true (is selected) return false \n                return false;\n            }\n        }\n        return true; //if no subfilters return true. This will result in all filtered data items being returned a true value\n    }\n\n    function checkArray(obj, service, prop) {\n        return service.some(function(item) { //if filter[curretStageColour][red]\n            return obj[prop][item[prop]] === true;\n        })\n    }\n\n    $scope.filterByPropertiesMatchingAND = function (data) { //all data sent from filter \n        var matchesAND = true; //set macthes to true (default)\n        for (var obj in $scope.filter) { //$scope.filter is populated by $scope.filter within the panel controller below. Scope filter properties are initiated from front-end. currentStageColour/serviceType\n            if( $scope.filter.hasOwnProperty(obj) ) {\n                if (noSubFilter($scope.filter[obj])) continue; //Check if there are any sub filter options with the value of true, if so, break from loop to return value of true\n                if (!$scope.filter[obj][data[obj]]) { //If the property from the data matches the property from $scope.filter ($scope.filter) return false. It will not turn up in the table\n                    matchesAND = false;\n                    break; //break from the loop and return matchesAND which would now return false\n                }\n                \n            }\n        }\n        return matchesAND;\n    };\n\n    $scope.promise = TransactionService.fetchAllTransactions()\n    $scope.promise.then(\n        function(response){\n\n            $scope.transactions = response;\n            var transactionLoaded = $cookies.get('transactionLoaded');\n            if($scope.firstTime && transactionLoaded == undefined) {\n                displayHelpTimeout = $timeout(function(){\n                    $scope.displayTransactionHelp = true;\n                    $cookies.put('transactionLoaded', 'hasloaded'); \n                }, 5000)\n            } else {\n                $scope.displayTransactionHelp = false\n            }\n            \n            vm.sortBy = sortBy;\n            vm.rowSelect = rowSelect;\n            vm.select = select;\n            vm.showFilter = showFilter;\n            vm.selectedSortType = 'p3S_TransRef';   \n            vm.updateFiltered = updateFiltered;\n            vm.chipOptions = [];                        \n            $scope.selectedChip = selectedChip;\n\n            $scope.transactionsLoaded = true;\n\n            function sortBy(propertyName) {\n                vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;\n                vm.propertyName = propertyName;\n            };\n\n            function select(i) {\n                vm.selected = i;\n            }            \n\n            function rowSelect(event, transaction){\n                $state.go('transactions.modal.transaction-item', {transId: transaction.p3s_TransRef})\n            };          \n\n            function selectedChip(prop, value, cat) {\n                $scope.filter[cat][prop] = false;\n            }\n\n            function updateFiltered(prop, value, cat) {\n                if(value === true) {\n                    vm.chipOptions.push({cat: cat, value: value, prop: prop})\n                } \n                if(value === false) {\n                    var index = vm.chipOptions.indexOf(cat);\n                    vm.chipOptions.splice(index, 1);\n                }\n            }\n\n            function showFilter(mdMenu, $event) {\n                mdMenu.open($event)\n                $scope.categories = ['transTypeUI', 'latestTransStatus'];     \n\n                //return items to filter panel\n                $scope.getItems = function (obj, array) { //obj is cat currentStageColour or serviceType\n                    return (array || []).map(function (w) {\n                        return w[obj]; //select property in p3sservices \n                    }).filter(function (w, idx, arr) {\n                        if (typeof w === 'undefined') {\n                            return false;\n                        }\n                        return arr.indexOf(w) === idx;\n                    });\n                };\n\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();                            \n                }\n\n            } //showFilter function end         \n\n        }\n\n    )\n\n\n}","TransactionItemController.$inject = ['$scope', '$state', '$timeout', '$stateParams'];\n\nexport default function TransactionItemController($scope, $state, $timeout, $stateParams) {\n\n\tvar vm = this;\n\tvm.setTab = setTab;\n\tvm.closeOverview = closeOverview;\n\tvm.caseoverview_tab = 'details';\n\n\tvm.transStatus = [\n\t\t{\n\t\t\tstatus: 'Initiated', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'You\\'ve checked out your basket on the Patent Place, and we\\'re now doing our work in the background. We will now send the request over to our payment partners Moneycorp, requesting that they book the currency exchange, and to expect a payment from you.',\n\t\t\tposition: 'bottom-left'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'Awaiting Funds', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have booked the currency exchange, and are now waiting for your payment. They\\'ll expect the funds by the date and time specified, and for it to have the correct reference on it so that the payment can be matched to the transation.',\n\t\t\tposition: 'bottom-left'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'Funds Received', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have received your payment and they\\'re now completing the foreign exchange. This happens the day after your funds were expected by MoneyCorp.',\n\t\t\tposition: 'bottom-left'\n\t\t},\n\t\t{\n\t\t\tstatus: 'Funds Sent', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have completed the currency exchange and the Euros have been sent to the European Patent Office.',\n\t\t\tposition: 'bottom-right'\n\t\t},\n\t\t{\n\t\t\tstatus: 'EPO Received', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'We\\'ve had confirmation that the funds have been received by the EPO.',\n\t\t\tposition: 'bottom-right'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'EPO Instructed', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'Everything is in place, and we’ve instructed the EPO.',\n\t\t\tposition: 'bottom-right'\n\t\t},\n\t\t{\n\t\t\tstatus: 'Completed', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'We\\'ve had confirmation that your transaction has been completed. You can download a copy of the invoice or any relevant certificate below.',\n\t\t\tposition: 'bottom-right'\n\t\t}\n\t];\t\n\n    function closeOverview() {\n        $state.go('transactions', {}, {reload: false})\n    }\n\n    function setTab(tab) {\n        vm.caseoverview_tab = tab;\n    }\n\n\n\n    //assigned promise to scope so child state can also resolve this promise to invoke functions\n \t$scope.promise.then(function(response){\n\n            vm.transactionItem = response.find(function(transaction){\n                return transaction.p3s_TransRef == $stateParams.transId;\n            })\n\n\t\t\tvm.transactionItem.serviceUIs.map(function(item, index){\n\t\t\t\t// item.transItemStatus = transItemStatus(isValidation, transactionItem.latestTransStatus, vm.transactionItem.hasFailed);\n\n\t\t\t\tif(item.renewalFeeUI) { \n\t\t\t\t\titem.serviceType = 'renewal'; \n\t\t\t\t\titem.serviceFeeUI = item.renewalFeeUI; \n\t\t\t\t}\n\t\t\t\tif(item.form1200FeeUI) { \n\t\t\t\t\titem.serviceType = 'Euro-PCT'; \n\t\t\t\t\titem.serviceFeeUI = item.form1200FeeUI; \n\t\t\t\t}\n\t\t\t\tif(item.grantFeeUI) { \n\t\t\t\t\titem.serviceType = 'grant'; \n\t\t\t\t\titem.serviceFeeUI = item.grantFeeUI; \n\t\t\t\t}\n\n\t\t\t\tif(item.validationFeeUI) { \n\t\t\t\t\tif(vm.transStatus[3].status !== 'Processing Funds') {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar obj1 = {\n\t\t\t\t\t\t\tstatus: 'Processing Funds', \n\t\t\t\t\t\t\tactive: false, \n\t\t\t\t\t\t\tcomplete: false,\n\t\t\t\t\t\t\ttip: 'We are currently processing your funds',\n\t\t\t\t\t\t\tposition: 'bottom-right'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar obj2 = {\n\t\t\t\t\t\t\tstatus: 'Processing', \n\t\t\t\t\t\t\tactive: false, \n\t\t\t\t\t\t\tcomplete: false,\n\t\t\t\t\t\t\ttip: 'We are in the process of gathering and forwarding on the required documents to the appropriate European associates',\n\t\t\t\t\t\t\tposition: 'bottom-right'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvm.transStatus.splice(3, 3);\n\t\t\t\t\t\tvm.transStatus.splice(3, 0, obj1);\n\t\t\t\t\t\tvm.transStatus.splice(4, 0, obj2);\n\t\t\t\t\t}\n\n\t\t\t\t\titem.serviceType = 'validation'; \n\t\t\t\t\titem.serviceFeeUI = item.validationFeeUI;\n\t\t\t\t\titem.allStates = item.validationFeeUI.designatedStates.concat(item.validationFeeUI.validationStates, item.validationFeeUI.extensionStates)\n\t\t\t\t}\n\n\t\t\t\treturn item;\n\n\t\t\t})\n\n\n\t\t\tfunction checkProgress() { //function to add statuses complete or active to view so it provides proggress bar to user\n\n\t\t\t\tvar statusIndex;\n\n\t\t\t\tvm.transStatus.forEach(function(data, index){\n\t\t\t\t\tif(data.status == vm.transactionItem.latestTransStatus) {\n\t\t\t\t\t\tstatusIndex = index; //find current active status\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tfor(var i=0; i <= statusIndex; i++){\n\t\t\t\t\tvm.transStatus[i].complete = true; //change property complete to true to all items\n\t\t\t\t\tif(vm.transactionItem.latestTransStatus == vm.transStatus[i].status) { //until it matches current tran statues\n\t\t\t\t\t\tvm.transStatus[i].active = true; // change active property value to true\n\t\t\t\t\t\tif(vm.transactionItem.latestTransStatus !== 'Completed') {\n\t\t\t\t\t\t\tvm.transStatus[i].complete = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvm.transStatus[i].active = false;\n\t\t\t\t\t\t\tvm.transStatus[i].complete = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tvm.checkProgress = checkProgress;\n\t\t\tvm.transactionLoaded = true;\n\n\t})\n\t\t\n\n\n\n\n}","TransactionDetailsController.$inject = ['$scope', '$state', '$timeout', '$stateParams'];\n\nexport default function TransactionDetailsController($scope, $state, $timeout, $stateParams) {\n\n\n\tvar vm = this;\n\tvar transStatusArray = ['Initiated', 'Awaiting Funds', 'Funds Received', 'Funds Sent', 'EPO Received', 'EPO Instructed', 'Completed'];\n\tvar transStatusValidationArray = ['Initiated', 'Awaiting Funds', 'Processing Funds', 'Processing', 'Completed'];\t\t\n\t\n\t$scope.promise.then(function(response){\n        vm.transactionItem = response.find(function(transaction){\n            return transaction.p3s_TransRef == $stateParams.transId;\n        })\n\t    var isValidation = vm.transactionItem.serviceUIs.some(function(item){\n\t        return item.newType == 'Validation' ? true : false;\n\t    })\n\t    vm.transactionItem.serviceUIs.map(function(item, index){\n\t\t\titem.transItemStatus = transItemStatus(isValidation, vm.transactionItem.latestTransStatus, vm.transactionItem.hasFailed);\n\t    })\n\t})\n\t\n\n    function transItemStatus(val, status, failed) {\n\n    \tif(failed) {\n    \t\treturn 'Failed'\n    \t} else {\n\t    \t\n\t    \tvar index;\n\t    \tif(val === true) {\n\t    \t\tindex = transStatusValidationArray.indexOf(status);\n\t\t    \tif(index < 3) {\n\t\t    \t\treturn 'Payment in progress'\n\t\t    \t} else {\n\t\t    \t\treturn status;\n\t\t    \t}    \t\t\n\t    \t} else {\n\t    \t\tindex = transStatusArray.indexOf(status);\n\t\t    \tif(index < 5) {\n\t\t    \t\treturn 'Payment in progress'\n\t\t    \t} else {\n\t\t    \t\treturn status;\n\t\t    \t}        \t\t\n\t    \t}\n\n    \t}\n\n    }\n\n}","import angular from 'angular';\n\nimport TransactionsService from './services/transactions.serv.js';\n\nimport TransactionsController from './controllers/transactions.controller';\nimport TransactionItemController from './controllers/transaction-item.controller';\nimport TransactionDetailsController from './controllers/transaction-item.details.controller';\n\nexport default angular.module('ppApp.transactions', [TransactionsService]) //import dashboard view controllers\n  \t.controller('TransactionsController', TransactionsController)\n  \t.controller('TransactionItemController', TransactionItemController)\n  \t.controller('TransactionDetailsController', TransactionDetailsController)\n  \t.name;","module.exports = __webpack_public_path__ + \"4aa1e7fd5f8cbb59593a247b612c6642.jpg\";","module.exports = __webpack_public_path__ + \"d1eb303440aa99c2f000ff57c900df14.jpg\";"],"sourceRoot":""}