{"version":3,"sources":["webpack:///./app/features/case/services/case.form1200.serv.js","webpack:///./app/features/case/services/case.grant.serv.js","webpack:///./app/features/case/services/case.reminders.serv.js","webpack:///./app/features/case/services/case.renewal.serv.js","webpack:///./app/features/case/services/case.validation.serv.js","webpack:///./app/global/services/app.activeTab.serv.js","webpack:///./app/global/services/app.chunkData.serv.js","webpack:///./app/features/case/controllers/case.overview.controller.js","webpack:///./app/features/case/controllers/case.costchart.controller.js","webpack:///./app/features/case/controllers/case.details.controller.js","webpack:///./app/features/case/controllers/case.form1200-generated.controller.js","webpack:///./app/features/case/controllers/case.form1200-ready.controller.js","webpack:///./app/features/case/controllers/case.fxchart.controller.js","webpack:///./app/features/case/controllers/case.grant.controller.js","webpack:///./app/features/case/controllers/case.reminders.controller.js","webpack:///./app/features/case/controllers/case.renewal-history.controller.js","webpack:///./app/features/case/controllers/case.validation.controller.js","webpack:///./app/features/case/controllers/case.fee-breakdown.controller.js","webpack:///./app/features/case/index.js","webpack:///./app/features/checkout/services/checkout.bank-transfer-commit.serv.js","webpack:///./app/features/checkout/services/checkout.basket.serv.js","webpack:///./app/features/checkout/controllers/checkout.basket.controller.js","webpack:///./app/features/checkout/controllers/checkout.bank-transfer-prep.controller.js","webpack:///./app/features/checkout/controllers/checkout.bank-transfer-success.controller.js","webpack:///./app/features/checkout/index.js","webpack:///./app/features/forgot-password/controllers/forgot-password.controller.js","webpack:///./app/features/forgot-password/controllers/reset-password.controller.js","webpack:///./app/features/forgot-password/index.js","webpack:///./app/features/login/controllers/login.controller.js","webpack:///./app/features/portfolio/controllers/portfolio.controller.js","webpack:///./app/features/portfolio/services/portfolio.search-patent.serv.js","webpack:///./app/features/portfolio/index.js","webpack:///./app/features/profile/services/profile.upload-avatar.serv.js","webpack:///./app/features/profile/controllers/profile.controller.js","webpack:///./app/features/profile/index.js","webpack:///./app/features/transactions/controllers/transactions.controller.js","webpack:///./app/features/transactions/controllers/transaction-item.controller.js","webpack:///./app/features/transactions/controllers/transaction-item.details.controller.js","webpack:///./app/features/transactions/index.js","webpack:///./assets/imgs/app-images/008-payable.jpg","webpack:///./assets/imgs/app-images/016-total-payable.jpg"],"names":["case_form1200_serv","angular","module","service","Form1200Service","$http","$q","Upload","ngCart","factory","fetchQuestions","id","deferred","defer","get","ppdomain","then","response","resolve","data","errResponse","console","error","reject","promise","submitForm1200","config","post","setQuestions","questions","getQuestions","inhibitForm1200","reason","params","patent_id","failure_reason","generateForm1200","deleteApplication","patent","actionIds","p3sServicesWithFees","map","r","actionID","cartItems","getItems","parseInt","_id","found","find","indexOf","removeItemById","delete","patentID","editApplication","put","updateNotifications","list","$inject","case_grant_serv","GrantService","$timeout","submitGrant","inhibitGrant","unhibitGrant","deleteGrant","representativeCheck","case_reminders_serv","RemindersService","url","case_renewal_serv","RenewalHistoryService","fetchHistory","case_validation_serv","ValidationService","fetchDesignatedStates","deleteQuote","requestQuote","formData","fetchPreparedQuote","submitPoas","upload","stateCode","signedPoaDoc","arrayKey","poaUploadSuccessNotify","poaUploadFailNotify","app_activeTab_serv","ActiveTabService","setTab","index","getTab","app_chunkData_serv","chunkData","arr","size","newArr","i","length","push","slice","CaseOverviewController","caseSelected","$scope","$state","$stateParams","CasesRestService","$uibModal","$mdDialog","chartTimeout","vm","this","deletePatent","go","reload","status","open","template","__webpack_require__","appendTo","undefined","controllerAs","controller","$uibModalInstance","dismissModal","close","deletePatentError","confirmDeletePatent","cancelDeletion","dismiss","refreshChart","evt","document","createEvent","initUIEvent","window","dispatchEvent","portfolioLoaded","tab","caseoverview_tab","checkAvailableAction","services","actionsAvailable","some","item","saleType","serviceStatus","processView","chart","validationNotification","notInProgress","activeLeft","openMenu","$mdMenu","ev","showOptions","closeCaseoverview","renewalHistory","form1200generate","prepareGrant","validationQuote","phoneNumber","ppDetails","partnerPhone","displayRenewalHistoryTab","serviceType","noReminders","every","availableServices","filter","o","k","action","type","urgent","isUrgentAttention","forEach","obj","displayForm1200Tab","displayGrantTab","displayValidationTab","$on","cancel","CostChartController","ca","costTimeout","setData","barChartData","info","barOptions","barColor","barChartArr","label","barData","tip","hasOwnProperty","includes","y","x","reverse","key","values","$parent","availableAction","selectedAction","tooltip","hideDelay","contentGenerator","d","height","showControls","showValues","showLegend","stacked","duration","margin","left","right","multibar","groupSpacing","xAxis","axisLabel","tickFormat","d3","time","format","Date","axisLabelDistance","showMaxMin","rotateYLabel","orient","css","transform","yAxis","CaseDetailsController","updatePatent","updatePatentSuccess","Form1200GeneratedController","confirmDeleteApplication","confirm","deleteApplicationReq","timeout","deleteApplicationSuccess","deleteApplicationError","Form1200ReadyController","$compile","initiateForm1200","extensionStatesUI","validationStatesUI","clientRef","showOptionalQuestion","additionalDocuments","isYear3RenewalDue","form1200Template","templates","name","questionsParam","cancel1200","ok","chkValidStates","chkExtStates","checkError","question","value","message","title","innerHTML","submitForm1200Data","formDataSubmitted","uploadRequired","property","transformRequest","identity","excessobject","excessdocs","yes","append","JSON","stringify","totalClaims","validate","amendments","numAdditionalCopies","amended","amendedDoc","isYear3RenewalPaying","excessclaims","no","proceedMsgAmend","caseId","excessClaimsCheck","excessClaimsDue","notPayingExcess","amendmentsMade","amendedOptions","uploadAmended","displayAmendedUpload","test","epctStage","FxChartController","fxTimeout","lineChart","lineDataArr","fxChartData","dayData","currentOfficialFeeUSD","str","split","shift","date","getTime","lineData","lineOptions","top","bottom","clipEdge","useInteractiveGuideline","staggerLabels","rotateLabels","ticks","width","tickValues","tickSubdivide","tickSize","tickPadding","domain","range","keyFormatter","useVoronoi","showXAxis","showYAxis","GrantController","$cookies","initiateGrantOrder","representativeRequired","grantTemplate","highestPoint","uninhibitGrantConfirm","uninhibitGrant","inhibitGrantConfirm","headers","Content-Type","translations","frenchTranslation","germanTranslation","isExcessClaims","feePayable_016","totalClaimsAmountPayable","isExcessPages","totalPagesAmountPayable","numPagesPaid","cookieExp","setDate","getDate","attempts","Number","excessClaims","excessPages","excessPagesDue","grantStage","RemindersController","$rootScope","ChunkDataService","CoreService","ui","updatingNotifications","updateNotificationsError","displayNotifications","notificationUi","notificationUrl","toBlueOrNotToBlue","colors","notifications","fetchNotificationUi","phaseNotifications","$broadcast","phase","costbandcolor","toLowerCase","activeTab","idx","RenewalHistoryController","ValidationController","checkStates","allState","selected","isChecked","validateType","designatedStates","filtered","extensionStates","lastName","names","pop","firstName","toString","replace","latestDateToPurchaseQuote","validationInfo","emailaddress","corresdpondenceEmailaddress","parse","toJson","validationStates","stateSelection","selectionBoolean","selection","requestNewQuote","confirmDeletion","submitPoaDocuments","designatedMap","removeCost","extensionMap","validationMap","allStatesMapped","newObj","promiseArray","all","validationCost_EUR","validationCost_USD","serviceStatusL","array","concat","validationFeeUI","validationTemplate","noPoasNeeded","poaNeeded","postAddress","validationQuoteUI","poaPostalAddress","statesCompleted","preparedQuote","init","FeeBreakDownController","loadFeeTimeout","setFees","availableFees","Object","keys","feeUIAvailable","displayForm1200","displayRenewal","displayGrant","displayValidation","official","fee","feeUI","form1200FeeUI","savings","Math","round","nextStageCostUSD","currentStageCostUSD","fxRate","renewalFeeUI","ppFeesUSD","processingFeeUSD","expressFeeUSD","urgentFeeUSD","ppFeesEUR","processingFeeEUR","expressFeeEUR","urgentFeeEUR","./app/features/checkout/index.js","__webpack_exports__","checkout_bank_transfer_commit_serv","BankTransferCommitService","order","checkout_basket_serv","BasketService","fetchBasketPatents","ids","REST_SERVICE_URI","BasketController","BankTransferPrepController","pageTitle","details","patentNos","orderObj","basketItems","billingDetails","openCancelTransModal","cancelTrans","empty","commitTransfer","angular_default","a","./app/features/forgot-password/index.js","n","submitEmail","emailAddress","current","Idle","unwatch","ForgotPasswordController","main","ResestPasswordController","AuthorisationService","password","dataLoading","ResetPassword","recap","publicKey","passwordUpdate","resetPasswordForm","$setValidity","passwordStrength","main_default","authorisation_serv","./app/features/login/index.js","LoginController","dataLoadingTimeout","login","watch","j_username","credentials","username","Login","SetCredentials","incorrectCredentials","app_core_serv","./app/features/portfolio/controllers/portfolio.controller.js","$","PortfolioController","$mdPanel","SearchPatentService","select","checkArray","prop","updatePortfolioData","fetchAllCases","recentlyAdded","filterByPropertiesMatchingAND","noSubFilter","p3sServices","matchesAND","$$destroyed","firstTime","displayCaseHelp","displayPortfolioHelp","rowSelect","event","stateParams","target","hasClass","notify","currentTarget","chipOptions","showFilter","mdMenu","$event","w","updateFiltered","cat","splice","closeDialog","hide","showAddPatent","panelPosition","newPanelPosition","absolute","center","attachTo","element","body","recently","added","findPatent","patentNo","loadingPatent","foundPatent","queriedPatent","searchError","$location","$anchorScroll","addPatent","addingPatent","match","ep_ApplicationNumber","searchPatent","toPatentTimeout","propertyName","selectedChip","displayFirstHelp","help","panelRef","call","./app/features/portfolio/index.js","node_modules_angular","portfolio_cases_serv","portfolio_search_patent_serv","REST_SEARCH_PATENT_SERVICE_URI","portfolio_controller","profile_details_serv","profile_upload_avatar_serv","profile_upload_avatar_serv_UploadAvatarService","app_timezone_serv","ProfileController","UploadAvatarService","ProfileService","TimezoneService","newPassword","updateTimezone","user","business","timezone","p","openAvatarModal","uploadImg","avatarImgUploaded","source","imgSelected","uploadAvatar","blob","binary","atob","dataURI","dataURItoBlob","cropped","image","$emit","userProfileForm","fetchUsaTimeZones","ustimezones","fetchUser","listUsers","companyUsers","userCol","chunkedData","chunk","validations_directive","./app/features/transactions/index.js","transactions_serv","TransactionsController","TransactionService","transactions","displayTransactionHelp","fetchAllTransactions","sortBy","transaction","categories","selectedSortType","TransactionItemController","closeOverview","transStatus","active","complete","position","transactionItem","p3s_TransRef","transId","serviceUIs","serviceFeeUI","grantFeeUI","allStates","latestTransStatus","statusIndex","transactionLoaded","TransactionDetailsController","transStatusArray","transStatusValidationArray","isValidation","failed","val"],"mappings":"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","file":"index.45396f754a3841c150b5.js","sourcesContent":["export default angular.module('services.form1200-service', []).service('Form1200Service', Form1200Service).name;\n\nForm1200Service.$inject = ['$http', '$q', 'Upload', 'ngCart'];\n\nfunction Form1200Service($http, $q, Upload, ngCart) {\n\n    var factory = {\n        fetchQuestions: fetchQuestions,\n        submitForm1200: submitForm1200,\n        setQuestions: setQuestions,\n        questions: '',\n        getQuestions: getQuestions,\n        inhibitForm1200: inhibitForm1200,\n        generateForm1200: generateForm1200,\n        deleteApplication: deleteApplication,\n        editApplication: editApplication,\n        updateNotifications: updateNotifications        \n    }\n\n    function inhibitForm1200(id, reason) {\n\n        var deferred = $q.defer();\n\n        var config = {\n            params: {patent_id: id, failure_reason: reason}\n        }\n\n        $http.get(ppdomain+'rest-reject-form1200/', config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to inhibit form1200. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function fetchQuestions(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-start-form1200/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to fetch questions. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function submitForm1200(data, config) {\n\n        var deferred = $q.defer();\n\n        $http.post(ppdomain+'rest-form1200/', data, config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to submit form1200. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function setQuestions(data){\n\n        factory.questions = data;\n\n    }\n\n    function getQuestions() {\n        return factory.questions;\n    }\n\n    function generateForm1200(data) {\n\n        var deferred = $q.defer();\n\n        $http.post(ppdomain+'rest-form1200/'+data)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function updateNotifications(id, list) {\n\n        var deferred = $q.defer()\n\n        $http.put(ppdomain+'rest-epct-notifications/'+id, list)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }        \n\n    function deleteApplication(patent) {\n            \n        var deferred = $q.defer()\n\n        var actionIds = patent.p3sServicesWithFees.map(function(r){\n            return r.actionID;\n        })\n\n        var cartItems = ngCart.getItems().map(function(r){\n            return parseInt(r._id);\n        })\n\n        var found = actionIds.find(function(r) {\n            return cartItems.indexOf(r) >= 0;\n        })      \n\n        if(found) {\n            ngCart.removeItemById(found, true)\n        }\n\n        $http.delete(ppdomain+'rest-form1200/'+patent.patentID)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function editApplication(id) {\n            \n        var deferred = $q.defer()  \n\n        $http.put(ppdomain+'rest-form1200/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }       \n\n    return factory;\n\n}","export default angular.module('services.grant-service', []).factory('GrantService', GrantService).name;\n\nGrantService.$inject = ['$http', '$q', '$timeout', 'ngCart'];\n\nfunction GrantService($http, $q, $timeout, ngCart){\n\n    var factory = {\n        submitGrant: submitGrant,\n        inhibitGrant: inhibitGrant,\n        unhibitGrant: unhibitGrant,\n        setQuestions: setQuestions,\n        getQuestions: getQuestions,\n        deleteGrant: deleteGrant,\n        representativeCheck: representativeCheck\n    }\n\n\n    function unhibitGrant(patent) { //for manual processing items\n\n        $http.delete(ppdomain+'rest-inhibit-grant/'+patent.patentID)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to reset grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function inhibitGrant(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-inhibit-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable create grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }\n\n    function deleteGrant(patent) {\n\n        var deferred = $q.defer();\n\n        var actionIds = patent.p3sServicesWithFees.map(function(r){\n            return r.actionID;\n        })\n\n        var cartItems = ngCart.getItems().map(function(r){\n            return parseInt(r._id);\n        })\n\n        var found = actionIds.find(function(r) {\n            return cartItems.indexOf(r) >= 0;\n        })      \n\n        if(found) {\n            ngCart.removeItemById(found, true)\n        }        \n\n        $http.delete(ppdomain+'rest-grant/'+patent.patentID)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to reset grant order. Error response:', errResponse);\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function submitGrant(data, config) {\n\n        var deferred = $q.defer();\n\n       $http.post(ppdomain+'rest-grant/', data, config)\n       .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to submit grant data. Error response:', errResponse);\n                deferred.reject(errResponse)\n            }\n        )\n\n        return deferred.promise;\n\n    }\n\n    function setQuestions(data){\n\n        factory.questions = data;\n\n    }\n\n    function getQuestions() {\n        return factory.questions;\n    }    \n\n    function representativeCheck(id) {\n        \n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-start-grant/'+id)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                console.error('Error: Unable to fetch conditional boolean value to display first question')\n                deferred.reject(response.data)\n            }\n        )\n\n        return deferred.promise\n\n    }\n\n    return factory;\n\n}","export default angular.module('services.reminders-service', []).factory('RemindersService', RemindersService).name;\n\nRemindersService.$inject = ['$q', '$http'];\n\nfunction RemindersService($q, $http) {\n\n    var factory = {\n        updateNotifications: updateNotifications\n    }\n\n    function updateNotifications(id, list, url) {\n\n        var deferred = $q.defer()\n\n        $http.put(ppdomain+url+id, list)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                deferred.reject(errResponse.data)\n            }\n        )\n\n        return deferred.promise;\n    }        \n\n    return factory;\n\n}","export default angular.module('services.renewal-service', []).service('RenewalHistoryService', RenewalHistoryService).name;\n\nRenewalHistoryService.$inject = ['$http', '$q'];\n\nfunction RenewalHistoryService($http, $q) {\n\n    var factory = {\n        fetchHistory: fetchHistory\n    }\n\n    function fetchHistory(id) {\n\n        var deferred = $q.defer();\n\n        $http.get(ppdomain+'rest-renewal-history/'+id)\n        .then(\n            function(response) {\n                deferred.resolve(response.data);\n            },\n            function(errResponse){\n                console.error('Error while fetching renewal history');\n                deferred.reject(errResponse.data);\n            }\n        );\n\n        return deferred.promise;\n\n    };\n\n    return factory;\n\n}","export default angular.module('services.validation-service', []).factory('ValidationService', ValidationService).name;\n\nValidationService.$inject = ['$http', '$q', 'Upload'];\n\nfunction ValidationService($http, $q, Upload) {\n\n\tvar factory = {\n\t\tfetchDesignatedStates: fetchDesignatedStates,\n\t\tdeleteQuote: deleteQuote,\n\t\trequestQuote: requestQuote,\n\t\tfetchPreparedQuote: fetchPreparedQuote,\n\t\tsubmitPoas: submitPoas,\n\t\tpoaUploadSuccessNotify: poaUploadSuccessNotify,\n\t\tpoaUploadFailNotify: poaUploadFailNotify\n\t}\n\n\tfunction poaUploadSuccessNotify(id) {\n\t\t$http.post(ppdomain+'rest-validation-uploadPOACompleted/'+id)\n\t}\n\n\tfunction poaUploadFailNotify(id) {\n\t\t$http.post(ppdomain+'rest-validation-uploadPOAFailed/'+id)\n\t}\t\n\n\n\tfunction submitPoas(id, data) {\n\n\t\tvar deferred = $q.defer();\n\n        Upload.upload({\n            url: ppdomain+'rest-validation-uploadPOA/',\n            data:{ \n                patentID: id,\n                stateCode: data.stateCode,\n                signedPoaDoc: data.signedPoaDoc\n            },\n            arrayKey: ''\n        }).then(function (response) {\n            deferred.resolve(response)\n\n        }, function (errResponse) {\n        \tconsole.error('Error submiting poas. Error: ', errResponse)\n            deferred.reject(errResponse)\n        });\n\n\t\treturn deferred.promise;\n\n\t}\t\n\n\n\tfunction fetchDesignatedStates(id) {\n\n\t\tvar deferred = $q.defer()\n\n\t\t$http.get(ppdomain+'rest-validation-quote-request/'+id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\n\n\tfunction requestQuote(formData) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.post(ppdomain+'rest-validation-quote-request/', formData) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\n\n\tfunction fetchPreparedQuote(id) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.get(ppdomain+'rest-validation-quote/'+ id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service fetchPreparedQuote : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\t\t\n\n\tfunction deleteQuote(id) {\n\n\t\tvar deferred = $q.defer();\n\n\t\t$http.delete(ppdomain+'rest-validation-quote/'+ id) //VALIDATION TEST DATA \n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error returning validation service deleteQuote : ', errResponse)\n\t\t\t\tdeferred.reject(errResponse)\n\t\t\t}\t\n\t\t)\n\n\t\treturn deferred.promise;\n\n\t}\t\n\n\treturn factory;\n\n}","export default angular.module('services.activetab-service', []).service('ActiveTabService', ActiveTabService).name;\n\nActiveTabService.$inject = ['$q', '$http'];\n\nfunction ActiveTabService($q, $http) {\n\n    var factory = {\n        setTab: setTab,\n        getTab: 0\n    }\n\n    function setTab(index) {\n        factory.getTab = index;\n    }\n\n    return factory;\n\n}","export default angular.module('services.chunkdata-service', []).factory('ChunkDataService', ChunkDataService).name;\n\nfunction ChunkDataService() {\n\n\treturn {\n\n\t\tchunkData: function(arr, size) {\n\n\t    \tvar newArr = [];\n\n    \t\tfor (var i=0; i < arr.length; i+=size) {\n        \t\tnewArr.push(arr.slice(i, i+size));\n        \t}\n\n        \treturn newArr;\n\t    \t\n\t\t}\n\n\t}\n\n}","CaseOverviewController.$inject = ['caseSelected', '$scope', '$state', '$stateParams', '$timeout', 'CasesRestService', '$uibModal', 'RenewalHistoryService', 'ActiveTabService', '$mdDialog', 'ngCart']\n\nexport default function CaseOverviewController(caseSelected, $scope, $state, $stateParams, $timeout, CasesRestService, $uibModal, RenewalHistoryService, ActiveTabService, $mdDialog, ngCart) {\n\n    var vm = this;\n\n    vm.confirmDeletePatent = confirmDeletePatent;\n    vm.deletePatent = deletePatent;\n    vm.refreshChart = refreshChart;\n\n    vm.portfolioLoaded = false;\n    vm.setTab = setTab;\n    vm.checkAvailableAction = checkAvailableAction;\n    vm.processView = processView\n    vm.openMenu = openMenu;\n    $scope.notInProgress = true;\n    $scope.caseoverview_tab = 'details';\n    $scope.showOptions = false;\n    $scope.activeLeft = 0;\n    $scope.closeCaseoverview = closeCaseoverview;\n    $scope.renewalHistory = null;\n\n    var chartTimeout;\n    var originatorEv;\n\n    function processView(tab, index, chart) {\n        if((tab == 'reminders' && $scope.validationNotification) || (tab == 'costchart' && $scope.validationNotification) || (tab == 'fxchart' && $scope.validationNotification)) { return; }\n        if(!$scope.notInProgress || tab == 'reminders' || tab == 'details') {\n            vm.setTab(tab)\n            $scope.activeLeft = index;\n            if(chart !== undefined) {\n                vm.refreshChart()\n            }\n        }\n    }\n\n    function openMenu($mdMenu, ev) {\n        originatorEv = ev;\n        $mdMenu.open(ev);\n    };\n\n    function init() {\n\n        if($stateParams.form1200generate === 1) {\n            $scope.activeLeft = 2;\n            $scope.caseoverview_tab = 'form1200';\n            ActiveTabService.setTab(0);\n        }\n\n        if($stateParams.prepareGrant === 1) {\n            $scope.activeLeft = 4;\n            $scope.caseoverview_tab = 'grantandpublishing';\n            ActiveTabService.setTab(0);\n        }\n\n        if($stateParams.validationQuote === 1) {\n            $scope.activeLeft = 8;\n            $scope.caseoverview_tab = 'validation';\n            ActiveTabService.setTab(0);\n        }        \n\n        $scope.promise.then(\n            function(){\n                $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n                vm.patent = caseSelected;\n                vm.portfolioLoaded = true;\n                RenewalHistoryService.fetchHistory(caseSelected.patentID) //needs to be invoked outside of availableServices. A service wont be available even if there is renewal history\n                .then(\n                    function(response){\n                        $scope.renewalHistory = response;\n                        if(response.length > 0) {\n                           vm.displayRenewalHistoryTab = true;\n                           return;\n                        }\n                        vm.displayRenewalHistoryTab = false;\n                    }\n                )\n\n                $scope.validationNotification = caseSelected.p3sServicesWithFees.some(function(item){\n                    return item.serviceType == 'validation';\n                })\n\n                $scope.noReminders = caseSelected.p3sServicesWithFees.some(function(item){\n                    return item.saleType == 'Not In Progress' && item.serviceStatus == 'NotUsed';\n                })\n                 \n                $scope.notInProgress = caseSelected.p3sServicesWithFees.every(function(item){\n                    return (item.saleType == 'Not In Progress' && item.serviceType !== 'validation' && item.serviceStatus !== 'Completed')|| (item.serviceType == 'validation' && (item.serviceStatus == 'Validation available' || item.serviceStatus == 'Preparing quote')) || (item.saleType == 'Offline' && item.serviceType == 'validation');\n                })\n\n                $scope.availableServices = caseSelected.p3sServicesWithFees.filter(function(o){\n                    return o.saleType !== 'Not In Progress' || (o.saleType == 'Not In Progress' && o.serviceType == 'validation' && o.serviceStatus == 'Completed');\n                }).map(function(k, index){\n                    if(k.serviceType == 'epct') { k.serviceType = 'Euro-PCT' }\n                    return {id: index, action: k.serviceType, status: k.serviceStatus, type: k.saleType, urgent: k.isUrgentAttention}\n                })\n\n                $scope.availableServices.forEach(function(obj){\n  \n                    if(obj.type == 'Not In Progress' && obj.action !== 'validation' && obj.status !== 'Completed') { return; }\n\n                    if(obj.action == 'Euro-PCT') {\n                        vm.displayForm1200Tab = true;\n                    }\n\n                    if(obj.action == 'grant') {\n                        // if(obj.status == 'Grant available' || obj.status == 'Grant saved' || obj.status == 'Manual processing' || obj.status == 'Payment in progress' || obj.status == 'EPO instructed' ) {\n                            vm.displayGrantTab = true;\n                        // }\n                    }\n\n                    if(obj.action == 'validation') {\n                        vm.displayValidationTab = true;\n                    }\n                })\n\n\n            }\n        )\n\n    }\n\n    init()\n\n    function refreshChart (){\n        chartTimeout = $timeout(function(){  \n            var evt = document.createEvent('UIEvents');\n            evt.initUIEvent('resize', true, false, window, 0);\n            window.dispatchEvent(evt);\n        }, 300)\n    }\n\n    function setTab(tab) {\n        $scope.caseoverview_tab = tab;\n    }\n\n    function closeCaseoverview() {\n        $state.go('portfolio', {}, {reload: false})\n    }\n\n    function confirmDeletePatent(id) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.confirm-delete-patent.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n                \n                this.deletePatent = function() {\n                    deletePatent(id);\n                    $timeout(function() {\n                        $uibModalInstance.close();\n                    }, 300);\n                };\n\n                this.cancelDeletion = function() {\n                    $uibModalInstance.dismiss('cancel');\n                };\n\n            }]\n        });\n    };\n\n    function deletePatent(patent){\n\n        var actionIds = patent.p3sServicesWithFees.map(function(r){\n            return r.actionID;\n        })\n\n        var cartItems = ngCart.getItems().map(function(r){\n            return parseInt(r._id);\n        })\n\n        var found = actionIds.find(function(r) {\n            return cartItems.indexOf(r) >= 0;\n        })      \n\n        if(found) {\n            ngCart.removeItemById(found, true)\n        }\n\n        \n\n        CasesRestService.deletePatent(patent.patentID)\n        .then(\n            function(response){\n                $state.go('portfolio', {}, {reload: true})\n            },\n            function(errResponse){\n                deletePatentError(errResponse);\n            }\n        );\n    };\n\n    function deletePatentError(errResponse) {\n\n        if(errResponse.status === 304) {\n            var modalInstance = $uibModal.open({\n                template: require('html-loader!../html/modals/modal.delete-patent-error-trans.tpl.htm'),\n                appendTo: undefined,\n                controllerAs: '$ctrl',\n                controller: ['$uibModalInstance', function($uibModalInstance) {\n\n                    // vm.updatePatent(id); DONT THINK IS NEEDED\n\n                    this.dismissModal = function () {\n                        $uibModalInstance.close();\n                    };\n                }]\n            });\n        } else {\n            var modalInstance = $uibModal.open({\n                template: require('html-loader!../html/modals/modal.delete-patent-error.tpl.htm'),\n                appendTo: undefined,\n                controllerAs: '$ctrl',\n                controller: ['$uibModalInstance', function($uibModalInstance) {\n\n                    // vm.updatePatent(id); DONT THINK IS NEEDED\n\n                    this.dismissModal = function () {\n                        $uibModalInstance.close();\n                    };\n                }]\n            });\n        }\n\n    }\n\n    function checkAvailableAction(services) {\n        vm.actionsAvailable = services.some(function(item){\n            return item.saleType === 'Online' || item.saleType === 'Offline' || (item.saleType === 'In Progress' && item.serviceStatus !== 'Preparing quote');\n        })\n    }\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(chartTimeout);\n    })\n\n\n    \n}","CostChartController.$inject = ['caseSelected', 'ca','$scope', '$timeout']\n\nexport default function CostChartController(caseSelected, ca, $scope, $timeout) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n    vm.setData = setData;\n    vm.barData = null;\n    var costTimeout;\n\n    $scope.$parent.promise\n    .then(\n        function(response){\n\n            if(response.length > 0 && $scope.$parent.availableServices.length) {\n                costTimeout = $timeout(function(){\n\n                    vm.data = {};\n                    vm.data.availableAction = $scope.$parent.availableServices;\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action };\n\n                    if(ca !== undefined || typeof ca !== 'undefined') {\n             \n                        vm.barOptions = {\n                            chart: {\n                                type: 'multiBarHorizontalChart',\n                                barColor: [],\n                                tooltip: {\n                                    hideDelay: 0,\n                                    contentGenerator: function(d) {\n                                        var str = '<div style=\"font-weight:bold; margin:auto; text-align:center;\">' +d.data.tip +'</div>';\n                                        return str;\n                                    }\n                                },                \n                                height: 350,\n                                showControls: false,\n                                showValues: true,\n                                showLegend: false,\n                                stacked: true,\n                                duration: 500,\n                                margin: {\n                                    left: 90,\n                                    right: 10\n                                },\n                                x: function(d){\n                                    return d.x;\n                                },\n                                y: function(d){\n                                    return d.y;\n                                },\n                                multibar: {\n                                    groupSpacing: 0.4\n                                },\n                                xAxis: {\n                                    axisLabel: 'Date',\n                                    tickFormat: function(d) {\n                                        return d3.time.format('%x')(new Date(d))\n                                    },\n                                    axisLabelDistance: 25,                         \n                                    showMaxMin: false,\n                                    rotateYLabel: true, orient: 'left', css:{ 'transform':'rotate(45deg)' }\n                                },\n                                yAxis: {\n                                    axisLabel: 'Cost',\n                                    tickFormat: function(d){\n                                        return d3.format('.02f')(d);\n                                    },       \n                                    showMaxMin: false\n                                }\n                            }\n                        } //barOptions end\n\n                    }   \n\n                    setData(vm.data.selectedAction.action)\n                })\n               \n            } //outer if condition\n        }\n    )\n\n\n    function setData(type) {\n\n        if(type === undefined || typeof type === 'undefined') {\n            return;\n        }\n\n        var barChartData = ca.filter(function(item){\n            if(item.info == 'epct') { item.info = 'Euro-PCT' }\n            return item.info === type;\n        }).map(function(data){\n            return data.data;\n        })\n\n        if(type == 'renewal') {\n            vm.barOptions.chart.barColor = [\"#3c3c3b\", \"#0097ce\", \"#e30613\", \"#f9b233\", \"#53ab58\"];\n        }\n\n        if(type == 'Euro-PCT' || type == 'grant') {\n\n            vm.barOptions.chart.barColor = [\"#e30613\", \"#f9b233\", \"#53ab58\"];\n        }     \n\n        var barChartArr = [], label = [], barData = [], tip = [];;\n\n        var objIndex = 0;\n\n        for(var item in barChartData[0]) {\n            if(barChartData[0].hasOwnProperty(item)) {\n                if((item.includes('StartDate')) && (!item.includes('UI'))) {\n                    label.push(barChartData[0][item]);\n                }\n\n                if((item.includes('StartDateUI'))) {\n                    tip.push(barChartData[0][item]);\n                }\n\n                if(item.includes('Cost') && barChartData[0][item] !== null) {\n                    barData.push(barChartData[0][item]);\n                }\n            }\n        }\n      \n        for (var i = 0; label.length && i < barData.length; i++) {\n            barChartArr[i] = {'y': barData[i], 'x':label[i], 'tip':tip[i]}; //pairs the items from two arrays into a single array in the new array\n        }\n\n        barChartArr.reverse();\n\n        vm.barData = [\n            {\n                'key': 'Cost',\n                'values': barChartArr\n            }\n        ]\n    }\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(costTimeout)\n    })\n\n}","CaseDetailsController.$inject = ['caseSelected', '$scope', '$state', 'CasesRestService', '$uibModal']\n\nexport default function CaseDetailsController(caseSelected, $scope, $state, CasesRestService, $uibModal) {\n\n\tvar vm = this;\n\n\tvm.patent = caseSelected;\n    vm.updatePatent = updatePatent;    \n\n    function updatePatentSuccess() {\n\n        $state.reload();\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-patent-success.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n        \n    }\n\n    function updatePatentError() {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-patent-error.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n    function updatePatent(patent) {\n\n        CasesRestService.updatePatent(patent, patent.patentID)\n        .then(\n            function(response){\n                updatePatentSuccess();\n            },\n            function(errResponse){\n                updatePatentError();\n            }\n        )\n\n    };\n\n\n}","Form1200GeneratedController.$inject = ['$scope', '$state', 'Form1200Service', '$timeout', '$uibModal'];\n\nexport default function Form1200GeneratedController($scope, $state, Form1200Service, $timeout, $uibModal) {\n\n    var vm = this;\n\n\n    function init() {\n\n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n        $scope.patent = $scope.$parent.patent\n        $scope.confirmDeleteApplication = confirmDeleteApplication;\n        $scope.deleteApplicationReq = false;\n\n    }\n\n    init()\n\n    function confirmDeleteApplication(id) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.confirm-delete-epct-application-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.confirm = function() {\n                    deleteApplication($scope.patent)\n                    $uibModalInstance.close();\n                }\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                    \n                };\n               \n            }]\n\n        });      \n\n    }\n\n    function deleteApplication(patent) {\n        $scope.deleteApplicationReq = true;\n        Form1200Service.deleteApplication(patent)\n        .then(\n            function(response){\n                deleteApplicationSuccess();\n            },\n            function(errResponse){\n                deleteApplicationError(errResponse);\n            }\n        )\n\n    }\n\n    function deleteApplicationSuccess() {\n\n        $scope.deleteApplicationReq = true;\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.delete-epct-application-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                    \n                };\n                var timeout = $timeout(function() {\n                    $state.reload(); //go to patent info on successful deletion                    \n                }, 200);\n\n                $scope.$on('$destroy', function(){\n                    $timeout.cancel(timeout)\n                })\n               \n            }]\n\n        });\n    }\n\n    function deleteApplicationError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.delete-epct-application-error.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n    function editApplicationError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.edit-epct-application-error.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n\n            }]\n\n        });\n\n    }\n\n\n}","Form1200ReadyController.$inject = ['caseSelected', '$scope', '$state', '$timeout', '$compile', '$uibModal', 'Form1200Service', 'ActiveTabService'];\r\n\r\nexport default function Form1200ReadyController(caseSelected, $scope, $state, $timeout, $compile, $uibModal, Form1200Service, ActiveTabService) {\r\n\r\n    var vm = this;\r\n\r\n\r\n    vm.patent = caseSelected;\r\n    $scope.patent = caseSelected; //needed for generated controller\r\n    vm.initiateForm1200 = initiateForm1200;\r\n    \r\n    vm.templates = [ //compiled with help of dynamic directive\r\n        { name: 'form1200intro.html', url: require('html-loader!../html/europct/europct.form1200.intro.tpl.htm')},\r\n        { name: 'form1200questions.html', url: require('html-loader!../html/europct/europct.form1200.questionnaire.tpl.htm')},\r\n        { name: 'form1200generated.html', url: require('html-loader!../html/europct/europct.form1200.generated.tpl.htm')},\r\n        { name: 'form1200manual.html', url: require('html-loader!../html/europct/europct.form1200.manual.tpl.htm')}\r\n    ];\r\n\r\n    vm.questionsParam = '';\r\n    vm.cancel1200 = cancel1200;\r\n    vm.chkValidStates = chkValidStates;\r\n    vm.chkExtStates = chkExtStates;\r\n    vm.checkError = checkError;\r\n    vm.submitForm1200Data = submitForm1200Data;\r\n    vm.excessClaimsCheck = excessClaimsCheck;\r\n    vm.notPayingExcess = notPayingExcess;\r\n    vm.amendmentsMade = amendmentsMade;\r\n    vm.uploadAmended = uploadAmended;\r\n    $scope.formData = {};\r\n    $scope.validate = {};\r\n    $scope.excessobject = {};\r\n    $scope.phoneNumber = '';\r\n    $scope.test = {};\r\n    $scope.$parent.promise\r\n    .then(\r\n        function(response){\r\n\r\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n            var service = $scope.$parent.availableServices;\r\n\r\n            if(service[0].status == 'Epct available') {\r\n                vm.form1200Template = vm.templates[0].url;\r\n                vm.epctStage = 1;\r\n            }\r\n\r\n            if(service[0].status == 'Epct being generated' || service[0].status == 'Epct saved' || service[0].status == 'Epct rejected' || service[0].status == 'Payment in progress') {\r\n                vm.form1200Template = vm.templates[2].url;\r\n                vm.epctStage = 2;\r\n            }\r\n\r\n            if(service[0].type === 'Offline') {\r\n                vm.form1200Template = vm.templates[3].url;\r\n                vm.urgent = service[0].urgent;\r\n                vm.epctStage = 2;\r\n            }\r\n\r\n        }\r\n    )\r\n\r\n    function initiateForm1200() {\r\n\r\n        Form1200Service.fetchQuestions(caseSelected.patentID)\r\n        .then(\r\n            function(response){\r\n\r\n                if(response !== null) {\r\n                    $scope.formData.extensionStatesUI = response.extensionStatesUI;\r\n                    $scope.formData.validationStatesUI = response.validationStatesUI;\r\n                    if(response.clientRef !== '') {\r\n                        $scope.formData.clientRef = response.clientRef;\r\n                    }\r\n                    if(response.showOptionalQuestion === true) {\r\n                        vm.additionalDocuments = true;\r\n                    }\r\n                    if(response.isYear3RenewalDue === true) {\r\n                        vm.isYear3RenewalDue = true;\r\n                    }\r\n\r\n                    vm.form1200Template = vm.templates[1].url;\r\n                    \r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function amendmentsMade(value) {\r\n        vm.amendedOptions = value === true ? true : false;\r\n\r\n    }\r\n\r\n    function uploadAmended(value) {\r\n        vm.displayAmendedUpload = value === true ? true : false;\r\n        if(value) {\r\n            var modalInstance = $uibModal.open({\r\n                template: require('html-loader!../html/modals/modal.not-checking-claims.tpl.htm'),\r\n                appendTo: undefined,\r\n                controllerAs: '$ctrl',\r\n                controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                    this.dismissModal = function () {\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n                    this.ok = function () {\r\n                        $state.go('portfolio', {reload: true});\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n\r\n                }]\r\n            });\r\n        }        \r\n    }\r\n\r\n    function notPayingExcess(value) {\r\n\r\n        if(value === true) {\r\n            var modalInstance = $uibModal.open({\r\n                template: require('html-loader!../html/modals/modal.not-paying-excess.tpl.htm'),\r\n                appendTo: undefined,\r\n                controllerAs: '$ctrl',\r\n                controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                    this.dismissModal = function () {\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n                    this.ok = function () {\r\n                        $state.go('portfolio', {reload: true});\r\n                        $uibModalInstance.close();\r\n                    };\r\n\r\n\r\n                }]\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function checkError(question, value) {\r\n\r\n        if(value === false || typeof value === 'undefined' || value === undefined) { return;}\r\n        var obj = {};\r\n        var message = '';\r\n        if(question == 'entity' && value === true) {\r\n            message = 'NaturalPerson';\r\n            obj.title = 'Entity or a natural person, Rule 6(4)';\r\n            var template = '<p>If you do not wish to delcare that you are an entity or a natural person, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope); \r\n        }\r\n        if(question == 'amendments' && value === true) {\r\n            message = 'Amended';\r\n            obj.title = 'Amendments made';\r\n            var template = '<p>If you confirm that amendments have been made to the application, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }\r\n        if(question == 'documents' && value === true) {\r\n            message = 'DocsRequired'\r\n            obj.title = 'Additional copies required';\r\n            var template = '<p>If you confirm that you require additional copies of the document cited in the supplementary European search report,\\\r\n                The Patent Place can offer help with your application offline via a Patent Administrator, and the order will become unavailable to process online.\\\r\n                For further help please contact The Patent Place via email: support@ip.place, or phone: '+ $scope.phoneNumber +'</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }              \r\n        manualProcess(obj, message);  \r\n    }\r\n\r\n    function excessClaimsCheck(value) {\r\n        vm.excessClaimsDue = value > 15 ? true : false;\r\n    }\r\n\r\n    function chkValidStates(item, index) {\r\n        if(item === '') {\r\n            $scope.formData.validationStatesUI[index].selected = true;\r\n        } else {\r\n            $scope.formData.validationStatesUI[index].selected = false;\r\n        }\r\n    }\r\n\r\n    function chkExtStates(item, index) {     \r\n        if(item === '') {\r\n            $scope.formData.extensionStatesUI[index].selected = true;\r\n        } else {\r\n            $scope.formData.extensionStatesUI[index].selected = false;\r\n        }\r\n    }\r\n\r\n\r\n    function cancel1200() {\r\n        var modalInstance = $uibModal.open({\r\n            template: require('html-loader!../html/modals/modal.confirm-cancel-1200.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                this.dismissModal = function () {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n                this.ok = function () {\r\n                    $state.go('portfolio', {reload: true});\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function sortPageDetails(data) {\r\n\r\n        var arr = [];\r\n\r\n        for(var property in data) {\r\n            if(data.hasOwnProperty(property)) {\r\n                switch(property) {\r\n                    case 'claims':\r\n                        data[property].type = 'Claims';\r\n                        arr.push(data[property])\r\n                    break;\r\n                    case 'description':\r\n                        data[property].type = 'Description';\r\n                        arr.push(data[property])\r\n                    break;\r\n                    case 'drawings':\r\n                        data[property].type = 'Drawings';\r\n                        arr.push(data[property])\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr;\r\n\r\n    }\r\n\r\n    function invalidPageNos(error) {\r\n\r\n        $scope.formDataSubmitted = false;\r\n        var modalInstance = $uibModal.open({\r\n            template: require('html-loader!../html/modals/modal.invalid-page-nos.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });\r\n    }\r\n\r\n\r\n    function submitForm1200Data(data){\r\n\r\n        $scope.formDataSubmitted = true;\r\n\r\n        var arr = sortPageDetails(data.pageDetailsData);\r\n     \r\n        var config = { \r\n            headers: { 'Content-Type': undefined},\r\n            transformRequest: angular.identity,\r\n            // params: { amendedDoc: paramsData }       \r\n        }; \r\n\r\n        var formData = new FormData();\r\n\r\n        var uploadRequired;\r\n\r\n\r\n        if($scope.excessobject.excessdocs){\r\n\r\n            if($scope.excessobject.excessdocs.yes) {\r\n                uploadRequired = true;\r\n            }\r\n            if($scope.excessobject.excessdocs.no) {\r\n                uploadRequired = false;\r\n            }\r\n            formData.append('isUploadRequired', uploadRequired)\r\n            \r\n        }\r\n\r\n        formData.append('pageDescriptionsUI', JSON.stringify(arr))\r\n        formData.append('patentID', caseSelected.patentID)\r\n        formData.append('clientRef', data.clientRef)\r\n        formData.append('totalClaims', parseInt(data.totalClaims))\r\n        formData.append('validationStatesUI', JSON.stringify(data.validationStatesUI))\r\n        formData.append('extensionStatesUI', JSON.stringify(data.extensionStatesUI))\r\n        formData.append('isAmendmentsMade', $scope.validate.amendments.yes)\r\n\r\n        if(data.numAdditionalCopies) {\r\n            formData.append('numAdditionalCopies', data.numAdditionalCopies)\r\n        }\r\n\r\n        if(data.amended) {\r\n            if(data.amended.amendedDoc) {\r\n                formData.append('amendedDoc', data.amended.amendedDoc)\r\n            }\r\n        }\r\n\r\n        formData.append('isYear3RenewalPaying', data.isYear3RenewalPaying ? data.isYear3RenewalPaying.yes : false);\r\n        formData.append('isExcessClaimsPaying', $scope.excessobject.excessclaims ?  $scope.excessobject.excessclaims.yes : false)\r\n\r\n        if($scope.validate.amendments) {\r\n            if($scope.validate.amendments.no) {\r\n                if(formData.get('isUploadRequired')) {\r\n                    delete formData.delete('isUploadRequired');\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        Form1200Service.submitForm1200(formData, config)\r\n        .then(\r\n            function(response){\r\n\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.form1200-generating.tpl.htm'), //create html for notifications update success\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', function($uibModalInstance){\r\n                        this.dismissModal = function () {\r\n                            $uibModalInstance.close();\r\n                        };\r\n                    }]\r\n\r\n                })\r\n                ActiveTabService.setTab(2);\r\n                $state.go('portfolio.modal.case', {form1200generate: 1, prepareGrant: 0}, {reload: true});\r\n            },\r\n            function(errResponse){\r\n                console.error('Error : ', errResponse)\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.generate-form1200-error.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', '$scope', '$timeout', function($uibModalInstance, $scope, $timeout){\r\n\r\n                        vm.proceedMsgAmend  = true;\r\n                        this.dismissModal = function () {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                });\r\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true});\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function manualProcess(message, reason) {// NOT NEEDED FOR RELEASE 1\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: '<div class=\"modal-header d-flex flex-column align-items-center justify-content-center\">\\\r\n                            <span class=\"modal-cross cursor-pointer\" data-ng-click=\"$ctrl.dismissModal()\"><i class=\"txt-grey fa fa-times fa-2x\"></i></span>\\\r\n                            <div class=\"m-b-sm\">\\\r\n                                <i class=\"fas fa-exclamation-circle fa-4x txt-phase-red\"></i>\\\r\n                            </div>\\\r\n                            <p class=\"font-h3 font-weight-medium\">'+message.title+'</p>\\\r\n                            <p class=\"font-body w-100 text-center m-b-sm m-t-xs\">'+ message.message[0].innerHTML+'</p>\\\r\n                            <div class=\"d-flex\">\\\r\n                                <button class=\"btn btn--lg btn--red pill-radius m-r-md\" data-ng-click=\"$ctrl.dismissModal()\">Cancel</button>\\\r\n                                <button class=\"btn btn--lg btn--green pill-radius\" data-ng-click=\"$ctrl.confirm()\">Confirm</button>\\\r\n                            </div>\\\r\n                        </div>',\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', '$state', function($uibModalInstance, $timeout, $state){\r\n\r\n               \r\n\r\n                this.confirm = function() {\r\n                    Form1200Service.inhibitForm1200(caseSelected.patentID, reason)\r\n                    .then(\r\n                        function(response) {\r\n                            $state.reload();\r\n                            $uibModalInstance.close();\r\n                        }\r\n                    )\r\n                }\r\n                \r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });    \r\n\r\n    } \r\n}","FxChartController.$inject = ['caseSelected', 'ca', '$scope', '$timeout', '$state']\r\n\r\nexport default function FxChartController(caseSelected, ca, $scope, $timeout, $state) {\r\n\r\n    var vm = this;\r\n\r\n    vm.patent = caseSelected;\r\n    vm.setData = setData;\r\n    vm.lineData = null;\r\n    var fxTimeout;\r\n\r\n    $scope.$parent.promise\r\n    .then(\r\n        function(response){\r\n            if(response.length > 0 && $scope.$parent.availableServices.length) {\r\n                fxTimeout = $timeout(function(){\r\n\r\n                    vm.data = {};\r\n                    vm.data.availableAction = $scope.$parent.availableServices;\r\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action }\r\n                    \r\n                    if(ca !== undefined || typeof ca !== 'undefined') {\r\n                       \r\n                        vm.lineOptions = {\r\n                            chart: {\r\n                                type: 'lineChart',\r\n                                height: 350,\r\n                                margin : {\r\n                                    top: 30,\r\n                                    right: 50,\r\n                                    bottom: 30,\r\n                                    left: 50\r\n                                },\r\n                                clipEdge: false,\r\n                                duration: 500,\r\n                                tooltip: {\r\n                                  hideDelay: 0\r\n                                },                      \r\n                                showLegend: false,\r\n                                x: function(d, i){ \r\n                                    return d[0];\r\n                                },\r\n                                y: function(d){\r\n                                    return d[1];\r\n                                },\r\n                                useInteractiveGuideline: true,\r\n                                xAxis: {\r\n                                    tickFormat: function (d, i) {\r\n                                        return d3.time.format('%x')(new Date(d));\r\n                                    },\r\n                                    axisLabelDistance: 20,\r\n                                    staggerLabels: false,\r\n                                    rotateLabels: 0,\r\n                                    rotateYLabel: true,\r\n                                    showMaxMin: true,\r\n                                    height: 60,\r\n                                    ticks: null,\r\n                                    width: 75,\r\n                                    margin: {\r\n                                        top: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        left: 0\r\n                                    },\r\n                                    duration: 250,\r\n                                    orient: 'bottom',\r\n                                    tickValues: null,\r\n                                    tickSubdivide: 0,\r\n                                    tickSize: 6,\r\n                                    tickPadding: 10,\r\n                                    domain: [\r\n                                        0,\r\n                                        1\r\n                                    ],\r\n                                    range: [\r\n                                        0,\r\n                                        1\r\n                                    ]           \r\n                                },\r\n                                yAxis: {\r\n                                    tickFormat: function(d){\r\n                                        return '$ ' + d3.format('.00f')(d);\r\n                                    },\r\n                                    axisLabelDistance: 20,\r\n                                    rotateLabels: 0,\r\n                                    rotateYLabel: true,\r\n                                    showMaxMin: true,\r\n                                    height: 60,\r\n                                    width: 75,\r\n                                    margin: {\r\n                                        top: 0,\r\n                                        right: 0,\r\n                                        bottom: 0,\r\n                                        left: -30\r\n                                    },\r\n                                    duration: 250,\r\n                                    orient: 'left',\r\n                                    tickValues: null,\r\n                                    tickSubdivide: 0,\r\n                                    tickSize: 6,\r\n                                    tickPadding: 10,\r\n                                    domain: [\r\n                                        0,\r\n                                        1\r\n                                    ],\r\n                                    range: [\r\n                                        0,\r\n                                        1\r\n                                    ]\r\n                                },\r\n                                tooltip: {\r\n                                    keyFormatter: function(d) {\r\n                                        return d3.time.format('%x')(new Date(d));\r\n                                    }\r\n                                },\r\n                                useVoronoi: false,\r\n                                lines: {\r\n                                    interactive: true\r\n                                },\r\n                                showXAxis: true,\r\n                                showYAxis: true\r\n                            }\r\n                        }\r\n\r\n                        setData(vm.data.selectedAction.action)\r\n\r\n                    }\r\n                }) //timeout end\r\n            }\r\n\r\n        })\r\n\r\n        function setData(type) {\r\n\r\n\r\n            if(type === undefined || typeof type === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            var fxChartData = ca.filter(function(item){\r\n                if(item.info == 'epct') { item.info = 'Euro-PCT' }\r\n                return item.info === type;\r\n            }).map(function(data){\r\n                return data.data.lineChart;\r\n            })\r\n\r\n            var lineDataArr = [];\r\n\r\n            for (var property in fxChartData[0]) { //change lineData\r\n                if (fxChartData[0].hasOwnProperty(property)) {\r\n                    var dayData = fxChartData[0][property].currentOfficialFeeUSD !== undefined ? fxChartData[0][property].currentOfficialFeeUSD : fxChartData[0][property];\r\n                    var str = property.split(\"T\").shift();\r\n                    var date = new Date(str).getTime();\r\n                    lineDataArr.push([date, dayData]);\r\n                }\r\n            }                \r\n            \r\n\r\n            vm.lineData = [\r\n                {\r\n                    values: lineDataArr,\r\n                    color: '#2ca02c'\r\n                }\r\n            ]\r\n\r\n        }  //setData send\r\n\r\n        $scope.$on('$destroy', function(){\r\n            $timeout.cancel(fxTimeout)\r\n        })\r\n\r\n}","GrantController.$inject = ['caseSelected', '$scope', '$uibModal', '$state', '$timeout', 'GrantService', '$compile', '$cookies'];\r\n\r\nexport default function GrantController(caseSelected, $scope, $uibModal, $state, $timeout, GrantService, $compile, $cookies) {\r\n\r\n\tvar vm = this;\r\n\r\n\tvm.patent = caseSelected;\r\n\tvm.initiateGrantOrder = initiateGrantOrder;\r\n    vm.templates = [\r\n        { name: 'grantintro.html', url:  require('html-loader!../html/grant/grant.intro.tpl.htm')},\r\n        { name: 'grantquestions.html', url: require('html-loader!../html/grant/grant.questionnaire.tpl.htm')},\r\n        { name: 'grantgenerated.html', url: require('html-loader!../html/grant/grant.ready.tpl.htm')}\r\n    ];\r\n    vm.highestPoint = 0;\r\n    vm.uninhibitGrantConfirm = uninhibitGrantConfirm;\r\n    vm.deleteGrantConfirm = deleteGrantConfirm;\r\n    vm.checkError = checkError;\r\n    vm.submitGrantData = submitGrantData;\r\n    vm.excessClaims = excessClaims;\r\n    vm.excessPages = excessPages;\r\n    $scope.formData = {};\r\n    $scope.validate = {};\r\n    $scope.phoneNumber = '';\r\n\r\n    function init() {\r\n\r\n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n    \tvm.activeTab = 0;\r\n\r\n        if(caseSelected.clientRef !== '') {\r\n            $scope.formData.clientRef = caseSelected.clientRef;\r\n        }\r\n\r\n\t\tif(caseSelected.p3sServicesWithFees[0].serviceStatus == 'Grant available') {\r\n\r\n\t\t\tvm.grantStage = 1;\r\n    \t\tvm.grantTemplate = vm.templates[0].url;        \r\n    \t}\r\n\r\n\t\tif(caseSelected.p3sServicesWithFees[0].serviceStatus == 'Grant saved' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Too Late Online' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Manual processing' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'Payment in progress' || caseSelected.p3sServicesWithFees[0].serviceStatus == 'EPO Instrcted') {\r\n\t\t\tvm.grantStage = 2;\r\n    \t\tvm.grantTemplate = vm.templates[2].url;\r\n    \t}\r\n    }\r\n\r\n    init();\r\n\r\n    function submitGrantData(data){\r\n\r\n        vm.formDataSubmitted = true; \r\n        var formData = new FormData();\r\n        var config = { headers: {'Content-Type': undefined} };\r\n        var notifyWhenValidationAvailable = true; //REMOVE EVENTALLY. QUICK FIX. PROPERTY NOT REQUIRED\r\n        formData.append('patentID', caseSelected.patentID);\r\n        formData.append('clientRef', data.clientRef);\r\n        formData.append('frenchTranslation', data.translations.frenchTranslation);\r\n        formData.append('germanTranslation', data.translations.germanTranslation);\r\n        \r\n        if(data.isExcessClaims) {\r\n            formData.append('isExcessClaims', data.isExcessClaims.yes);\r\n            if(data.isExcessClaims.yes) {\r\n                formData.append('feePayable_016', data.feePayable_016);\r\n                formData.append('feePayable_016e', data.feePayable_016e);\r\n                formData.append('totalClaimsAmountPayable', data.totalClaimsAmountPayable);\r\n                formData.append('numClaimsPaid', data.numClaimsPaid);\r\n            }\r\n        }\r\n\r\n        if(data.isExcessPages) {\r\n            formData.append('isExcessPages', data.isExcessPages.yes);\r\n            if(data.isExcessPages.yes) {\r\n                formData.append('feePayable_008', data.feePayable_008);\r\n                formData.append('totalPagesAmountPayable', data.totalPagesAmountPayable);\r\n                formData.append('numPagesPaid', data.numPagesPaid);\r\n            }\r\n        }\r\n        \r\n        var cookieExp = new Date();\r\n        cookieExp.setDate(cookieExp.getDate() + 1);\r\n\r\n        var attempts = $cookies.get('grantAttempts');\r\n\r\n        if(!attempts) {\r\n            $cookies.put('grantAttempts', 1);\r\n            formData.append('isFirstTime', true);\r\n        } else {\r\n            if(attempts < 2) {\r\n                $cookies.put('grantAttempts', Number(attempts) + Number(1));\r\n                \r\n            }\r\n            formData.append('isFirstTime', false);\r\n            \r\n        }\r\n\r\n        GrantService.submitGrant(formData, config)\r\n        .then(\r\n            function(response){\r\n\r\n                var modalInstance = $uibModal.open({\r\n                    template:  require('html-loader!../html/modals/modal.grant-order-prepared.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controllerAs: '$ctrl',\r\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                        this.dismissModal = function() {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                });\r\n\r\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 1, form1200generate: 0}, {reload: true})\r\n\r\n            },\r\n            function(errResponse){\r\n\r\n                if(errResponse.status !== 406) {\r\n\r\n                    vm.formDataSubmitted = false; \r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-order-not-prepared.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });     \r\n                }\r\n\r\n                if(errResponse.status == 406 && attempts == undefined ) {\r\n\r\n                    vm.formDataSubmitted = false; \r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-first-mismatch.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });   \r\n                }\r\n\r\n                if(errResponse.status == 406 && attempts >= 1) {\r\n                    var modalInstance = $uibModal.open({\r\n                        template:  require('html-loader!../html/modals/modal.grant-second-mismatch.tpl.htm'),\r\n                        appendTo: undefined,\r\n                        controllerAs: '$ctrl',\r\n                        controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                            this.phoneNumber = $scope.ppDetails.partnerPhone;\r\n\r\n                            this.dismissModal = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n\r\n                        }]\r\n                    });   \r\n\r\n                    $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true})\r\n                }\r\n\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    function excessClaims(value) {\r\n        if(value) {\r\n            vm.excessClaimsDue = true;\r\n        } else {\r\n            vm.excessClaimsDue = false;\r\n        }\r\n    }\r\n\r\n    function excessPages(value) {\r\n        if(value) {\r\n            vm.excessPagesDue = true;\r\n        } else {\r\n            vm.excessPagesDue = false;\r\n        }\r\n    }\r\n\r\n    function checkError(question, value) {\r\n        if(value === false || typeof value === 'undefined' || value === undefined) { return;}\r\n        var obj = {};\r\n        if(question == 'representative' && value === true) {\r\n            obj.title = 'Representative';\r\n            var template = '<p>If you confirm that you do not wish IP Place to act as representative, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber + '</p>';\r\n            obj.message = $compile(template)($scope);\r\n        }\r\n        if(question == 'approveText' && value === true) {\r\n            obj.title = 'Patent Specification';\r\n            var template = '<p>If you confirm that you do not approve the text of the Patent Specification, The Patent Place can offer help with your application offline\\\r\n                via a Patent Administrator, and the order will become unavailable to process online. For further help please contact The Patent Place via\\\r\n                 email: support@ip.place, or phone: '+ $scope.phoneNumber + '</p>';     \r\n            obj.message = $compile(template)($scope);      \r\n        }\r\n\r\n        inhibitGrantConfirm(obj);  \r\n    }\r\n\r\n\tfunction initiateGrantOrder() {\r\n\r\n        GrantService.representativeCheck(caseSelected.patentID)\r\n        .then(\r\n            function(response){\r\n                if(response === true) {\r\n                    vm.representativeRequired = true;\r\n                }\r\n                vm.grantTemplate = vm.templates[1].url;\r\n            }\r\n        )\r\n\t\t\r\n\r\n\t}\r\n\r\n    function uninhibitGrantConfirm() {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template:  require('html-loader!../html/modals/modal.confirm-uninhibit-grant-order.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.uninhibitGrant = function() {\r\n                    $uibModalInstance.close();\r\n                    GrantService.unhibitGrant(caseSelected)\r\n                    .then(\r\n                        function(response){\r\n                            $state.reload();\r\n                            var modalInstance = $uibModal.open({\r\n                                template:  require('html-loader!../html/modals/modal.grant-order-uninhibited.tpl.htm'),\r\n                                appendTo: undefined,\r\n                                controllerAs: '$ctrl',\r\n                                controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                                    this.dismissModal = function() {\r\n                                        $uibModalInstance.close();\r\n                                    };\r\n\r\n                                }]\r\n                            });\r\n\r\n                        }\r\n                    )\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                    $state.reload()\r\n                };\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n\r\n    function inhibitGrantConfirm(message) {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: '<div class=\"modal-header d-flex flex-column align-items-center justify-content-center\">\\\r\n                            <span class=\"modal-cross cursor-pointer\" data-ng-click=\"$ctrl.dismissModal()\"><i class=\"txt-grey fa fa-times fa-2x\"></i></span>\\\r\n                            <div class=\"m-b-sm\">\\\r\n                                <i class=\"fas fa-exclamation-circle fa-4x txt-phase-red\"></i>\\\r\n                            </div>\\\r\n                            <p class=\"font-h3 font-weight-medium\">'+message.title+'</p>\\\r\n                            <p class=\"font-body w-100 text-center m-b-sm m-t-xs\">'+ message.message[0].innerHTML+'</p>\\\r\n                            <div class=\"d-flex\">\\\r\n                                <button class=\"btn btn--lg btn--red pill-radius m-r-md\" data-ng-click=\"$ctrl.dismissModal()\">Cancel</button>\\\r\n                                <button class=\"btn btn--lg btn--green pill-radius\" data-ng-click=\"$ctrl.confirm()\">Confirm</button>\\\r\n                            </div>\\\r\n                        </div>',\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', '$state', function($uibModalInstance, $timeout, $state){\r\n\r\n                if(caseSelected.p3sServicesWithFees[0].serviceStatus === 'Grant available') {\r\n\r\n                    this.confirm = function() {\r\n                        GrantService.inhibitGrant(caseSelected.patentID)\r\n                        .then(\r\n                            function(response) {\r\n                                $state.reload();\r\n                                $uibModalInstance.close();\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                };\r\n\r\n            }]\r\n        });\r\n\r\n    }\r\n\r\n    function deleteGrantConfirm() {\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template:  require('html-loader!../html/modals/modal.confirm-delete-grant-order.tpl.htm'),\r\n            appendTo: undefined,\r\n            controllerAs: '$ctrl',\r\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                this.deleteGrant = function() {\r\n                    $uibModalInstance.close();\r\n                    GrantService.deleteGrant(caseSelected)\r\n                    .then(\r\n                        function(response){\r\n                            $state.reload()\r\n                            var modalInstance = $uibModal.open({\r\n                                template:  require('html-loader!../html/modals/modal.grant-order-deleted.tpl.htm'),\r\n                                appendTo: undefined,\r\n                                controllerAs: '$ctrl',\r\n                                controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\r\n\r\n                                    this.dismissModal = function() {\r\n                                        $uibModalInstance.close();\r\n                                    };\r\n\r\n                                }]\r\n                            });\r\n\r\n                        }\r\n                    )\r\n                }\r\n\r\n                this.dismissModal = function() {\r\n                    $uibModalInstance.close();\r\n                    $state.reload()\r\n                };\r\n\r\n            }]\r\n        });\r\n    }\r\n}","RemindersController.$inject = ['caseSelected', '$scope', '$rootScope', '$uibModal', 'ChunkDataService', 'RemindersService', 'CoreService'];\n\nexport default function RemindersController(caseSelected, $scope, $rootScope, $uibModal, ChunkDataService, RemindersService,  CoreService) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n    vm.updateNotifications = updateNotifications;\n    vm.displayNotifications = displayNotifications;\n    vm.notificationNavItems = [];\n    vm.notificationUrl = 'rest-renewal-notifications/';\n    vm.openGuide = openGuide;\n    vm.notificationUi; //required for uopdating notifications\n    vm.notificationUrl;\n    var colors = ['green', 'amber', 'red', 'blue', 'black'];\n    vm.toBlueOrNotToBlue = false;\n    vm.data = {    \n        availableAction: [],\n        selectedAction: {}\n    }\n\n    vm.activeTab = 0;\n\n    function checkServices() {\n\n        vm.data.availableAction = caseSelected.p3sServicesWithFees.filter(function(item){\n            return item.serviceType !== 'postgrant';\n        }).map(function(action, idx){\n            if(action.serviceType == 'epct') { action.serviceType = 'Euro-PCT'}\n            return {id: idx, action: action.serviceType}\n        })\n\n        vm.data.selectedAction = vm.data.availableAction[0];\n\n    }\n\n    checkServices();\n\n    vm.notifications = {};\n\n    function displayNotifications(action) {  //displays the specifed actions notifications\n\n        if(typeof action == undefined) { return; }\n\n        if(action == 'Euro-PCT') { \n            vm.notificationUi = 'allEpctNotificationUIs';\n            vm.notificationUrl = 'rest-epct-notifications/';\n            vm.toBlueOrNotToBlue = false; //USED TO DETERMINE WHETHER TO DISPLAY BLUE\n        }\n\n        if(action == 'renewal') {\n            vm.notificationUi = 'allRenewalNotificationUIs';\n            vm.notificationUrl = 'rest-renewal-notifications/';\n            vm.toBlueOrNotToBlue = true;\n        }\n\n        if(action == 'grant') {\n            vm.notificationUi = 'allGrantNotificationUIs';\n            vm.notificationUrl = 'rest-grant-notifications/';\n            vm.toBlueOrNotToBlue = false;\n        }\n\n        if(action !== 'validation' && action !== 'N/A') { \n            phaseNotifications();\n        }\n\n\n    };\n\n    function phaseNotifications() {  //all info assigned to scope is requried for submitting data\n\n        for(var i = 0; colors.length > i; i++) {\n            if(vm.toBlueOrNotToBlue) {\n                vm.notifications[colors[i]] = ChunkDataService.chunkData(fetchNotificationUi(colors[i], caseSelected[vm.notificationUi]), 6)//chunk data makes sure the coluns go no more than 6\n            }\n            if(!vm.toBlueOrNotToBlue) {\n                if(i == 3) { break }; //if only green, amber and red available\n                vm.notifications[colors[i]] = ChunkDataService.chunkData(fetchNotificationUi(colors[i], caseSelected[vm.notificationUi]), 6)\n            }\n        }        \n\n    }    \n\n    function fetchNotificationUi(phase, ui) { //returns the phases notifciations for chunkdata service\n        return ui.filter(function(data){\n            return data.costbandcolor.toLowerCase() == phase.toLowerCase();\n        });\n    }\n\n    function openGuide() {\n        CoreService.openAppGuide();\n        $rootScope.$broadcast('appGuideOpen');\n    }    \n\n    function updateNotifications(id, ui, url) {\n        vm.updatingNotifications = true;\n        RemindersService.updateNotifications(id, caseSelected[ui], url)\n        .then(\n            function(response){\n                updateNotificationsSuccess();\n                vm.updatingNotifications = false;\n            },\n            function(errResponse){\n                updateNotificationsError(errResponse);\n                vm.updatingNotifications = false;\n            }\n        )\n    };\n\n    function updateNotificationsSuccess() {\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-epct-notifications-success.tpl.htm'), //create html for notifications update success\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n            }]\n\n        });\n    }\n\n    function updateNotificationsError(errResponse) {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.update-epct-notifications-error.tpl.htm'), //create html for notifications update fail\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', function($uibModalInstance){\n\n                this.error = errResponse;\n\n                this.dismissModal = function () {\n                    $uibModalInstance.close();\n                };\n            }]\n\n        });\n\n    }        \n\n\n\n}\n","RenewalHistoryController.$inject = ['$scope', '$timeout', 'caseSelected', 'RenewalHistoryService']\n\nexport default function RenewalHistoryController($scope, $timeout, caseSelected, RenewalHistoryService) {\n\n    var vm = this;\n\n    vm.patent = caseSelected;\n\n    $scope.promise.then(\n    \tfunction(){\n    \t\t$timeout(function(){\n    \t\t\tvm.renewal = $scope.$parent.renewalHistory;\t\n    \t\t}, 500)\n     \n    \t}\n\n    )\n\n}","ValidationController.$inject = ['caseSelected', '$scope', '$uibModal', '$state', '$timeout', '$q', 'ValidationService'];\n\nexport default function ValidationController(caseSelected, $scope, $uibModal, $state, $timeout, $q, ValidationService) {\n\n\tvar vm = this;\n\n    vm.checkStates = checkStates;\n    vm.submitValidationData = submitValidationData;\n    vm.stateSelection = stateSelection;\n    vm.requestNewQuote = requestNewQuote;\n    vm.submitPoaDocuments = submitPoaDocuments;\n    vm.patent = '';\n    vm.templates = [\n        { name: 'validationAvailable', url: require('html-loader!../html/validation/validation-available.tpl.htm')},\n        { name: 'quotePending', url: require('html-loader!../html/validation/validation-quote-pending.tpl.htm')},\n        { name: 'quoteProvided', url: require('html-loader!../html/validation/validation-quote-provided.tpl.htm')},\n        { name: 'paymentInProgress', url: require('html-loader!../html/validation/validation-payment-in-progress.tpl.htm')},\n        { name: 'poasProvided', url: require('html-loader!../html/validation/validation-poa-available.tpl.htm')},\n        { name: 'noPoasProvided', url: require('html-loader!../html/validation/validation-nopoas-required.tpl.htm')},\n        { name: 'workInProgress', url: require('html-loader!../html/validation/validation-wip.tpl.htm')},\n        { name: 'manual', url: require('html-loader!../html/validation/validation-manual.tpl.htm')},\n        { name: 'completed', url: require('html-loader!../html/validation/validation-completed.tpl.htm')}\n    ];\n\n    $scope.formData = {};\n    var validationAction;\n    var allState = [];\n    vm.validationInfo = {};\n    vm.domain = ppdomain;\n\n    function stateSelection(selection) {\n        $scope.selectionBoolean =  selection == 'De-select all' ? false : true;\n        for(var i = 0; 0 < allState.length; i++ ) {\n            if(allState[i] === undefined) { return; }\n            allState[i].selected = $scope.selectionBoolean;\n        }\n    }\n\n    function init() {\n\n        $scope.isChecked = true;\n        vm.patent = caseSelected; \n        $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n\n        var serviceStatusL = caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase();\n        if(caseSelected.p3sServicesWithFees[0].validationFeeUI !== null) {\n            var array = [];\n            allState = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates)\n        }\n        vm.activeTab = 0;\n\n        if(serviceStatusL == 'validation available') { //VALIDATION TEST DATA - REMOVE NotUsed\n            vm.validationTemplate = vm.templates[0].url;        \n        }\n        \n        if(serviceStatusL == 'preparing quote' || serviceStatusL == 'quote pending') {\n            vm.validationTemplate = vm.templates[1].url;        \n        }        \n\n        if(serviceStatusL == 'quote provided') {\n            vm.validationTemplate = vm.templates[2].url;        \n        }\n\n        if(serviceStatusL == 'payment in progress' || serviceStatusL == 'pa instructed') {\n            vm.validationTemplate = vm.templates[3].url;        \n        }\n\n        if(serviceStatusL == 'blank poas provided' || serviceStatusL == 'blank poas downloaded') { //VALIDATION TEST DATA - REMOVE NotUsed\n            var noPoasNeeded = allState.every(function(item){\n                return item.poaNeeded === false;\n            })            \n            caseSelected.postAddress = caseSelected.validationQuoteUI.poaPostalAddress.split(',');\n            vm.validationTemplate = vm.templates[4].url;        \n            \n        }                    \n\n        if(serviceStatusL == 'scanned poas received' || serviceStatusL == 'poas provided to pa' || serviceStatusL == 'paper documents received') { //VALIDATION TEST DATA - REMOVE NotUsed\n            \n            var noPoasNeeded = allState.every(function(item){\n                return item.poaNeeded === false;\n            })                   \n            if(noPoasNeeded) {\n                vm.validationTemplate = vm.templates[5].url;  \n            } else {\n                vm.validationTemplate = vm.templates[6].url;\n            }\n        }\n\n        if(serviceStatusL == 'completed') {\n            vm.validationTemplate = vm.templates[8].url;\n            var array = [];\n            vm.statesCompleted = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates);\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].saleType.toLowerCase() == 'offline') { //VALIDATION TEST DATA - REMOVE NotUsed\n            vm.validationTemplate = vm.templates[7].url;  \n        }\n\n        if(caseSelected.p3sServicesWithFees[0].validationFeeUI !== null) {\n            var array = [];\n            allState = array.concat(caseSelected.p3sServicesWithFees[0].validationFeeUI.designatedStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.extensionStates, caseSelected.p3sServicesWithFees[0].validationFeeUI.validationStates)\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'validation available') {\n            ValidationService.fetchDesignatedStates(caseSelected.patentID)\n            .then(\n                function(response){\n                    vm.validationInfo = response;\n                    $scope.formData.corresdpondenceName = response.firstName +' ' + response.lastName;\n                    $scope.formData.corresdpondenceEmailaddress = response.emailaddress;\n                    $scope.formData.designatedStates = response.designatedStates;\n                    $scope.formData.extensionStates = response.extensionStates;\n                    $scope.formData.validationStates = response.validationStates;\n                    var array = [];\n                    allState = array.concat($scope.formData.designatedStates, $scope.formData.extensionStates, $scope.formData.validationStates);\n                }\n            )\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'preparing quote') { \n            ValidationService.fetchPreparedQuote(caseSelected.patentID)\n            .then(\n                function(response){\n                    vm.preparedQuote = response;\n                }\n            )\n\n        }\n\n        function addSignedPoaDoc(item) {\n            item.signedPoaDoc = '';\n            return item;\n        }\n\n        if(caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'blank poas provided' || caseSelected.p3sServicesWithFees[0].serviceStatus.toLowerCase() == 'blank poas downloaded') {\n            $scope.formData.designatedStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.designatedStates;\n            $scope.formData.extensionStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.extensionStates;\n            $scope.formData.validationStates = vm.patent.p3sServicesWithFees[0].validationFeeUI.validationStates;   \n\n        }\n\n    }\n\n    init()\n\n    function requestNewQuote() {\n\n        var modalInstance = $uibModal.open({\n            template: require('html-loader!../html/modals/modal.validation-confirm-deletion.tpl.htm'),\n            appendTo: undefined,\n            controllerAs: '$ctrl',\n            controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                this.confirmDeletion = function() {\n                    $uibModalInstance.close();\n                    ValidationService.deleteQuote(caseSelected.patentID)\n                    .then(\n                        function(response){\n                            $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n                        }\n                    )\n                }\n\n                this.dismissModal = function() {\n                    $uibModalInstance.close();\n                };\n\n            }]\n        });\n\n    }\n\n    function removeCost(item) {\n        delete item.validationCost_EUR;\n        delete item.validationCost_USD;\n        if(!item.signedPoaDoc) { item.signedPoaDoc = null; };\n        return item;\n    }\n\n    function submitPoaDocuments(data) {\n\n        var formData = {};\n\n        var designatedMap = data.designatedStates.map(removeCost);\n        var extensionMap = data.extensionStates.map(removeCost);\n        var validationMap = data.validationStates.map(removeCost);\n        var allStatesMapped = designatedMap.concat(extensionMap, validationMap)\n\n        allStatesMapped = allStatesMapped.filter(function(item){\n            if(item.signedPoaDoc == null) { return false; }\n            return true;\n        })\n        .map(function(item){\n            var newObj = {};\n            newObj.stateCode = item.stateCode;\n            newObj.signedPoaDoc = item.signedPoaDoc;\n            return newObj;\n        })\n\n        var promiseArray = [];\n\n        for(var i = 0; i < allStatesMapped.length; i++) {\n            promiseArray.push(ValidationService.submitPoas(caseSelected.patentID, allStatesMapped[i]))\n        }\n\n        $q.all(promiseArray)\n        .then(\n            function(response){\n                ValidationService.poaUploadSuccessNotify(caseSelected.patentID)\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-poas-submitted.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            },\n            function(errResponse){\n\n                ValidationService.poaUploadFailNotify(caseSelected.patentID)\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-poas-submitted-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            }\n        )\n\n    }\n\n    function submitValidationData(data){\n\n        var formData = {};\n\n        var names = data.corresdpondenceName.split(' ');\n\n        data.designatedStates = data.designatedStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n        data.extensionStates = data.extensionStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n        data.validationStates = data.validationStates.filter(function(data){\n            return data.selected === true;\n        }).map(function(filtered){\n            delete filtered.selected;\n            return filtered;\n        })\n\n        formData.patentID = caseSelected.patentID;\n        \n        formData.lastName = names.pop();\n        formData.firstName = names.toString().replace(/,/g, ' ');\n\n        formData.latestDateToRequestQuote = vm.validationInfo.latestDateToRequestQuote;\n        formData.latestDateToPurchaseQuote = vm.validationInfo.latestDateToPurchaseQuote;\n        formData.emailaddress = data.corresdpondenceEmailaddress;\n        formData.designatedStates = JSON.parse(angular.toJson(data.designatedStates));\n        formData.extensionStates = JSON.parse(angular.toJson(data.extensionStates));\n        formData.validationStates = JSON.parse(angular.toJson(data.validationStates));\n\n        ValidationService.requestQuote(formData)\n        .then(\n            function(response){\n\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-quote-requested.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID, prepareGrant: 0, form1200generate: 0, validationQuote: 1}, {reload: true})\n            },\n            function(errResponse) {\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.validation-quote-failed.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$timeout', function($uibModalInstance, $timeout){\n\n                        this.dismissModal = function() {\n                            $uibModalInstance.close();\n                        };\n\n                    }]\n                });\n\n                $state.go('portfolio.modal.case', {caseId: caseSelected.patentID}, {reload: true})\n\n            }\n        )\n\n    }\n\n    function checkStates(item, index, type) {\n\n        for(var i = 0; 0 < allState.length; i++ ) {\n            if(allState[i] === undefined) { break; }\n            if(allState[i].selected === true) {\n                $scope.isChecked = true;\n                break;\n            }\n            $scope.isChecked = false;\n        }\n\n        if(type === undefined) { return };\n\n        var validateType = type+ 'States';\n\n        if(item === true) {\n            $scope.formData[validateType][index].selected = true;\n        } else {\n            $scope.formData[validateType][index].selected = false;\n        } \n\n\n    }\n\n}","FeeBreakDownController.$inject = ['caseSelected', '$scope', '$timeout'];\r\n\r\nexport default function FeeBreakDownController(caseSelected, $scope, $timeout) {\r\n\r\n    var vm = this;\r\n\r\n    vm.patent = caseSelected;\r\n    vm.setFees = setFees;\r\n    var loadFeeTimeout;\r\n    \r\n    $scope.$parent.promise\r\n    .then(\r\n        function(response){\r\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\r\n            if($scope.$parent.availableServices.length) {            \r\n                loadFeeTimeout = $timeout(function() {\r\n                    setFees($scope.$parent.availableServices[0].action)\r\n                    vm.data = {};\r\n                    vm.data.availableAction = $scope.$parent.availableServices;\r\n                    vm.data.selectedAction = { id: vm.data.availableAction[0].id, action: vm.data.availableAction[0].action };\r\n                }, 10);\r\n            }\r\n\r\n        }\r\n    )\r\n\r\n    function feeUIAvailable(array) {\r\n\r\n        return array.some(function(o) {\r\n            return Object.keys(o).some(function(k){\r\n                return k.toLowerCase().indexOf('feeui') !== -1 && o[k] !== null;\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    function setFees(action) {\r\n\r\n        vm.availableFees = {};\r\n\r\n        if(feeUIAvailable(caseSelected.p3sServicesWithFees))\r\n\r\n        if(action == 'Euro-PCT') {\r\n            vm.displayForm1200 = true;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'Euro-PCT';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.form1200FeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.form1200FeeUI.fxRate;             \r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'renewal') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = true;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'renewal';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.renewalFeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.renewalFeeUI.fxRate;\r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'grant') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = true;\r\n            vm.displayValidation = false;\r\n            vm.availableFees.official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'grant';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.grantFeeUI;\r\n                fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                fee.fxRate = fee.grantFeeUI.fxRate;\r\n                return fee;\r\n            })\r\n        }\r\n\r\n        if(action == 'validation') {\r\n            vm.displayForm1200 = false;\r\n            vm.displayRenewal = false;\r\n            vm.displayGrant = false;\r\n            vm.displayValidation = true;\r\n            var official = caseSelected.p3sServicesWithFees.filter(function(item){\r\n                return item.serviceType === 'validation';\r\n            }).map(function(fee) {\r\n                fee.feeUI = fee.validationFeeUI;\r\n                if(fee.feeUI !== null) {\r\n                    fee.fxRate = fee.validationFeeUI.fxRate;\r\n                    fee.feeUI.savings = Number(Math.round((fee.nextStageCostUSD - fee.currentStageCostUSD) + 'e2') +'e-2');\r\n                }\r\n                \r\n                return fee;\r\n            })           \r\n\r\n            vm.availableFees.official = official[0];\r\n\r\n            if(vm.availableFees.official.feeUI !== null) {\r\n                vm.availableFees.ppFeesUSD = Number(vm.availableFees.official.feeUI.processingFeeUSD + vm.availableFees.official.feeUI.expressFeeUSD + vm.availableFees.official.feeUI.urgentFeeUSD);\r\n                vm.availableFees.ppFeesEUR = Number(vm.availableFees.official.feeUI.processingFeeEUR + vm.availableFees.official.feeUI.expressFeeEUR + vm.availableFees.official.feeUI.urgentFeeEUR);\r\n            }\r\n\r\n            return;           \r\n\r\n        }\r\n\r\n        if(action !== 'validation') {        \r\n            vm.availableFees.ppFeesUSD = Number(vm.availableFees.official[0].feeUI.processingFeeUSD + vm.availableFees.official[0].feeUI.expressFeeUSD + vm.availableFees.official[0].feeUI.urgentFeeUSD);\r\n            vm.availableFees.ppFeesEUR = Number(vm.availableFees.official[0].feeUI.processingFeeEUR + vm.availableFees.official[0].feeUI.expressFeeEUR + vm.availableFees.official[0].feeUI.urgentFeeEUR);\r\n            vm.availableFees.savings = Number(Math.round((vm.availableFees.official[0].nextStageCostUSD - vm.availableFees.official[0].currentStageCostUSD) + 'e2') +'e-2');\r\n        }\r\n        \r\n    }\r\n\r\n    $scope.$on('$destroy', function(){\r\n        $timeout.cancel(loadFeeTimeout)\r\n    })\r\n\r\n}","import angular from 'angular';\n\nimport CasesRestService from '../portfolio/services/portfolio.cases.serv.js';\nimport Form1200Service from './services/case.form1200.serv.js';\nimport GrantService from './services/case.grant.serv.js';\nimport RemindersService from './services/case.reminders.serv.js';\nimport RenewalHistoryService from './services/case.renewal.serv.js';\nimport ValidationService from './services/case.validation.serv.js';\n\nimport ActiveTabService from '../../global/services/app.activeTab.serv.js';\nimport CoreService from '../../global/services/app.core.serv.js';\nimport ChunkDataService from '../../global/services/app.chunkData.serv.js';\n\nimport dynamic from '../../global/directives/dynamic.directive.js';\nimport validationDirectives from '../../global/directives/validations.directive.js';\n\nimport CaseOverviewController from './controllers/case.overview.controller';\nimport CostChartController from './controllers/case.costchart.controller';\nimport CaseDetailsController from './controllers/case.details.controller';\nimport Form1200GeneratedController from './controllers/case.form1200-generated.controller';\nimport Form1200ReadyController from './controllers/case.form1200-ready.controller';\nimport FxChartController from './controllers/case.fxchart.controller';\nimport GrantController from './controllers/case.grant.controller';\nimport RemindersController from './controllers/case.reminders.controller';\nimport RenewalHistoryController from './controllers/case.renewal-history.controller';\nimport ValidationController from './controllers/case.validation.controller';\nimport FeeBreakDownController from './controllers/case.fee-breakdown.controller';\n\n// import routing  from './case.routes';\n\nexport default angular.module('ppApp.caseoverview', [CasesRestService, Form1200Service, GrantService, RemindersService, RenewalHistoryService, ValidationService, ActiveTabService, CoreService, ChunkDataService, dynamic])\n  \t.controller('CaseOverviewController', CaseOverviewController)\n  \t.controller('CostChartController', CostChartController)\n  \t.controller('CaseDetailsController', CaseDetailsController)\n  \t.controller('Form1200GeneratedController', Form1200GeneratedController)\n  \t.controller('Form1200ReadyController', Form1200ReadyController)\n  \t.controller('FxChartController', FxChartController)\n  \t.controller('GrantController', GrantController)\n  \t.controller('RemindersController', RemindersController)\n  \t.controller('RenewalHistoryController', RenewalHistoryController)\n    .controller('ValidationController', ValidationController)\n    .controller('FeeBreakDownController', FeeBreakDownController)\n  \t.name;","export default angular.module('services.banktransfercommit-service', []).factory('BankTransferCommitService', BankTransferCommitService).name;\n\nBankTransferCommitService.$inject = ['$http', '$q', '$state'];\n\nfunction BankTransferCommitService($http, $q, $state){\n\n\tvar factory = {\n\t\tcommitTransfer: commitTransfer\n\t};\n\n\treturn factory;\n\n\tfunction commitTransfer(order) {\n\n\t\tvar deferred = $q.defer();\n\t\t$http.post(ppdomain+'rest-committed-banktransfer/', order)\n\t\t.then(\n\t\t\tfunction(response){\n\t\t\t\tdeferred.resolve(response.data)\n\t\t\t},\n\t\t\tfunction(errResponse){\n\t\t\t\tconsole.error('Error commmitting transacton. Error: ', errResponse)\n\t\t\t\tdeferred.reject(response.data)\n\t\t\t});\n\t\t\t\n\t\t\treturn deferred.promise;\n\n\t};\n}","export default angular.module('services.basket-service', []).factory('BasketService', BasketService).name;\n\nBasketService.$inject = ['$http', '$q'];\n\nfunction BasketService($http, $q){\n\n\tvar factory = {};\n\n\t\tvar REST_SERVICE_URI = ppdomain+'rest-basket/';\n\t\t\n\t\tfactory.fetchBasketPatents = function(ids) {\n\t\t\t\n\t\t\tvar deferred = $q.defer();\n\n\t\t\t$http.post(REST_SERVICE_URI, ids)\n\t\t\t.then(\n\t\t\t\tfunction(response){\n\t\t\t\t\tdeferred.resolve(response.data);\n\t\t\t\t},\n\t\t\t\tfunction(errResponse){\n\t\t\t\t\tdeferred.reject(errResponse);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn deferred.promise;\n\t\t\t\n\t\t};\n\n\treturn factory;\n\n}","BasketController.$inject = ['$rootScope'];\n\nexport default function BasketController($rootScope) {\n\n\tvar vm = this;\n\n}\n\n","BankTransferPrepController.$inject = ['BankTransferCommitService', '$state', '$scope', '$stateParams', '$uibModal', 'ngCart']\n\nexport default function BankTransferPrepController(BankTransferCommitService, $state, $scope, $stateParams, $uibModal, ngCart) {\n\n\tvar vm = this;\n\n\tvm.pageTitle = 'Confirm Order';\n\tvm.orderObj = $stateParams.orderObj;\n\tvm.details = $stateParams.details\n\tif(vm.orderObj == '') { //if page is refreshed when on bank prepration page\n\t\t$state.go('portfolio', {reload: true}); //direct user to patents\n\t} else {\n\n\t\tvm.details.patentNos = $stateParams.orderObj.basketItems;\n\t\tvm.orderObj.billingDetails = $stateParams.details.billingDetails;\n\n\t\tvm.openCancelTransModal = openCancelTransModal;\n\t\tvm.commitTransfer = commitTransfer;\t\n\n\t\tfunction openCancelTransModal() {\n\n\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\ttemplate: require('html-loader!../html/modals/modal.cancel-transaction.tpl.htm'),\n\t\t\t\tappendTo: undefined,\n\t\t\t\tcontrollerAs: '$ctrl',\n\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t  \t};\n\n\t\t\t\t  \tthis.cancelTrans = function () {\n\t\t\t\t  \t\tngCart.empty();\n\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t    \t$state.go('portfolio');\n\t\t\t\t  \t};\n\n\t\t\t\t}]\n\t\t\t});\n\n\t\t};\n\n\t\tfunction commitTransfer() {\n\n\t\t\tvm.orderObj.billingDetails = $stateParams.details.billingDetails;\n\t\t\tBankTransferCommitService.commitTransfer(vm.orderObj) //SERVICE HANDLES STATE.GO\n\t\t\t.then(\n\t            function(response){\n\t            \t$state.go('bank-transfer-success', {orderObj: response});\n\t            },\n\t            function(errResponse){\n\t            \tif(errResponse.status === 500) {\n\t\t\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\t\t\ttemplate: require('html-loader!../html/modals/modal.commit-error.tpl.htm'),\n\t\t\t\t\t\t\tappendTo: undefined,\n           \t\t\t\t\tcontrollerAs: '$ctrl',\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t\t\t\t    \t$state.go('portfolio', {reload: true})\n\t\t\t\t\t\t\t  \t};\n\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t            \tif(errResponse.status === 409) {\n\t\t\t\t\t\tvar modalInstance = $uibModal.open({\n\t\t\t\t\t\t\ttemplate: require('html-loader!../html/modals/modal.commit-error-price.tpl.htm'),\n\t\t\t\t\t\t\tappendTo: undefined,\n           \t\t\t\t\tcontrollerAs: '$ctrl',\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcontroller: ['$uibModalInstance', function($uibModalInstance) {\n\n\t\t\t\t\t\t\t  \tthis.dismissModal = function () {\n\t\t\t\t\t\t\t    \t$uibModalInstance.close();\n\t\t\t\t\t\t\t    \t$state.go('portfolio', {reload: true})\t\t\t\t\t\t\t    \t\n\t\t\t\t\t\t\t  \t};\n\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t            }\n\t        );\n\t\t};\n\t}\n}","BankTransferSuccessController.$inject = ['$scope', '$stateParams']\n\nexport default function BankTransferSuccessController($scope, $stateParams) {\n\n\tvar vm = this;\n\n\tvm.pageTitle = 'Bank Transfer Details';\n\n\t$scope.orderObj = $stateParams.orderObj;\t\n\n}\n","import angular from 'angular';\n\nimport BankTransferCommit from './services/checkout.bank-transfer-commit.serv.js';\nimport BasketService from './services/checkout.basket.serv.js';\n\nimport BasketController from './controllers/checkout.basket.controller';\nimport BankTransferPrepController from './controllers/checkout.bank-transfer-prep.controller';\nimport BankTransferSuccessController from './controllers/checkout.bank-transfer-success.controller';\n\nexport default angular.module('ppApp.checkout', [BankTransferCommit, BasketService])\n\t.controller('BasketController', BasketController)\t\n\t.controller('BankTransferPrepController', BankTransferPrepController)\n\t.controller('BankTransferSuccessController', BankTransferSuccessController)\n\t.name","ForgotPasswordController.$inject = ['$state', '$rootScope','$http', '$scope', '$cookies', 'AuthorisationService', '$uibModal', 'Idle']\n\nexport default function ForgotPasswordController($state, $rootScope, $http, $scope, $cookies, AuthorisationService, $uibModal, Idle) {\n\n\tvar vm = this;\n\n\tvm.submitEmail = submitEmail;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();    \n\n\tfunction submitEmail(emailAddress) {\n\n\t\tvar params = {\n\t\t\temailAddress: emailAddress\n\t\t}\n\n\t\tAuthorisationService.SubmitForgottenEmail(params)\n\t\t.then(\n\t\t\tfunction(response){\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.forgot-password-success.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })\n                $state.go('login'); \n\t\t\t},\n\t\t\tfunction(errResponse){\n                vm.dataLoading = false;\n                $state.go($state.current, {}, {reload: true});\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.forgot-password-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })   \n\t\t\t}\n\t\t)\n\n\n\t}\n\n\n}","import zxcvbn from 'zxcvbn';\n\nResestPasswordController.$inject = ['$state', '$rootScope','$http', '$scope', '$cookies', '$uibModal', 'AuthorisationService', 'Idle']\n\nexport default function ResestPasswordController($state, $rootScope, $http, $scope, $cookies, $uibModal, AuthorisationService, Idle) {\n\n\tvar vm = this;\n\n\tvm.submitEmail = submitEmail;\n\n\tvm.formData = {};\n    vm.recap = {};\n    vm.recap.publicKey = '6LezdHEUAAAAABvniybP4wWGWWztRMQXT5r0_WMs';\n    vm.passwordUpdate = passwordUpdate;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();    \n  \n    function passwordUpdate(password) {\n\n        if(password !== undefined) {\n            if(vm.formData.password.length < 8){ //https://stackoverflow.com/questions/56314220/angularjs-minlength-validation-stop-characters-counter\n                $scope.resetPasswordForm.password.$setValidity('minlength', false);\n            } else{\n                $scope.resetPasswordForm.password.$setValidity('minlength', true);\n            }\n\n            if(vm.formData.password.length > 20){\n                $scope.resetPasswordForm.password.$setValidity('maxlength', false);\n            } else{\n                $scope.resetPasswordForm.password.$setValidity('maxlength', true);\n            }\n\n            vm.passwordStrength = zxcvbn(password);\n        }\n        \n    }\t\n\n\tfunction submitEmail(password) {\n        vm.dataLoading = true;\n\t\tvar params = {\n\t\t\tpassword: password\n\t\t}\n\n\t\tAuthorisationService.ResetPassword(params)\n\t\t.then(\n\t\t\tfunction(response){\n                vm.dataLoading = false;\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.reset-password-success.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })\n                $state.go('login'); \n\t\t\t},\n\t\t\tfunction(errResponse){\n                vm.dataLoading = false;\n                $state.go($state.current, {}, {reload: true});\n                var modalInstance = $uibModal.open({\n                    template: require('html-loader!../html/modals/modal.reset-password-error.tpl.htm'),\n                    appendTo: undefined,\n                    controllerAs: '$ctrl',\n                    controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                       \n                        this.dismissModal = function () {\n                            $uibModalInstance.close();\n                        };\n\n\n                    }]\n                })                \n\t\t\t}\n\t\t)\n\n\n\t}\n\n\n}","import angular from 'angular';\n\nimport AuthorisationService from '../login/services/authorisation.serv.js';\n\nimport ForgotPasswordController from './controllers/forgot-password.controller';\nimport ResetPasswordController from './controllers/reset-password.controller';\n\nexport default angular.module('ppApp.login', [AuthorisationService]) //import dashboard view controllers\n  \t.controller('ForgotPasswordController', ForgotPasswordController)\n  \t.controller('ResetPasswordController', ResetPasswordController)\n  \t.name;","LoginController.$inject = ['$state', '$rootScope','$http', '$scope', '$timeout', '$cookies', 'AuthorisationService', 'CoreService', 'Idle']\n\nexport default function LoginController($state, $rootScope, $http, $scope, $timeout, $cookies, AuthorisationService, CoreService, Idle) {\n\n    var vm = this;\n\n    vm.login = login;\n    vm.credentials = {};\n    vm.incorrectCredentials = false;\n    var dataLoadingTimeout;\n\n    function init() {\n        Idle.unwatch()\n    }\n\n    init();\n\n    function login(data) {\n\n        vm.dataLoading = true;\n\n        if(!Idle.running()) {\n            Idle.watch()\n        }\n\n        var params = {\n            j_username: vm.credentials.username,\n            j_password: vm.credentials.password\n        }\n\n        AuthorisationService.Login(params)\n        .then(\n            function(response){\n\n                dataLoadingTimeout = $timeout(function(){\n                    vm.dataLoading = false;\n                })\n\n                if(response.data.response === 'success') {\n                    AuthorisationService.SetCredentials(vm.credentials.username, vm.credentials.password)\n                    vm.incorrectCredentials = false;\n                    $state.go('dashboard', {})\n                } else {\n                    vm.incorrectCredentials = true;\n                }\n\n            }\n        )\n        // .then(\n        //     function(){\n        //         AuthorisationService.SetCredentials(vm.credentials.username, vm.credentials.password)\n        //         vm.incorrectCredentials = false;\n        //         $state.go('dashboard', {})\n\n        //     }\n        // )\n    };\n\n    var Base64 = {\n\n        keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\n        encode: function (input) {\n            var output = \"\";\n            var chr1, chr2, chr3 = \"\";\n            var enc1, enc2, enc3, enc4 = \"\";\n            var i = 0;\n\n            do {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    this.keyStr.charAt(enc1) +\n                    this.keyStr.charAt(enc2) +\n                    this.keyStr.charAt(enc3) +\n                    this.keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = \"\";\n                enc1 = enc2 = enc3 = enc4 = \"\";\n            } while (i < input.length);\n\n            return output;\n        },\n\n        decode: function (input) {\n            var output = \"\";\n            var chr1, chr2, chr3 = \"\";\n            var enc1, enc2, enc3, enc4 = \"\";\n            var i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n            if (base64test.exec(input)) {\n                window.alert(\"There were invalid base64 characters in the input text.\\n\" +\n                    \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\n                    \"Expect errors in decoding.\");\n            }\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n            do {\n                enc1 = this.keyStr.indexOf(input.charAt(i++));\n                enc2 = this.keyStr.indexOf(input.charAt(i++));\n                enc3 = this.keyStr.indexOf(input.charAt(i++));\n                enc4 = this.keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 != 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 != 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = \"\";\n                enc1 = enc2 = enc3 = enc4 = \"\";\n\n            } while (i < input.length);\n\n            return output;\n        }\n    };\n\n\n    $scope.$on('$destroy', function(){\n        $timeout.cancel(dataLoadingTimeout)\n    })\n\n}","PortfolioController.$inject = ['$scope', '$state', '$stateParams','$rootScope', '$timeout', '$uibModal', '$mdPanel', '$mdDialog', '$mdMenu', 'SearchPatentService',  'CasesRestService', '$cookies'];\n\nexport default function PortfolioController($scope, $state, $stateParams, $rootScope, $timeout, $uibModal, $mdPanel, $mdDialog, $mdMenu, SearchPatentService, CasesRestService, $cookies) {\n\n    var vm = this;\n    $scope.promise = CasesRestService.fetchAllCases();\n    $scope.filter = {};\n    $scope.tooltip1 = true;\n    var displayHelpTimeout;\n    var panelRef;\n\n    function select(i) {\n        vm.selected = i;\n    }\n\n    select($stateParams.caseId)\n\n    function uniqueArray(array) {\n        return array.filter(function(item, pos, self) {\n            return self.indexOf(item) == pos;\n        })\n    }\n\n\n\n    function noSubFilter(obj) {\n        for (var key in obj) {\n            if (obj[key]) { //if one of the $scope.filter ($scope.filter) properties evaluates to true (is selected) return false \n                return false;\n            }\n        }\n        return true; //if no subfilters return true. This will result in all filtered data items being returned a true value\n    }\n\n    function checkArray(obj, service, prop) {\n        return service.some(function(item) { //if filter[curretStageColour][red]\n            return obj[prop][item[prop]] === true;\n        })\n    }\n\n    $scope.filterByPropertiesMatchingAND = function (data) { //all data sent from filter \n\n        $scope.test = true;\n        var matchesAND = true; //set macthes to true (default)\n\n        for (var obj in $scope.filter) { //$scope.filter is populated by $scope.filter within the panel controller below. Scope filter properties are initiated from front-end. currentStageColour/serviceType\n\n            if( $scope.filter.hasOwnProperty(obj) ) {\n                if (noSubFilter($scope.filter[obj])) continue; //Check if there are any sub filter options with the value of true, if so, break from loop to return value of true\n                if (!checkArray($scope.filter, data.p3sServices, obj)) { //If the property from the data matches the property from $scope.filter ($scope.filter) return false. It will not turn up in the table\n                    matchesAND = false;\n                    break; //break from the loop and return matchesAND which would now return false\n                }\n                \n            }\n        }\n        return matchesAND;\n    }; \n\n    function updatePortfolioData() {\n        CasesRestService.fetchAllCases()\n        .then(function(response) {\n            $scope.portfolioData = response;            \n            vm.recentlyAdded.push(response.slice(-1).pop())\n        })        \n\n    }\n\n    $scope.promise //assigned promise to scope so child state can also resolve this promise to invoke functions\n    .then(function(response) {\n        if ($scope.$$destroyed) throw \"Scope destroyed\";\n        return response;\n    })\n    .then(\n        function(response){\n\n            vm.portfolioLoaded = true;\n            $scope.phoneNumber = $scope.ppDetails.partnerPhone;\n            var portfolioLoaded = $cookies.get('portfolioLoaded');\n\n            if($scope.firstTime && portfolioLoaded == undefined) {\n                displayHelpTimeout = $timeout(function(){\n                    $scope.displayCaseHelp = true;\n                    $scope.displayPortfolioHelp = true\n                    $cookies.put('portfolioLoaded', 'hasloaded'); \n                }, 5000)\n            } else {\n                $scope.displayCaseHelp = false;\n                $scope.displayPortfolioHelp = false\n            }\n\n            if(!response.length) {\n                vm.noPatents = true;\n            }\n\n            response.forEach(function(data){\n                if(data.clientRef == '') {\n                    data.clientRef = '[No Client Reference Provided]'\n                }\n            })\n\n            vm.select = select;\n            vm.selected = 0;\n            vm.stateParams = $stateParams.patentId; \n            vm.rowSelect = rowSelect;\n            vm.chipOptions = [];\n            vm.showFilter = showFilter;\n            vm.showAddPatent = showAddPatent;\n            \n            vm.sortBy = sortBy;\n            $scope.selectedChip = selectedChip;\n            $scope.portfolioData = response;\n            $scope.displayFirstHelp = displayFirstHelp;\n\n            vm.propertyName = 'ep_ApplicationNumber';\n            vm.reverse = false;\n\n            function displayFirstHelp(help, value) {\n                if(help === 'portfolio') {\n                    $scope.displayPortfolioHelp = value;\n                } else {\n                    $scope.displayCaseHelp = value;\n                }\n            }\n\n            function rowSelect(event, patent){\n\n                vm.stateParams = $stateParams;\n                if($(event.target).hasClass('generateForm1200')) {\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, form1200generate: 1, prepareGrant: 0}, {notify: false})\n                }\n\n                if($(event.target).hasClass('prepareGrant')) {\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, prepareGrant: 1, form1200generate: 0}, {notify: false})\n                }        \n\n                if(!$(event.target).hasClass('cartbtn') && !$(event.target).hasClass('generateForm1200') && !$(event.target).hasClass('prepareGrant')) {\n                    var id = ($($(event.currentTarget).find('a'))); //find the anchor tag within row (patentApplicationNumber)\n                    var patentId = id[0].id; //gets data from data-id\n                    $state.go('portfolio.modal.case', {caseId: patent.patentID, form1200generate: null})\n                }\n\n            };\n\n            function sortBy(propertyName) {\n                vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;\n                vm.propertyName = propertyName;\n            };\n\n            function selectedChip(prop, value, cat) {\n                if(cat == 'Euro-PCT') {cat = 'epct'}\n                $scope.filter[cat][prop] = false;\n            }\n\n            function showFilter(mdMenu, $event) {\n         \n                mdMenu.open($event)\n                $scope.categories = ['serviceType', 'currentStageColour'];     \n\n                //return items to filter panel\n                $scope.getItems = function (obj, array) { //obj is cat currentStageColour or serviceType\n                    return (array || []).map(function (w) {\n                        return w.p3sServices[0][obj]; //select property in p3sservices \n                    }).filter(function (w, idx, arr) {\n                        if (typeof w === 'undefined') {\n                            return false;\n                        }\n                        return arr.indexOf(w) === idx;\n                    });\n                };\n\n                $scope.updateFiltered = function(prop, value, cat) {\n                    if(value === true) {\n                        if(cat === 'epct') {cat = 'Euro-PCT'};\n                        vm.chipOptions.push({cat: cat, value: value, prop: prop})\n                    } \n                    if(value === false) {\n                        var index = vm.chipOptions.indexOf(cat);\n                        vm.chipOptions.splice(index, 1);\n                    }\n                }\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();                            \n                }\n\n            } //showFilter function end\n\n            function showAddPatent($event) {\n\n                var panelPosition = $mdPanel.newPanelPosition()\n                    .absolute()\n                    .center();\n\n                var config = {\n                    attachTo: angular.element(document.body),\n                    controller: ['mdPanelRef', '$scope', function(mdPanelRef, $scope) {\n\n                        $scope.recently = {\n                            added: []\n                        }\n                        $scope.foundPatent = false;\n\n                        $scope.findPatent = function(patentNo) {\n                            $scope.loadingPatent = true;\n                            SearchPatentService.findPatent(patentNo)\n                            .then(\n                                function(response) {\n                                    $scope.foundPatent = response.data;\n                                    $scope.loadingPatent = false;\n                                    $scope.error = false;\n                                    var patentJson = angular.toJson(response)\n                                },\n                                function(errResponse) {\n                                    console.error('Error finding patent. Error message : ', errResponse)\n                                    $scope.queriedPatent = false;\n                                    $scope.loadingPatent = false;\n                                    $scope.error = true;\n                                    // $state.go('search-patent', {}, {reload: false});\n                                    if(errResponse.status == 412) { //already added patent\n                                        $scope.searchError = 'It looks like we\\'ve already added Patent Application '+patentNo+' in to the system.  You should be able to find it in the List Patents page using the search boxes.';\n                                    } \n                                    if(errResponse.status == 409){ //incorrect check digit\n                                        $scope.searchError = 'It looks like the provided check digit differs from the check digit found at the European Patent Register. Please make sure the check digit is correct and try again.';\n                                    }\n                                    if(errResponse.status == 400 || errResponse.status == 404) { //incorrect syntax\n                                        $scope.searchError = 'We\\'ve not been able to find that patent in the European Patent Register. Please enter an application number such as EP18123456.2';\n                                    }\n\n\n                                }\n                            )\n\n                        }  \n\n                        $scope.openConfirmModal = function(patent) {\n                            var modalInstance = $uibModal.open({\n                                template: require('html-loader!../html/modals/modal.confirm-found-patent.tpl.htm'),\n                                appendTo: undefined,\n                                controllerAs: '$ctrl',\n                                controller: ['$uibModalInstance', '$location', '$anchorScroll', function($uibModalInstance, $location, $anchorScroll) {\n\n                                    this.addPatent = function () {\n                                        vm.addingPatent = true;\n                                        $uibModalInstance.close();\n                                        CasesRestService.savePatent(patent)\n                                        .then(\n                                            function(response){\n                                                \n                                                updatePortfolioData();\n\n                                                var match = response.find(function(item){\n                                                    return item.ep_ApplicationNumber == patent.ep_ApplicationNumber;\n                                                });\n\n                                                $scope.recently.added.push(match);\n                                                $scope.foundPatent = false;\n                                                $scope.searchPatent = '';\n\n\n                                            },\n                                            function(errResponse){\n                                                console.error('Error while saving Patent. Error: ', errResponse);\n                                            }\n                                        )\n\n                                    };\n\n                                 \n\n                                    this.dismissModal = function () {\n                                        $uibModalInstance.close();\n                                    };\n\n                                    this.cancelAdd = function() {\n                                        $uibModalInstance.close();                  \n                                    }\n\n                                }]\n                            })\n                        }\n\n                        $scope.$on('$destroy', function(){\n                            $timeout.cancel(toPatentTimeout)\n                        })                        \n\n                    }],\n                    controllerAs: '$ctrl',\n                    position: panelPosition,\n                    // animation: panelAnimation,\n                    hasBackdrop: true,\n                    targetEvent: $event,\n                    template: require('html-loader!../html/add-patent.tpl.htm'),\n                    clickOutsideToClose: true,\n                    escapeToClose: true,\n                    focusOnOpen: true\n                };\n                $mdPanel.open(config)\n                .then(\n                    function(result) {\n                        panelRef = result;\n                    },\n                    function(error){\n                        console.error('Error occured when opening panel: ',error)\n                    }\n                );\n\n            } //showAddPatentPanel end]\n\n        }\n    )\n    \n    $scope.$on('$destroy', function(){\n        if(panelRef) {\n            panelRef.close()\n        }\n    })\n\n    //SEARCH ADD PATENT\n\n}","export default angular.module('services.search-patent-service', []).factory('SearchPatentService', SearchPatentService).name;\n\nSearchPatentService.$inject = ['$http', '$q']; \n\nfunction SearchPatentService($http, $q) {\n\n    var REST_SEARCH_PATENT_SERVICE_URI = ppdomain+'rest-search-patents/';\n\n    var factory = {\n        findPatent: findPatent\n    };\n\n    return factory;\n\n    function findPatent(patentNo) {\n\n        var deferred= $q.defer();\n        \n        var patentItem = REST_SEARCH_PATENT_SERVICE_URI + patentNo;\n        \n        $http.get(patentItem)\n            .then(\n                function(response){\n                deferred.resolve(response);\n            }, function(errResponse) {\n                switch(errResponse.status) {\n                    case 400:\n                        errResponse.data = 'We\\'ve not been able to find that patent in the European Patent Register. Please enter an application number such as EP18123456.2';\n                    break;\n                    case 404:\n                        errResponse.data = 'We’ve not been able to find Patent Application '+patentNo+' in the European Patent Register. Please check the number you’re entering and try again.';\n                    break;\n                    case 204:\n                        errResponse.data = 'It looks like we\\'ve already added Patent Application '+patentNo+' in to the system. You should be able to find it in the List Patents page using the search boxes.';\n                    break;\n                    default:\n                        errResponse.data = null;\n                }\n                deferred.reject(errResponse);\n\n                // console.error('$Http Error 'errResponse.status': Unable to fetch  information from EPO')\n            }\n        )\n\n\n        return deferred.promise;\n\n    };\n}","import angular from 'angular';\n\nimport CasesRestService from './services/portfolio.cases.serv.js';\nimport SearchPatentService from './services/portfolio.search-patent.serv.js';\n\nimport PortfolioController from './controllers/portfolio.controller';\n\nexport default angular.module('ppApp.portfolio', [CasesRestService, SearchPatentService]) //import dashboard view controllers\n  \t.controller('PortfolioController', PortfolioController)\n  \t.name;","export default angular.module('services.uploadavatar-service', []).factory('UploadAvatarService', UploadAvatarService).name;\n\nUploadAvatarService.$inject = ['$http', '$q'];\n\nfunction UploadAvatarService($http, $q) {\n\n    var factory = {\n        uploadAvatar: uploadAvatar\n    }\n\n    return factory\n\n\n    function uploadAvatar(data) { \n\n        var deferred = $q.defer()\n\n        var config = { headers: {'Content-Type': undefined} };\n\n        $http.post('../upload-avatar/', data, config)\n        .then(\n            function(response){\n                deferred.resolve(response.data)\n            },\n            function(errResponse){\n                 deferred.reject(response.data)\n            }\n        )\n\n        return deferred.promise;\n\n    };\n};\n","import zxcvbn from 'zxcvbn';\r\n\r\nProfileController.$inject = ['$state', '$rootScope', '$scope', '$timeout', '$uibModal', '$http', 'UploadAvatarService', 'ProfileService', 'TimezoneService',]\r\n\r\nexport default function ProfileController($state, $rootScope, $scope, $timeout, $uibModal, $http, UploadAvatarService, ProfileService, TimezoneService) {\r\n\r\n    var vm = this;\r\n\r\n    $scope.newPassword = '';\r\n    vm.updateTimezone = updateTimezone;\r\n    vm.updateUser = updateUser;\r\n    vm.openAvatarModal = openAvatarModal;\r\n    vm.passwordUpdate = passwordUpdate;\r\n\r\n    function init() {\r\n\r\n        TimezoneService.fetchUsaTimeZones()\r\n        .then(\r\n            function(response){\r\n                vm.ustimezones = response;\r\n            }\r\n        )\r\n            \r\n        ProfileService.fetchUser()\r\n        .then(\r\n            function(response){\r\n                vm.user = response;\r\n            }\r\n        )\r\n\r\n        ProfileService.listUsers()\r\n        .then(\r\n            function(response){\r\n\r\n                for (var i=0; i < response.length; i++) {\r\n                    response[i].index = i + 1;\r\n                }\r\n\r\n                vm.companyUsers = response;\r\n\r\n                var userCol = (response.length / 2) + 1;\r\n                var newArr = [];\r\n\r\n                function chunk(arr, size) {\r\n                    for (var i=0; i < arr.length; i+=size) {\r\n                        newArr.push(arr.slice(i, i+size));\r\n                    }\r\n                    return newArr;\r\n                }\r\n\r\n                vm.chunkedData = {\r\n                    chunk: chunk(vm.companyUsers, userCol)\r\n                }\r\n\r\n            },\r\n            function(errResponse){\r\n                console.error('Error listing users. Error: ', errResponse);\r\n            }\r\n        );\r\n       \r\n    }; //init end\r\n\r\n    init();\r\n\r\n    function passwordUpdate(password) {\r\n\r\n        if(password) {\r\n            vm.confirmPasswordReq = true;\r\n            if(vm.formData.password.length < 8){ //https://stackoverflow.com/questions/56314220/angularjs-minlength-validation-stop-characters-counter\r\n                $scope.userProfileForm.password.$setValidity('minlength', false);\r\n            } else{\r\n                $scope.userProfileForm.password.$setValidity('minlength', true);\r\n            }\r\n\r\n            if(vm.formData.password.length > 20){\r\n                $scope.userProfileForm.password.$setValidity('maxlength', false);\r\n            } else{\r\n                $scope.userProfileForm.password.$setValidity('maxlength', true);\r\n            }\r\n\r\n            vm.passwordStrength = zxcvbn(password);\r\n        } else {\r\n            vm.confirmPasswordReq = false;\r\n        }\r\n        \r\n    }\r\n\r\n    function openAvatarModal() {\r\n        var modalInstance = $uibModal.open({\r\n            template: require('html-loader!../html/modals/modal.upload-avatar-pic.tpl.htm'),\r\n            appendTo: undefined,\r\n            controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope){\r\n\r\n                $scope.uploadImg = true;\r\n                $scope.avatarImgUploaded = false;\r\n\r\n                $scope.dismissModal = function() {\r\n                    $uibModalInstance.close()\r\n                }\r\n\r\n                $scope.cropped = {\r\n                    source: ''\r\n                }\r\n\r\n                $scope.imgSelected = false;\r\n\r\n                function dataURItoBlob(dataURI) { //In computer science Base64 is a group of binary-to-text encoding schemes that represent binary data in an ASCII string format \r\n                    var binary = atob(dataURI.split(',')[1]);\r\n                    var array = [];\r\n                    for(var i = 0; i < binary.length; i++) {\r\n                        array.push(binary.charCodeAt(i));\r\n                    }\r\n                    return new Blob([new Uint8Array(array)], {type: 'image/jpeg '});\r\n                }\r\n\r\n                $scope.uploadAvatar = function() {\r\n\r\n                    var blob = dataURItoBlob($scope.cropped.image);\r\n                    var formData = new FormData();\r\n                    formData.append('image', blob);\r\n                    UploadAvatarService.uploadAvatar(formData) \r\n                    .then(\r\n                        function(response){\r\n                            $scope.avatarImgUploaded = true;\r\n                            $rootScope.$emit('refreshAvatar',function(){\r\n                            })\r\n                            $state.reload();\r\n                        },\r\n                        function(errResponse){\r\n                            console.error('Error : unable to upload new image')\r\n                        }\r\n                    )\r\n                         \r\n                }\r\n\r\n            }]\r\n        })\r\n    } //open avatar end\r\n\r\n    function updateTimezone(item) {\r\n       vm.user.business.timezone = item;\r\n    }   \r\n\r\n    function updateUser(user, p) {\r\n\r\n        user = vm.user;\r\n\r\n        if (p !== '' || p !== undefined) {\r\n            user.newPassword = p;\r\n        }\r\n\r\n        ProfileService.updateUser(user)\r\n        .then(\r\n            function(response){  \r\n\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.update-profile-success.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {\r\n\r\n                        $scope.dismissModal = function() {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                })\r\n            },\r\n            function(errResponse){\r\n                console.error('Error updating user. Error : ', errResponse)\r\n                var modalInstance = $uibModal.open({\r\n                    template: require('html-loader!../html/modals/modal.update-profile-error.tpl.htm'),\r\n                    appendTo: undefined,\r\n                    controller: ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {\r\n\r\n                        $scope.dismissModal = function() {\r\n                            $uibModalInstance.close();\r\n                        };\r\n\r\n                    }]\r\n                })                \r\n            }\r\n        \r\n        )\r\n\r\n    }; //update user end\r\n}","import angular from 'angular';\n\nimport ProfileService from './services/profile.details.serv.js';\nimport UploadAvatarService from './services/profile.upload-avatar.serv.js';\n\nimport validationDirectives from '../../global/directives/validations.directive.js';\n\nimport TimezoneService from '../../global/services/app.timezone.serv.js';\n\nimport ProfileController from './controllers/profile.controller';\n\nimport confrimPwTo from '../../global/directives/confirm-password-check.directive.js';\nimport zxPasswordMeter from '../../global/directives/zx-password-meter.directive.js';\n\nexport default angular.module('ppApp.profile', [ProfileService, UploadAvatarService, TimezoneService, validationDirectives]) //import dashboard view controllers\n  \t.controller('ProfileController', ProfileController)\n  \t.name;","TransactionsController.$inject = ['TransactionService', '$scope', '$cookies', '$q', '$state', '$timeout'];\n\nexport default function TransactionsController(TransactionService, $scope, $cookies,  $q, $state, $timeout) {\n\n    var vm = this;\n\n    vm.transactions = null;\n    var displayHelpTimeout;\n    $scope.filter = {};\n    $scope.displayFirstHelp = displayFirstHelp;  \n\n    function noSubFilter(obj) {\n        for (var key in obj) {\n            if (obj[key]) { //if one of the $scope.filter ($scope.filter) properties evaluates to true (is selected) return false \n                return false;\n            }\n        }\n        return true; //if no subfilters return true. This will result in all filtered data items being returned a true value\n    }\n\n    function checkArray(obj, service, prop) {\n        return service.some(function(item) { //if filter[curretStageColour][red]\n            return obj[prop][item[prop]] === true;\n        })\n    }\n\n    $scope.filterByPropertiesMatchingAND = function (data) { //all data sent from filter \n        var matchesAND = true; //set macthes to true (default)\n        for (var obj in $scope.filter) { //$scope.filter is populated by $scope.filter within the panel controller below. Scope filter properties are initiated from front-end. currentStageColour/serviceType\n            if( $scope.filter.hasOwnProperty(obj) ) {\n                if (noSubFilter($scope.filter[obj])) continue; //Check if there are any sub filter options with the value of true, if so, break from loop to return value of true\n                if (!$scope.filter[obj][data[obj]]) { //If the property from the data matches the property from $scope.filter ($scope.filter) return false. It will not turn up in the table\n                    matchesAND = false;\n                    break; //break from the loop and return matchesAND which would now return false\n                }\n                \n            }\n        }\n        return matchesAND;\n    };\n\n    function displayFirstHelp(help, value) {\n        $scope.displayTransactionHelp = value;\n\n    }    \n\n    $scope.promise = TransactionService.fetchAllTransactions()\n    $scope.promise.then(\n        function(response){\n\n            $scope.transactions = response;\n            var transactionLoaded = $cookies.get('transactionLoaded');\n            if($scope.firstTime && transactionLoaded == undefined) {\n                displayHelpTimeout = $timeout(function(){\n                    $scope.displayTransactionHelp = true;\n                    $cookies.put('transactionLoaded', 'hasloaded'); \n                }, 5000)\n            } else {\n                $scope.displayTransactionHelp = false\n            }\n            \n            vm.sortBy = sortBy;\n            vm.rowSelect = rowSelect;\n            vm.select = select;\n            vm.showFilter = showFilter;\n            vm.selectedSortType = 'p3S_TransRef';   \n            vm.updateFiltered = updateFiltered;\n            vm.chipOptions = [];                        \n            $scope.selectedChip = selectedChip;\n\n            $scope.transactionsLoaded = true;\n\n            function sortBy(propertyName) {\n                vm.reverse = (vm.propertyName === propertyName) ? !vm.reverse : false;\n                vm.propertyName = propertyName;\n            };\n\n            function select(i) {\n                vm.selected = i;\n            }            \n\n            function rowSelect(event, transaction){\n                $state.go('transactions.modal.transaction-item', {transId: transaction.p3s_TransRef})\n            };          \n\n            function selectedChip(prop, value, cat) {\n                $scope.filter[cat][prop] = false;\n            }\n\n            function updateFiltered(prop, value, cat) {\n                if(value === true) {\n                    vm.chipOptions.push({cat: cat, value: value, prop: prop})\n                } \n                if(value === false) {\n                    var index = vm.chipOptions.indexOf(cat);\n                    vm.chipOptions.splice(index, 1);\n                }\n            }\n\n            function showFilter(mdMenu, $event) {\n                mdMenu.open($event)\n                $scope.categories = ['transTypeUI', 'latestTransStatus'];     \n\n                //return items to filter panel\n                $scope.getItems = function (obj, array) { //obj is cat currentStageColour or serviceType\n                    return (array || []).map(function (w) {\n                        return w[obj]; //select property in p3sservices \n                    }).filter(function (w, idx, arr) {\n                        if (typeof w === 'undefined') {\n                            return false;\n                        }\n                        return arr.indexOf(w) === idx;\n                    });\n                };\n\n\n                $scope.closeDialog = function() {\n                    $mdDialog.hide();                            \n                }\n\n            } //showFilter function end         \n\n        }\n\n    )\n\n\n}","TransactionItemController.$inject = ['$scope', '$state', '$timeout', '$stateParams'];\n\nexport default function TransactionItemController($scope, $state, $timeout, $stateParams) {\n\n\tvar vm = this;\n\tvm.setTab = setTab;\n\tvm.closeOverview = closeOverview;\n\tvm.caseoverview_tab = 'details';\n\n\tvm.transStatus = [\n\t\t{\n\t\t\tstatus: 'Initiated', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'You\\'ve checked out your basket on the Patent Place, and we\\'re now doing our work in the background. We will now send the request over to our payment partners Moneycorp, requesting that they book the currency exchange, and to expect a payment from you.',\n\t\t\tposition: 'bottom-left'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'Awaiting Funds', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have booked the currency exchange, and are now waiting for your payment. They\\'ll expect the funds by the date and time specified, and for it to have the correct reference on it so that the payment can be matched to the transation.',\n\t\t\tposition: 'bottom-left'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'Funds Received', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have received your payment and they\\'re now completing the foreign exchange. This happens the day after your funds were expected by MoneyCorp.',\n\t\t\tposition: 'bottom-left'\n\t\t},\n\t\t{\n\t\t\tstatus: 'Funds Sent', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'MoneyCorp have completed the currency exchange and the Euros have been sent to the European Patent Office.',\n\t\t\tposition: 'bottom-right'\n\t\t},\n\t\t{\n\t\t\tstatus: 'EPO Received', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'We\\'ve had confirmation that the funds have been received by the EPO.',\n\t\t\tposition: 'bottom-right'\n\t\t}, \n\t\t{\n\t\t\tstatus: 'EPO Instructed', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'Everything is in place, and we’ve instructed the EPO.',\n\t\t\tposition: 'bottom-right'\n\t\t},\n\t\t{\n\t\t\tstatus: 'Completed', \n\t\t\tactive: false, \n\t\t\tcomplete: false,\n\t\t\ttip: 'We\\'ve had confirmation that your transaction has been completed. You can download a copy of the invoice or any relevant certificate below.',\n\t\t\tposition: 'bottom-right'\n\t\t}\n\t];\t\n\n    function closeOverview() {\n        $state.go('transactions', {}, {reload: false})\n    }\n\n    function setTab(tab) {\n        vm.caseoverview_tab = tab;\n    }\n\n\n\n    //assigned promise to scope so child state can also resolve this promise to invoke functions\n \t$scope.promise.then(function(response){\n\n            vm.transactionItem = response.find(function(transaction){\n                return transaction.p3s_TransRef == $stateParams.transId;\n            })\n\n\t\t\tvm.transactionItem.serviceUIs.map(function(item, index){\n\t\t\t\t// item.transItemStatus = transItemStatus(isValidation, transactionItem.latestTransStatus, vm.transactionItem.hasFailed);\n\n\t\t\t\tif(item.renewalFeeUI) { \n\t\t\t\t\titem.serviceType = 'renewal'; \n\t\t\t\t\titem.serviceFeeUI = item.renewalFeeUI; \n\t\t\t\t}\n\t\t\t\tif(item.form1200FeeUI) { \n\t\t\t\t\titem.serviceType = 'Euro-PCT'; \n\t\t\t\t\titem.serviceFeeUI = item.form1200FeeUI; \n\t\t\t\t}\n\t\t\t\tif(item.grantFeeUI) { \n\t\t\t\t\titem.serviceType = 'grant'; \n\t\t\t\t\titem.serviceFeeUI = item.grantFeeUI; \n\t\t\t\t}\n\n\t\t\t\tif(item.validationFeeUI) { \n\t\t\t\t\tif(vm.transStatus[3].status !== 'Processing Funds') {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar obj1 = {\n\t\t\t\t\t\t\tstatus: 'Processing Funds', \n\t\t\t\t\t\t\tactive: false, \n\t\t\t\t\t\t\tcomplete: false,\n\t\t\t\t\t\t\ttip: 'We are currently processing your funds',\n\t\t\t\t\t\t\tposition: 'bottom-right'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar obj2 = {\n\t\t\t\t\t\t\tstatus: 'Processing', \n\t\t\t\t\t\t\tactive: false, \n\t\t\t\t\t\t\tcomplete: false,\n\t\t\t\t\t\t\ttip: 'We are in the process of gathering and forwarding on the required documents to the appropriate European associates',\n\t\t\t\t\t\t\tposition: 'bottom-right'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvm.transStatus.splice(3, 3);\n\t\t\t\t\t\tvm.transStatus.splice(3, 0, obj1);\n\t\t\t\t\t\tvm.transStatus.splice(4, 0, obj2);\n\t\t\t\t\t}\n\n\t\t\t\t\titem.serviceType = 'validation'; \n\t\t\t\t\titem.serviceFeeUI = item.validationFeeUI;\n\t\t\t\t\titem.allStates = item.validationFeeUI.designatedStates.concat(item.validationFeeUI.validationStates, item.validationFeeUI.extensionStates)\n\t\t\t\t}\n\n\t\t\t\treturn item;\n\n\t\t\t})\n\n\n\t\t\tfunction checkProgress() { //function to add statuses complete or active to view so it provides proggress bar to user\n\n\t\t\t\tvar statusIndex;\n\n\t\t\t\tvm.transStatus.forEach(function(data, index){\n\t\t\t\t\tif(data.status == vm.transactionItem.latestTransStatus) {\n\t\t\t\t\t\tstatusIndex = index; //find current active status\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tfor(var i=0; i <= statusIndex; i++){\n\t\t\t\t\tvm.transStatus[i].complete = true; //change property complete to true to all items\n\t\t\t\t\tif(vm.transactionItem.latestTransStatus == vm.transStatus[i].status) { //until it matches current tran statues\n\t\t\t\t\t\tvm.transStatus[i].active = true; // change active property value to true\n\t\t\t\t\t\tif(vm.transactionItem.latestTransStatus !== 'Completed') {\n\t\t\t\t\t\t\tvm.transStatus[i].complete = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvm.transStatus[i].active = false;\n\t\t\t\t\t\t\tvm.transStatus[i].complete = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t\tvm.checkProgress = checkProgress;\n\t\t\tvm.transactionLoaded = true;\n\n\t})\n\t\t\n\n\n\n\n}","TransactionDetailsController.$inject = ['$scope', '$state', '$timeout', '$stateParams'];\n\nexport default function TransactionDetailsController($scope, $state, $timeout, $stateParams) {\n\n\n\tvar vm = this;\n\tvar transStatusArray = ['Initiated', 'Awaiting Funds', 'Funds Received', 'Funds Sent', 'EPO Received', 'EPO Instructed', 'Completed'];\n\tvar transStatusValidationArray = ['Initiated', 'Awaiting Funds', 'Processing Funds', 'Processing', 'Completed'];\t\t\n\t\n\t$scope.promise.then(function(response){\n        vm.transactionItem = response.find(function(transaction){\n            return transaction.p3s_TransRef == $stateParams.transId;\n        })\n\t    var isValidation = vm.transactionItem.serviceUIs.some(function(item){\n\t        return item.newType == 'Validation' ? true : false;\n\t    })\n\t    vm.transactionItem.serviceUIs.map(function(item, index){\n\t\t\titem.transItemStatus = transItemStatus(isValidation, vm.transactionItem.latestTransStatus, vm.transactionItem.hasFailed);\n\t    })\n\t})\n\t\n\n    function transItemStatus(val, status, failed) {\n\n    \tif(failed) {\n    \t\treturn 'Failed'\n    \t} else {\n\t    \t\n\t    \tvar index;\n\t    \tif(val === true) {\n\t    \t\tindex = transStatusValidationArray.indexOf(status);\n\t\t    \tif(index < 3) {\n\t\t    \t\treturn 'Payment in progress'\n\t\t    \t} else {\n\t\t    \t\treturn status;\n\t\t    \t}    \t\t\n\t    \t} else {\n\t    \t\tindex = transStatusArray.indexOf(status);\n\t\t    \tif(index < 5) {\n\t\t    \t\treturn 'Payment in progress'\n\t\t    \t} else {\n\t\t    \t\treturn status;\n\t\t    \t}        \t\t\n\t    \t}\n\n    \t}\n\n    }\n\n}","import angular from 'angular';\n\nimport TransactionsService from './services/transactions.serv.js';\n\nimport TransactionsController from './controllers/transactions.controller';\nimport TransactionItemController from './controllers/transaction-item.controller';\nimport TransactionDetailsController from './controllers/transaction-item.details.controller';\n\nexport default angular.module('ppApp.transactions', [TransactionsService]) //import dashboard view controllers\n  \t.controller('TransactionsController', TransactionsController)\n  \t.controller('TransactionItemController', TransactionItemController)\n  \t.controller('TransactionDetailsController', TransactionDetailsController)\n  \t.name;","module.exports = __webpack_public_path__ + \"4aa1e7fd5f8cbb59593a247b612c6642.jpg\";","module.exports = __webpack_public_path__ + \"d1eb303440aa99c2f000ff57c900df14.jpg\";"],"sourceRoot":""}