// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Notification;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Notification_Roo_Finder {
    
    public static Long Notification.countFindNotificationsByNotificationName(String notificationName) {
        if (notificationName == null || notificationName.length() == 0) throw new IllegalArgumentException("The notificationName argument is required");
        EntityManager em = Notification.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Notification AS o WHERE o.notificationName = :notificationName", Long.class);
        q.setParameter("notificationName", notificationName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Notification> Notification.findNotificationsByNotificationName(String notificationName) {
        if (notificationName == null || notificationName.length() == 0) throw new IllegalArgumentException("The notificationName argument is required");
        EntityManager em = Notification.entityManager();
        TypedQuery<Notification> q = em.createQuery("SELECT o FROM Notification AS o WHERE o.notificationName = :notificationName", Notification.class);
        q.setParameter("notificationName", notificationName);
        return q;
    }
    
    public static TypedQuery<Notification> Notification.findNotificationsByNotificationName(String notificationName, String sortFieldName, String sortOrder) {
        if (notificationName == null || notificationName.length() == 0) throw new IllegalArgumentException("The notificationName argument is required");
        EntityManager em = Notification.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Notification AS o WHERE o.notificationName = :notificationName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Notification> q = em.createQuery(queryBuilder.toString(), Notification.class);
        q.setParameter("notificationName", notificationName);
        return q;
    }
    
}
