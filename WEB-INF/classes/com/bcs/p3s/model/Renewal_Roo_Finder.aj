// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.bcs.p3s.model;

import com.bcs.p3s.model.Patent;
import com.bcs.p3s.model.Renewal;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Renewal_Roo_Finder {
    
    public static Long Renewal.countFindRenewalsByPatent(Patent patent) {
        if (patent == null) throw new IllegalArgumentException("The patent argument is required");
        EntityManager em = Renewal.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Renewal AS o WHERE o.patent = :patent", Long.class);
        q.setParameter("patent", patent);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Renewal> Renewal.findRenewalsByPatent(Patent patent) {
        if (patent == null) throw new IllegalArgumentException("The patent argument is required");
        EntityManager em = Renewal.entityManager();
        TypedQuery<Renewal> q = em.createQuery("SELECT o FROM Renewal AS o WHERE o.patent = :patent", Renewal.class);
        q.setParameter("patent", patent);
        return q;
    }
    
    public static TypedQuery<Renewal> Renewal.findRenewalsByPatent(Patent patent, String sortFieldName, String sortOrder) {
        if (patent == null) throw new IllegalArgumentException("The patent argument is required");
        EntityManager em = Renewal.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Renewal AS o WHERE o.patent = :patent");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Renewal> q = em.createQuery(queryBuilder.toString(), Renewal.class);
        q.setParameter("patent", patent);
        return q;
    }
    
}
