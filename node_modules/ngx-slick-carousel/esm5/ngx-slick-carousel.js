import { Component, Input, Output, EventEmitter, NgZone, forwardRef, Directive, ElementRef, Host, Inject, PLATFORM_ID, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isPlatformBrowser, CommonModule } from '@angular/common';

var SlickCarouselComponent = (function () {
    function SlickCarouselComponent(el, zone) {
        this.el = el;
        this.zone = zone;
        this.afterChange = new EventEmitter();
        this.beforeChange = new EventEmitter();
        this.breakpoint = new EventEmitter();
        this.destroy = new EventEmitter();
        this.init = new EventEmitter();
        this.slides = [];
        this.initialized = false;
    }
    SlickCarouselComponent.prototype.ngOnDestroy =
        function () {
            this.unslick();
        };
    SlickCarouselComponent.prototype.ngAfterViewInit =
        function () {
        };
    SlickCarouselComponent.prototype.initSlick =
        function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                _this.$instance = jQuery(_this.el.nativeElement);
                _this.$instance.on('init', function (event, slick) {
                    _this.zone.run(function () {
                        _this.init.emit({ event: event, slick: slick });
                    });
                });
                _this.$instance.slick(_this.config);
                _this.initialized = true;
                _this.$instance.on('afterChange', function (event, slick, currentSlide) {
                    _this.zone.run(function () {
                        _this.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });
                    });
                });
                _this.$instance.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                    _this.zone.run(function () {
                        _this.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });
                    });
                });
                _this.$instance.on('breakpoint', function (event, slick, breakpoint) {
                    _this.zone.run(function () {
                        _this.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });
                    });
                });
                _this.$instance.on('destroy', function (event, slick) {
                    _this.zone.run(function () {
                        _this.destroy.emit({ event: event, slick: slick });
                    });
                });
            });
        };
    SlickCarouselComponent.prototype.addSlide =
        function (slickItem) {
            if (!this.initialized) {
                this.initSlick();
            }
            this.slides.push(slickItem);
            this.$instance.slick('slickAdd', slickItem.el.nativeElement);
        };
    SlickCarouselComponent.prototype.removeSlide =
        function (slickItem) {
            var idx = this.slides.indexOf(slickItem);
            this.$instance.slick('slickRemove', idx);
            this.slides = this.slides.filter(function (s) { return s !== slickItem; });
        };
    SlickCarouselComponent.prototype.slickGoTo =
        function (index) {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('slickGoTo', index);
            });
        };
    SlickCarouselComponent.prototype.slickNext =
        function () {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('slickNext');
            });
        };
    SlickCarouselComponent.prototype.slickPrev =
        function () {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('slickPrev');
            });
        };
    SlickCarouselComponent.prototype.slickPause =
        function () {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('slickPause');
            });
        };
    SlickCarouselComponent.prototype.slickPlay =
        function () {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('slickPlay');
            });
        };
    SlickCarouselComponent.prototype.unslick =
        function () {
            var _this = this;
            this.zone.run(function () {
                _this.$instance.slick('unslick');
                _this.initialized = false;
            });
        };
    SlickCarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-slick-carousel',
                    exportAs: 'slick-carousel',
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return SlickCarouselComponent; }),
                            multi: true
                        }],
                    template: '<ng-content></ng-content>',
                },] },
    ];
    SlickCarouselComponent.ctorParameters = function () {
        return [
            { type: ElementRef, },
            { type: NgZone, },
        ];
    };
    SlickCarouselComponent.propDecorators = {
        "config": [{ type: Input },],
        "afterChange": [{ type: Output },],
        "beforeChange": [{ type: Output },],
        "breakpoint": [{ type: Output },],
        "destroy": [{ type: Output },],
        "init": [{ type: Output },],
    };
    return SlickCarouselComponent;
}());
var SlickItemDirective = (function () {
    function SlickItemDirective(el, platformId, carousel) {
        this.el = el;
        this.platformId = platformId;
        this.carousel = carousel;
    }
    SlickItemDirective.prototype.ngAfterViewInit =
        function () {
            if (isPlatformBrowser(this.platformId)) {
                this.carousel.addSlide(this);
            }
        };
    SlickItemDirective.prototype.ngOnDestroy =
        function () {
            if (isPlatformBrowser(this.platformId)) {
                this.carousel.removeSlide(this);
            }
        };
    SlickItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxSlickItem]',
                },] },
    ];
    SlickItemDirective.ctorParameters = function () {
        return [
            { type: ElementRef, },
            { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
            { type: SlickCarouselComponent, decorators: [{ type: Host },] },
        ];
    };
    return SlickItemDirective;
}());
var SlickCarouselModule = (function () {
    function SlickCarouselModule() {
    }
    SlickCarouselModule.forRoot =
        function () {
            return {
                ngModule: SlickCarouselModule,
            };
        };
    SlickCarouselModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        SlickCarouselComponent,
                        SlickItemDirective,
                    ],
                    exports: [
                        SlickCarouselComponent,
                        SlickItemDirective,
                    ]
                },] },
    ];
    return SlickCarouselModule;
}());

export { SlickCarouselModule, SlickCarouselComponent, SlickItemDirective };
//# sourceMappingURL=ngx-slick-carousel.js.map
